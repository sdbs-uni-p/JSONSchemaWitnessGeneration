{
  "allOf": [
    {
      "description": "DeploymentCondition describes the state of a deployment at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "lastUpdateTime": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": [
            "string",
            "null"
          ]
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": [
            "string",
            "null"
          ]
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": [
            "string",
            "null"
          ]
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object",
      "$schema": "http://json-schema.org/schema#"
    },
    {
      "not": {
        "description": "ExternalAdmissionHook describes an external admission webhook and the resources and operations it applies to.",
        "required": [
          "name",
          "clientConfig"
        ],
        "properties": {
          "clientConfig": {
            "description": "AdmissionHookClientConfig contains the information to make a TLS connection with the webhook",
            "required": [
              "service",
              "caBundle"
            ],
            "properties": {
              "caBundle": {
                "description": "CABundle is a PEM encoded CA bundle which will be used to validate webhook's server certificate. Required",
                "type": "string",
                "format": "byte"
              },
              "service": {
                "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
                "required": [
                  "namespace",
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name is the name of the service Required",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace is the namespace of the service Required",
                    "type": "string"
                  }
                }
              }
            }
          },
          "failurePolicy": {
            "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The name of the external admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
            "type": [
              "string",
              "null"
            ]
          },
          "rules": {
            "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
              "properties": {
                "apiGroups": {
                  "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "apiVersions": {
                  "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "operations": {
                  "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If '*' is present, the length of the slice must be one. Required.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "resources": {
                  "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          }
        },
        "$schema": "http://json-schema.org/schema#",
        "type": "object"
      }
    }
  ]
}
