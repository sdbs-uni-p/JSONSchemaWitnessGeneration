{
    "gear": {
        "name": "me-ica",
        "label": "ME-ICA: Multi-Echo Independent Components Analysis",
        "description": "Multi-Echo Independent Components Analysis (ME-ICA) is a method for fMRI analysis and denoising based on the T2* decay of BOLD signals, as measured using multi-echo fMRI. ME-ICA decomposes multi-echo fMRI datasets into independent components (ICs) using FastICA, then categorizes ICs as BOLD or noise using their BOLD and non-BOLD weightings (measured as Kappa and Rho values, respectively). Removing non-BOLD weighted components robustly denoises data for motion, physiology and scanner artifacts, in a simple and physically principled way. Pipeline includes: 1. Preprocess multi-echo datasets and apply multi-echo ICA based on spatial concatenation. 2. Calculation of motion parameters based on images with highest contrast. 3. Application of motion correction and coregistration parameters. 4. EPI preprocessing (temporal alignment, smoothing, etc) in appropriate order. 5. Compute PCA and ICA in conjunction with TE-dependence analysis.",
        "maintainer": "Flywheel <support@flywheel.io>",
        "author": "Prantik Kundu",
        "url": "https://github.com/ME-ICA/me-ica/blob/master/README.meica",
        "source": "https://github.com/flywheel-apps/me-ica",
        "cite": "Kundu, P., Brenowitz, N.D., Voon, V., Worbe, Y., Vertes, P.E., Inati, S.J., Saad, Z.S., Bandettini, P.A. & Bullmore, E.T. Integrated strategy for improving functional connectivity mapping using multiecho fMRI. PNAS (2013). Kundu, P., Inati, S.J., Evans, J.W., Luh, W.M. & Bandettini, P.A. Differentiating BOLD and non-BOLD signals in fMRI time series using multi-echo EPI. NeuroImage (2011). http://dx.doi.org/10.1016/j.neuroimage.2011.12.028",
        "license": "Other",
        "flywheel": "0",
        "version": "0.3.4_3.2beta1",
        "custom": {
            "gear-builder": {
                "category": "analysis",
                "image": "flywheel/me-ica:0.3.4_3.2beta1"
            },
            "docker-image": "flywheel/me-ica:0.3.4_3.2beta1",
            "flywheel": {
                "suite": "AFNI"
            }
        },
        "config": {
            "basetime": {
                "description": "ex: -b 10s OR -b 10v  Time to steady-state equilibration in seconds(s) or volumes(v). Default 0. ",
                "default": "0",
                "type": "string"
            },
            "mni": {
                "description": "Warp to MNI standard space using high-resolution template.",
                "default": false,
                "type": "boolean"
            },
            "tr": {
                "description": "The TR. Optional. The default is to read this value from input dataset header.",
                "optional": true,
                "type": "number"
            },
            "cpus": {
                "description": "Maximum number of CPUs (OpenMP threads) to use. Default 2.",
                "default": 2,
                "type": "integer"
            },
            "no_axialize": {
                "description": "Do not re-write dataset in axial-first order. Default is to axialize, recommended.",
                "default": false,
                "type": "boolean"
            },
            "keep_int": {
                "description": "Keep preprocessing intermediates. Default delete.",
                "default": false,
                "type": "boolean"
            },
            "tpattern_gen": {
                "description": "Use generated tpattern file from NIfTI header information in Flywheel. If a slice_timing file is not provided, this option will use the generated 'slicetimes.txt' file generated from the NIfTI metadata in Flywheel. Default=true",
                "default": false,
                "type": "boolean"
            },
            "native": {
                "description": "Output native space results in addition to standard space results",
                "default": false,
                "type": "boolean"
            },
            "daw": {
                "description": "Daw is a weight use to control ICA dimensionality. It may be raised (e.g., from 10 to 20) to account for a low number of timepoints or lowered (e.g., from 10 to 5) if meica does not converge.",
                "default": 10,
                "type": "integer"
            }
        },
        "inputs": {
            "api_key": {
                "base": "api-key"
            },
            "functional": {
                "description": "Functional DICOM dataset (Required).",
                "base": "file",
                "type": {
                    "enum": [
                        "dicom"
                    ]
                }
            },
            "anatomical": {
                "description": "Anatomical NIfTI file (Optional).",
                "optional": true,
                "base": "file",
                "type": {
                    "enum": [
                        "nifti"
                    ]
                }
            },
            "slice_timing": {
                "description": "Text file containing slice timing (Optional).",
                "optional": true,
                "base": "file",
                "type": {
                    "enum": [
                        "text"
                    ]
                }
            }
        }
    },
    "exchange": {
        "git-commit": "e88917400ceced57d6261101de5c79454273db63",
        "rootfs-hash": "sha384:861c9674f5725dbc56986aa8f8d8f863622cfaab2cfa97f4a26e6ec1afb99a29de4eafcb5f886c02a7f84d5339a4905e",
        "rootfs-url": "https://storage.googleapis.com/flywheel-exchange/flywheel-me-ica-sha384-861c9674f5725dbc56986aa8f8d8f863622cfaab2cfa97f4a26e6ec1afb99a29de4eafcb5f886c02a7f84d5339a4905e.tgz"
    },
    "invocation-schema": {
        "title": "Invocation manifest for ME-ICA: Multi-Echo Independent Components Analysis",
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
            "config": {
                "type": "object",
                "properties": {
                    "basetime": {
                        "default": "0",
                        "type": "string"
                    },
                    "mni": {
                        "default": false,
                        "type": "boolean"
                    },
                    "tr": {
                        "type": "number"
                    },
                    "cpus": {
                        "default": 2,
                        "type": "integer"
                    },
                    "no_axialize": {
                        "default": false,
                        "type": "boolean"
                    },
                    "keep_int": {
                        "default": false,
                        "type": "boolean"
                    },
                    "tpattern_gen": {
                        "default": false,
                        "type": "boolean"
                    },
                    "native": {
                        "default": false,
                        "type": "boolean"
                    },
                    "daw": {
                        "default": 10,
                        "type": "integer"
                    }
                },
                "required": [
                    "basetime",
                    "mni",
                    "cpus",
                    "no_axialize",
                    "keep_int",
                    "tpattern_gen",
                    "native",
                    "daw"
                ]
            },
            "inputs": {
                "type": "object",
                "properties": {
                    "api_key": {
                        "type": "object"
                    },
                    "functional": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "dicom"
                                ]
                            }
                        }
                    },
                    "anatomical": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "nifti"
                                ]
                            }
                        }
                    },
                    "slice_timing": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "text"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "api_key",
                    "functional"
                ]
            }
        },
        "required": [
            "config",
            "inputs"
        ]
    }
}