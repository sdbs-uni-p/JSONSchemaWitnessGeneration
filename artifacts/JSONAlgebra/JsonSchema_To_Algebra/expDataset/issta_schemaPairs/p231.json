[
  {
    "id": 1,
    "schema1": {
      "description": "ContainerStatus contains details for the current status of this container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://<container_id>'.",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": [
            "string",
            "null"
          ]
        },
        "imageID": {
          "description": "ImageID of the container's image.",
          "type": [
            "string",
            "null"
          ]
        },
        "lastState": {
          "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
          "properties": {
            "running": {
              "description": "ContainerStateRunning is a running state of a container.",
              "properties": {
                "startedAt": {
                  "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ]
            },
            "terminated": {
              "description": "ContainerStateTerminated is a terminated state of a container.",
              "properties": {
                "containerID": {
                  "description": "Container's ID in the format 'docker://<container_id>'",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "exitCode": {
                  "description": "Exit status from the last termination of the container",
                  "format": "int32",
                  "type": "integer"
                },
                "finishedAt": {
                  "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "message": {
                  "description": "Message regarding the last termination of the container",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reason": {
                  "description": "(brief) reason from the last termination of the container",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "signal": {
                  "description": "Signal from the last termination of the container",
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "startedAt": {
                  "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "exitCode"
              ],
              "type": [
                "object",
                "null"
              ]
            },
            "waiting": {
              "description": "ContainerStateWaiting is a waiting state of a container.",
              "properties": {
                "message": {
                  "description": "Message regarding why the container is not yet running.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reason": {
                  "description": "(brief) reason the container is not yet running.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ]
        },
        "name": {
          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
          "type": [
            "string",
            "null"
          ]
        },
        "ready": {
          "description": "Specifies whether the container has passed its readiness probe.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "restartCount": {
          "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
          "format": "int32",
          "type": [
            "integer",
            "null"
          ]
        },
        "state": {
          "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
          "properties": {
            "running": {
              "description": "ContainerStateRunning is a running state of a container.",
              "properties": {
                "startedAt": {
                  "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ]
            },
            "terminated": {
              "description": "ContainerStateTerminated is a terminated state of a container.",
              "properties": {
                "containerID": {
                  "description": "Container's ID in the format 'docker://<container_id>'",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "exitCode": {
                  "description": "Exit status from the last termination of the container",
                  "format": "int32",
                  "type": "integer"
                },
                "finishedAt": {
                  "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "message": {
                  "description": "Message regarding the last termination of the container",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reason": {
                  "description": "(brief) reason from the last termination of the container",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "signal": {
                  "description": "Signal from the last termination of the container",
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "startedAt": {
                  "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "exitCode"
              ],
              "type": [
                "object",
                "null"
              ]
            },
            "waiting": {
              "description": "ContainerStateWaiting is a waiting state of a container.",
              "properties": {
                "message": {
                  "description": "Message regarding why the container is not yet running.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reason": {
                  "description": "(brief) reason the container is not yet running.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ]
        }
      },
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "type": "object",
      "$schema": "http://json-schema.org/schema#"
    },
    "schema2": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
            "required": [
              "weight",
              "preference"
            ],
            "properties": {
              "preference": {
                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                "properties": {
                  "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "The label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                          "type": "string"
                        },
                        "values": {
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "matchFields": {
                    "description": "A list of node selector requirements by node's fields.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "The label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                          "type": "string"
                        },
                        "values": {
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "weight": {
                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
          "required": [
            "nodeSelectorTerms"
          ],
          "properties": {
            "nodeSelectorTerms": {
              "description": "Required. A list of node selector terms. The terms are ORed.",
              "type": "array",
              "items": {
                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                "properties": {
                  "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "The label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                          "type": "string"
                        },
                        "values": {
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "matchFields": {
                    "description": "A list of node selector requirements by node's fields.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                      "required": [
                        "key",
                        "operator"
                      ],
                      "properties": {
                        "key": {
                          "description": "The label key that the selector applies to.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                          "type": "string"
                        },
                        "values": {
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "$schema": "http://json-schema.org/schema#",
      "type": "object"
    },
    "tests": {
      "s1SubsetEqOfs2": false
    }
  }
]
