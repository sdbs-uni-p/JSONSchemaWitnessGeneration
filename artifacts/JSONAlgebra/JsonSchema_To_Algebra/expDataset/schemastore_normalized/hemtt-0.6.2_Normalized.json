{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "parallel-requires-foreach-to-be-true": {
      "anyOf": [
        {
          "not": {
            "$ref": "#/definitions/is-parallel-true"
          }
        },
        {
          "properties": {
            "foreach": {
              "enum": [
                true
              ]
            }
          },
          "required": [
            "foreach"
          ]
        }
      ]
    },
    "is-parallel-true": {
      "properties": {
        "parallel": {
          "enum": [
            true
          ]
        }
      }
    }
  },
  "description": "The hemtt.json or hemtt.toml file is used to configure your HEMTT Project. All examples are done using JSON, but both files support every feature of HEMTT. hemtt.toml will be used if both files are present.",
  "properties": {
    "name": {
      "type": "string",
      "title": "The Name Schema",
      "default": "",
      "description": "Long name of your project.",
      "examples": [
        "Advanced Banana Environment"
      ],
      "pattern": "^(.*)$"
    },
    "prefix": {
      "type": "string",
      "title": "The Prefix Schema",
      "default": "",
      "description": "Prefix used for CBA macros and the release directory name.",
      "examples": [
        "ABE3"
      ],
      "pattern": "^(.*)$"
    },
    "author": {
      "type": "string",
      "title": "The Author Schema",
      "default": "",
      "description": "Author of the project.",
      "examples": [
        "ACE Mod Team"
      ],
      "pattern": "^(.*)$"
    },
    "version": {
      "type": "string",
      "title": "The Version Schema",
      "default": "",
      "description": "HEMTT will look for ```addons/main/script_version.hpp``` and use it for the version number. If you are not using the CBA project structure or do not have that file you can add a version number in the HEMTT project file.",
      "examples": [
        "1.0.0.0"
      ],
      "pattern": "^(.*)$"
    },
    "files": {
      "type": "array",
      "title": "The Files Schema",
      "description": "HEMTT will copy the files to the release directory after a successful release build. Supports glob patterns.",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          "mod.cpp",
          "logo.paa",
          "*.dll"
        ],
        "pattern": "^(.*)$"
      }
    },
    "include": {
      "type": "array",
      "title": "The Include Schema",
      "description": "HEMTT will include matching relative or absolute paths when building.",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          "./include"
        ],
        "pattern": "^(.*)$"
      }
    },
    "exclude": {
      "type": "array",
      "title": "The Exclude Schema",
      "description": "HEMTT will exclude matching files when building.",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          "*.psd",
          "*.png",
          "*.tga"
        ],
        "pattern": "^(.*)$"
      }
    },
    "optionals": {
      "type": "array",
      "title": "The Optionals Schema",
      "description": "HEMTT will build the specified addons from the ./optionals folder.",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          "tracers",
          "particles"
        ],
        "pattern": "^(.*)$"
      }
    },
    "folder_optionals": {
      "type": "boolean",
      "title": "The Folder_optionals Schema",
      "description": "HEMTT will by default build optionals into their own mod folders, which can be directly launched by the user. This can be turned off to build optional PBOs directly into optionals folder.",
      "default": false,
      "examples": [
        false
      ]
    },
    "skip": {
      "type": "array",
      "title": "The Skip Schema",
      "description": "HEMTT will skip building the specified addons.",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          "hearing",
          "zeus"
        ],
        "pattern": "^(.*)$"
      }
    },
    "headerexts": {
      "type": "array",
      "title": "The Headerexts Schema",
      "description": "HEMTT will apply specified header extensions to each PBO. Supports templating.",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          "author=me"
        ],
        "pattern": "^(.*)$"
      }
    },
    "modname": {
      "type": "string",
      "title": "The Modname Schema",
      "description": "HEMTT will use the specified mod name (without @) to form @mod folder. Supports templating.",
      "default": "",
      "examples": [
        "my_mod"
      ],
      "pattern": "^(.*)$"
    },
    "keyname": {
      "type": "string",
      "title": "The Keyname Schema",
      "description": "HEMTT will use the specified key name for .bikey and .biprivatekey names. Supports templating.",
      "default": "",
      "examples": [
        "my_key"
      ],
      "pattern": "^(.*)$"
    },
    "signame": {
      "type": "string",
      "title": "The Signame Schema",
      "description": "HEMTT will use the specified signature name as part of the full signature (.bisign) name. Supports templating.",
      "default": "",
      "examples": [
        "my_custom_name"
      ],
      "pattern": "^(.*)$"
    },
    "sigversion": {
      "type": "integer",
      "title": "The Sigversion Schema",
      "description": "HEMTT will use the specified signature version. Currently Supported: V2, V3 (Experimental).",
      "default": 2,
      "examples": [
        3
      ]
    },
    "reuse_private_key": {
      "type": "boolean",
      "title": "The Reuse_private_key Schema",
      "description": "If set to true, HEMTT will use (and re-use) releases/keys/{keyname}.biprivatekey. It will be generated if it doesn't exist. The default behaviour is to generate a new private key each time and discard it immediately. HEMTT strongly recommends that you only re-use the key if you are making a client-side mod where it will not matter if clients are running different versions of the mod.",
      "default": false,
      "examples": [
        false
      ]
    },
    "postbuild": {
      "type": "array",
      "title": "The Postbuild Schema",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          ""
        ],
        "pattern": "^(.*)$"
      }
    },
    "prebuild": {
      "type": "array",
      "title": "The Prebuild Schema",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          ""
        ],
        "pattern": "^(.*)$"
      }
    },
    "releasebuild": {
      "type": "array",
      "title": "The Releasebuild Schema",
      "items": {
        "type": "string",
        "title": "The Items Schema",
        "default": "",
        "examples": [
          ""
        ],
        "pattern": "^(.*)$"
      }
    },
    "scripts": {
      "type": "object",
      "title": "The Scripts Schema",
      "additionalProperties": {
        "type": "object",
        "title": "The  Schema",
        "properties": {
          "steps": {
            "type": "array",
            "title": "The Steps Schema",
            "items": {
              "type": "string",
              "title": "The Items Schema",
              "default": "",
              "examples": [
                "echo {{addon}} took {{time}} ms to build."
              ],
              "pattern": "^(.*)$"
            }
          },
          "steps_linux": {
            "type": "array",
            "title": "The Steps_linux Schema",
            "description": "steps_windows and steps_linux can be used to run different steps on the respective platforms.",
            "items": {
              "type": "string",
              "title": "The Items Schema",
              "default": "",
              "examples": [
                ""
              ],
              "pattern": "^(.*)$"
            }
          },
          "steps_windows": {
            "type": "array",
            "title": "The Steps_windows Schema",
            "description": "steps_windows and steps_linux can be used to run different steps on the respective platforms.",
            "items": {
              "type": "string",
              "title": "The Items Schema",
              "default": "",
              "examples": [
                ""
              ],
              "pattern": "^(.*)$"
            }
          },
          "show_output": {
            "type": "boolean",
            "title": "The Show_output Schema",
            "description": "All output is hidden by default. Setting show_output will display the command being executed and its output.",
            "default": false,
            "examples": [
              true
            ]
          },
          "foreach": {
            "type": "boolean",
            "title": "The Foreach Schema",
            "default": false,
            "description": "Scripts can be ran for each addons. Inside prebuild the script will be ran for each addon that HEMTT will build, including addons that will be skipped if they are already built. Inside postbuild and releasebuild only addons that were successfully built with be used, excluding addons that were skipped for being up to date.",
            "examples": [
              true
            ]
          },
          "parallel": {
            "type": "boolean",
            "title": "The Parallel Schema",
            "description": "Requires foreach to be true. If a script is thread safe parallel can be used to process multiple addons at a time.",
            "default": false,
            "examples": [
              true
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/definitions/parallel-requires-foreach-to-be-true"
          }
        ]
      }
    }
  },
  "required": [
    "name",
    "prefix",
    "author"
  ],
  "title": "The Root Schema",
  "type": "object"
}