// this version makes object generation very slow
"allOf"
 defs
 [
   "allOf" : {  type[obj],
                allOf [ props["a1": ref("S1");false ],
                        props["a2": ref("S2");false ]
                        //,props["a3": ref("S3");false ]
                        //,props["a4": ref("S4");false ]
                        ],
                pro(3,3),
                anyOf [ // this is necessary to avoid that not_S1, not_S2, not_S3 and not_S4
                        // are regarded as unreachable before array preparation
                        ref("S3"),
                        not(allOf[ ref("S1"), ref("S2"), ref("S3"), ref("S4"), ref("T4") ]) ]
                },
   "allOfS" : { allOf[ ref("S1"), ref("S2"), ref("S3"), ref("S4") ] },
   "allOfT" : allOf[ ref("T1"), ref("T2"), ref("T3"), ref("T4") ],
   "S1" : { type[arr], items[true,ref("T1");true], contains(2,4;ref("T1")) },
   "S2" : { not(items[true,not(ref("T2"));true]), contains(2,5;ref("T2")) },
   "S3" : { not(items[not(ref("T3")),not(ref("T3"));true]), contains(3,6;ref("T3")) },
   "S4" : { type[arr], items[ref("T4"),ref("T4");true], contains(4,inf;ref("T4")) },
   "T1" : { type[obj], props["b1": ref("U1");false], pro(2,5) },
   "T2" : { type[obj], props["b2": ref("U1");false], pro(1,3) },
   "T3" : { not(props["b3": not(ref("U1"));false]), pro(0,2) },
   "T4" : { not( props["b4": not(ref("U1"));false]), pro(2,inf) },
   "U1" : { type[arr], items[true;true], contains(2,4;true) }
]
