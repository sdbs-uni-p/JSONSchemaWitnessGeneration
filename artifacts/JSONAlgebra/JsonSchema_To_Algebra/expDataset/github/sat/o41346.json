{
    "gear": {
        "name": "nobrainer",
        "label": "Nobrainer",
        "description": "A framework for developing neural network models for 3D image processing.",
        "author": "Flywheel",
        "maintainer": "Flywheel <support@flywheel.io>",
        "license": "Other",
        "url": "https://github.com/flywheel-apps/nobrainer-gear",
        "source": "https://github.com/neuronets/nobrainer",
        "cite": "",
        "version": "0.1.0",
        "custom": {
            "docker-image": "flywheel/nobrainer:0.1.0",
            "gear-builder": {
                "category": "analysis",
                "image": "flywheel/nobrainer:0.1.0"
            }
        },
        "inputs": {
            "T1W": {
                "base": "file",
                "description": "T1-Weighted Image",
                "optional": false,
                "type": {
                    "enum": [
                        "nifti"
                    ]
                }
            },
            "model": {
                "base": "file",
                "description": "nobrainer HDF5 Model, defaults to internally stored model. The default model is found at https://github.com/neuronets/nobrainer-models.",
                "optional": true
            }
        },
        "config": {
            "largest-label": {
                "default": false,
                "description": "Zero out all values not connected to the largest contiguous label (not including 0 values). This remove false positives in binary prediction.",
                "type": "boolean"
            },
            "threshold": {
                "default": 0.3,
                "description": "Threshold used to binarize model output. Only used in binary prediction and must be in (0, 1).",
                "minimum": 0,
                "maximum": 1,
                "type": "number"
            },
            "rotate-and-predict": {
                "type": "boolean",
                "default": false,
                "description": "Average the prediction with a prediction on a rotated (and subsequently un-rotated) volume. This can produce a better overall prediction with the expense of more time."
            }
        },
        "command": "/flywheel/v0/run.py"
    },
    "exchange": {
        "git-commit": "0c20428e48462026a0ca31704c47b6aec9f8554c",
        "rootfs-hash": "sha384:e1998226a5b4023f4124fff3272016f0be23f5c1f007264cdbb9a6fd5098d8953b1faaee7273d76666227a870f34c64a",
        "rootfs-url": "https://storage.googleapis.com/flywheel-exchange/flywheel-nobrainer-gear-sha384-e1998226a5b4023f4124fff3272016f0be23f5c1f007264cdbb9a6fd5098d8953b1faaee7273d76666227a870f34c64a.tgz"
    },
    "invocation-schema": {
        "title": "Invocation manifest for Nobrainer",
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
            "config": {
                "type": "object",
                "properties": {
                    "largest-label": {
                        "default": false,
                        "type": "boolean"
                    },
                    "threshold": {
                        "default": 0.3,
                        "minimum": 0,
                        "maximum": 1,
                        "type": "number"
                    },
                    "rotate-and-predict": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "required": [
                    "largest-label",
                    "threshold",
                    "rotate-and-predict"
                ]
            },
            "inputs": {
                "type": "object",
                "properties": {
                    "T1W": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "nifti"
                                ]
                            }
                        }
                    },
                    "model": {
                        "type": "object",
                        "properties": {}
                    }
                },
                "required": [
                    "T1W"
                ]
            }
        },
        "required": [
            "config",
            "inputs"
        ]
    }
}