[
    {
        "id": 1,
        "schema1": {
            "allOf": [
                {
                    "properties": {
                        "foo": {
                            "$ref": "#/allOf/0"
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "not": {
                        "properties": {
                            "foo": {
                                "$ref": "#/allOf/1/not"
                            }
                        },
                        "additionalProperties": false
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 2,
        "schema1": {
            "allOf": [
                {
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "$ref": "#/allOf/0/properties/foo"
                        }
                    }
                },
                {
                    "not": {
                        "properties": {
                            "foo": {
                                "type": "integer"
                            },
                            "bar": {
                                "$ref": "#/allOf/1/not/properties/foo"
                            }
                        }
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 3,
        "schema1": {
            "allOf": [
                {
                    "items": [
                        {
                            "type": "integer"
                        },
                        {
                            "$ref": "#/allOf/0/items/0"
                        }
                    ]
                },
                {
                    "not": {
                        "items": [
                            {
                                "type": "integer"
                            },
                            {
                                "$ref": "#/allOf/1/not/items/0"
                            }
                        ]
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 4,
        "schema1": {
            "allOf": [
                {
                    "definitions": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "$ref": "#/allOf/0/definitions/tilde~0field"
                        },
                        "slash": {
                            "$ref": "#/allOf/0/definitions/slash~1field"
                        },
                        "percent": {
                            "$ref": "#/allOf/0/definitions/percent%25field"
                        }
                    }
                },
                {
                    "definitions": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "not": {
                        "properties": {
                            "tilde": {
                                "$ref": "#/allOf/1/definitions/tilde~0field"
                            },
                            "slash": {
                                "$ref": "#/allOf/1/definitions/slash~1field"
                            },
                            "percent": {
                                "$ref": "#/allOf/1/definitions/percent%25field"
                            }
                        }
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 5,
        "schema1": {
            "allOf": [
                {
                    "definitions": {
                        "a": {
                            "type": "integer"
                        },
                        "b": {
                            "$ref": "#/allOf/0/definitions/a"
                        },
                        "c": {
                            "$ref": "#/allOf/0/definitions/b"
                        }
                    },
                    "$ref": "#/allOf/0/definitions/c"
                },
                {
                    "definitions": {
                        "a": {
                            "type": "integer"
                        },
                        "b": {
                            "$ref": "#/allOf/1/definitions/a"
                        },
                        "c": {
                            "$ref": "#/allOf/1/definitions/b"
                        }
                    },
                    "not": {
                        "$ref": "#/allOf/1/definitions/c"
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 6,
        "schema1": {
            "allOf": [
                {
                    "definitions": {
                        "reffed": {
                            "type": "array"
                        }
                    },
                    "properties": {
                        "foo": {
                            "$ref": "#/allOf/0/definitions/reffed",
                            "maxItems": 2
                        }
                    }
                },
                {
                    "definitions": {
                        "reffed": {
                            "type": "array"
                        }
                    },
                    "not": {
                        "properties": {
                            "foo": {
                                "$ref": "#/allOf/1/definitions/reffed",
                                "maxItems": 2
                            }
                        }
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 7,
        "schema1": {
            "allOf": [
                {
                    "properties": {
                        "$ref": {
                            "$ref": "#/allOf/0/definitions/is-string"
                        }
                    },
                    "definitions": {
                        "is-string": {
                            "type": "string"
                        }
                    }
                },
                {
                    "definitions": {
                        "is-string": {
                            "type": "string"
                        }
                    },
                    "not": {
                        "properties": {
                            "$ref": {
                                "$ref": "#/allOf/1/definitions/is-string"
                            }
                        }
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 8,
        "schema1": {
            "allOf": [
                {
                    "id": "http://localhost:1234/sibling_id/base/",
                    "definitions": {
                        "foo": {
                            "id": "http://localhost:1234/sibling_id/foo.json",
                            "minimum": 2
                        },
                        "base_foo": {
                            "$comment": "this canonical uri is http://localhost:1234/sibling_id/base/foo.json",
                            "id": "foo.json",
                            "minimum": 5
                        }
                    },
                    "allOf": [
                        {
                            "$comment": "$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json",
                            "id": "http://localhost:1234/sibling_id/",
                            "$ref": "foo.json"
                        }
                    ]
                },
                {
                    "id": "http://localhost:1234/sibling_id/base/",
                    "definitions": {
                        "foo": {
                            "id": "http://localhost:1234/sibling_id/foo.json",
                            "minimum": 2
                        },
                        "base_foo": {
                            "$comment": "this canonical uri is http://localhost:1234/sibling_id/base/foo.json",
                            "id": "foo.json",
                            "minimum": 5
                        }
                    },
                    "not": {
                        "allOf": [
                            {
                                "$comment": "$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json",
                                "id": "http://localhost:1234/sibling_id/",
                                "$ref": "foo.json1"
                            }
                        ]
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 9,
        "schema1": {
            "allOf": [
                {
                    "$ref": "http://json-schema.org/draft-03/schema#"
                },
                {
                    "not": {
                        "$ref": "http://json-schema.org/draft-03/schema#"
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    },
    {
        "id": 10,
        "schema1": {
            "allOf": [
                {
                    "definitions": {
                        "a_string": {
                            "type": "string"
                        }
                    },
                    "enum": [
                        {
                            "$ref": "#/allOf/0/definitions/a_string"
                        }
                    ]
                },
                {
                    "definitions": {
                        "a_string": {
                            "type": "string"
                        }
                    },
                    "not": {
                        "enum": [
                            {
                                "$ref": "#/allOf/1/definitions/a_string"
                            }
                        ]
                    }
                }
            ]
        },
        "schema2": {
            "not": {}
        },
        "tests": {
            "s1SubsetEqOfs2": true,
            "s2SubsetEqOfs1": true
        }
    }
]