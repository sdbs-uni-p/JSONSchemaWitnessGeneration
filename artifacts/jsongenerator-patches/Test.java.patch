--- jsongenerator/src/test/java/net/jimblackler/jsongenerator/Test.java	2022-02-28 10:12:08.237327178 +0100
+++ jsongenerator-mod/src/test/java/net/jimblackler/jsongenerator/Test.java	2022-02-27 23:33:25.639505410 +0100
@@ -1,13 +1,21 @@
 package net.jimblackler.jsongenerator;
 
 import java.io.BufferedWriter;
+import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.net.URI;
 import java.net.URISyntaxException;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
+import java.util.LinkedHashMap;
 import java.util.Random;
+import java.util.Set;
+
+import com.networknt.schema.SpecVersion;
+import com.networknt.schema.ValidationMessage;
+import massiveTesting.Utils;
 import net.jimblackler.jsonschemafriend.Schema;
 import net.jimblackler.jsonschemafriend.SchemaException;
 import net.jimblackler.jsonschemafriend.SchemaStore;
@@ -19,15 +27,38 @@
   public static final FileSystem FILE_SYSTEM = FileSystems.getDefault();
 
   public static void main(String[] args) throws URISyntaxException, SchemaException, IOException {
+
+    String userPath = System.getProperty("user.dir");
     Path outDir = FILE_SYSTEM.getPath("out");
     if (!outDir.toFile().exists()) {
       outDir.toFile().mkdir();
     }
-    Path base = FILE_SYSTEM.getPath("/examples");
-    Path file = base.resolve("warnings.schema.json");
-    Path out = outDir.resolve("example.json");
+    Path base = FILE_SYSTEM.getPath("/data");
+    String fileName = "o67623";
+    Path file = base.resolve("/"+fileName+".json");
+    Path out = outDir.resolve("out_"+fileName+".json");
     SchemaStore schemaStore = new SchemaStore();
-    Schema schema = schemaStore.loadSchema(Test.class.getResource(file.toString()).toURI());
+
+
+//    System.out.println(userPath+base+file);
+    URI uri = URI.create(userPath+base+file);
+//    System.out.println(uri);
+
+    File f = new File(uri.getPath());
+    Schema schema = schemaStore.loadSchema(f);
+    System.out.println("********************");
+    System.out.println(schema.toString());
+    System.out.println("********************");
+
+    String s = schema.toString();
+    int i = s.indexOf("{");
+    String schemaAsString = null;
+    if(i!=-1)
+      schemaAsString = s.substring(i);
+
+    System.out.println(schemaAsString);
+    System.out.println("********************");
+
 
     Object object = new Generator(new Configuration() {
       @Override
@@ -42,18 +73,25 @@
 
       @Override
       public boolean isGenerateMinimal() {
-        return true;
+        return false;
       }
 
       @Override
       public float nonRequiredPropertyChance() {
         return 0.5f;
       }
-    }, schemaStore, new Random(1)).generate(schema, 16);
+    }, schemaStore, new Random(1)).generate(schema, 1);
 
-    new Validator().validate(schema, object);
-    try (BufferedWriter writer = new BufferedWriter(new FileWriter(out.toFile()))) {
-      writer.write(JsonUtils.toString(object));
-    }
+    System.out.println(object.toString());
+//    new Validator().validate(schema, object);
+//    try (BufferedWriter writer = new BufferedWriter(new FileWriter(out.toFile()))) {
+//      writer.write(JsonUtils.toString(object));
+//    }
+
+    Set<ValidationMessage> errors = Utils.validateStringWitness(
+            schemaAsString,object.toString(), SpecVersion.VersionFlag.V201909,"67623",
+            new LinkedHashMap<>());
+
+    System.out.println(errors.size());
   }
 }
