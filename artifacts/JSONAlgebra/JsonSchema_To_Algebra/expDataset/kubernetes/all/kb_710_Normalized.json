{
    "definitions": {
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_AWSElasticBlockStoreVolumeSource": {
            "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string"
                },
                "partition": {
                    "_format": "int32",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string"
                }
            },
            "required": [
                "volumeID"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_AzureDiskVolumeSource": {
            "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
            "properties": {
                "cachingMode": {
                    "description": "Host Caching mode: None, Read Only, Read Write.",
                    "type": "string"
                },
                "diskName": {
                    "description": "The Name of the data disk in the blob storage",
                    "type": "string"
                },
                "diskURI": {
                    "description": "The URI the data disk in the blob storage",
                    "type": "string"
                },
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "kind": {
                    "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                }
            },
            "required": [
                "diskName",
                "diskURI"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_AzureFileVolumeSource": {
            "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
            "properties": {
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "the name of secret that contains Azure Storage Account Name and Key",
                    "type": "string"
                },
                "shareName": {
                    "description": "Share Name",
                    "type": "string"
                }
            },
            "required": [
                "secretName",
                "shareName"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_CSIVolumeSource": {
            "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
            "properties": {
                "driver": {
                    "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                    "type": "string"
                },
                "fsType": {
                    "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                    "type": "string"
                },
                "nodePublishSecretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference",
                    "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed."
                },
                "readOnly": {
                    "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
                    "type": "boolean"
                },
                "volumeAttributes": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                    "type": "object"
                }
            },
            "required": [
                "driver"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_CephFSVolumeSource": {
            "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "monitors": {
                    "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "path": {
                    "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "boolean"
                },
                "secretFile": {
                    "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "string"
                },
                "secretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference",
                    "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
                },
                "user": {
                    "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "string"
                }
            },
            "required": [
                "monitors"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_CinderVolumeSource": {
            "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference",
                    "description": "Optional: points to a secret object containing parameters used to connect to OpenStack."
                },
                "volumeID": {
                    "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                }
            },
            "required": [
                "volumeID"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ConfigMapEnvSource": {
            "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ConfigMapKeySelector": {
            "description": "Selects a key from a ConfigMap.",
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined",
                    "type": "boolean"
                }
            },
            "required": [
                "key"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ConfigMapProjection": {
            "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
            "properties": {
                "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its keys must be defined",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ConfigMapVolumeSource": {
            "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "_format": "int32",
                    "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer"
                },
                "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its keys must be defined",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_DownwardAPIProjection": {
            "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
            "properties": {
                "items": {
                    "description": "Items is a list of DownwardAPIVolume file",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_DownwardAPIVolumeFile"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_DownwardAPIVolumeFile": {
            "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
            "properties": {
                "fieldRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ObjectFieldSelector",
                    "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported."
                },
                "mode": {
                    "_format": "int32",
                    "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer"
                },
                "path": {
                    "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                    "type": "string"
                },
                "resourceFieldRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ResourceFieldSelector",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
                }
            },
            "required": [
                "path"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_DownwardAPIVolumeSource": {
            "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "_format": "int32",
                    "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer"
                },
                "items": {
                    "description": "Items is a list of downward API volume file",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_DownwardAPIVolumeFile"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_EmptyDirVolumeSource": {
            "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
            "properties": {
                "medium": {
                    "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "type": "string"
                },
                "sizeLimit": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_api_resource_Quantity",
                    "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_EnvFromSource": {
            "description": "EnvFromSource represents the source of a set of ConfigMaps",
            "properties": {
                "configMapRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ConfigMapEnvSource",
                    "description": "The ConfigMap to select from"
                },
                "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "secretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_SecretEnvSource",
                    "description": "The Secret to select from"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_EnvVar": {
            "description": "EnvVar represents an environment variable present in a Container.",
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                    "type": "string"
                },
                "valueFrom": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_EnvVarSource",
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty."
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_EnvVarSource": {
            "description": "EnvVarSource represents a source for the value of an EnvVar.",
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ConfigMapKeySelector",
                    "description": "Selects a key of a ConfigMap."
                },
                "fieldRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ObjectFieldSelector",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs."
                },
                "resourceFieldRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ResourceFieldSelector",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
                },
                "secretKeyRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_SecretKeySelector",
                    "description": "Selects a key of a secret in the pod's namespace"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_FCVolumeSource": {
            "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "lun": {
                    "_format": "int32",
                    "description": "Optional: FC target lun number",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "targetWWNs": {
                    "description": "Optional: FC target worldwide names (WWNs)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "wwids": {
                    "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_FlexVolumeSource": {
            "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
            "properties": {
                "driver": {
                    "description": "Driver is the name of the driver to use for this volume.",
                    "type": "string"
                },
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                    "type": "string"
                },
                "options": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Optional: Extra command options if any.",
                    "type": "object"
                },
                "readOnly": {
                    "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference",
                    "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
                }
            },
            "required": [
                "driver"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_FlockerVolumeSource": {
            "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "datasetName": {
                    "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
                    "type": "string"
                },
                "datasetUUID": {
                    "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_GCEPersistentDiskVolumeSource": {
            "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string"
                },
                "partition": {
                    "_format": "int32",
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "integer"
                },
                "pdName": {
                    "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "boolean"
                }
            },
            "required": [
                "pdName"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_GitRepoVolumeSource": {
            "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
            "properties": {
                "directory": {
                    "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                    "type": "string"
                },
                "repository": {
                    "description": "Repository URL",
                    "type": "string"
                },
                "revision": {
                    "description": "Commit hash for the specified revision.",
                    "type": "string"
                }
            },
            "required": [
                "repository"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_GlusterfsVolumeSource": {
            "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "endpoints": {
                    "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "path": {
                    "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "boolean"
                }
            },
            "required": [
                "endpoints",
                "path"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_HostPathVolumeSource": {
            "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "path": {
                    "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "type": "string"
                },
                "type": {
                    "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "type": "string"
                }
            },
            "required": [
                "path"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ISCSIVolumeSource": {
            "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
            "properties": {
                "chapAuthDiscovery": {
                    "description": "whether support iSCSI Discovery CHAP authentication",
                    "type": "boolean"
                },
                "chapAuthSession": {
                    "description": "whether support iSCSI Session CHAP authentication",
                    "type": "boolean"
                },
                "fsType": {
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
                    "type": "string"
                },
                "initiatorName": {
                    "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
                    "type": "string"
                },
                "iqn": {
                    "description": "Target iSCSI Qualified Name.",
                    "type": "string"
                },
                "iscsiInterface": {
                    "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                    "type": "string"
                },
                "lun": {
                    "_format": "int32",
                    "description": "iSCSI Target Lun number.",
                    "type": "integer"
                },
                "portals": {
                    "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference",
                    "description": "CHAP Secret for iSCSI target and initiator authentication"
                },
                "targetPortal": {
                    "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                    "type": "string"
                }
            },
            "required": [
                "targetPortal",
                "iqn",
                "lun"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath": {
            "description": "Maps a string key to a path within a volume.",
            "properties": {
                "key": {
                    "description": "The key to project.",
                    "type": "string"
                },
                "mode": {
                    "_format": "int32",
                    "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer"
                },
                "path": {
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                    "type": "string"
                }
            },
            "required": [
                "key",
                "path"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference": {
            "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_NFSVolumeSource": {
            "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "path": {
                    "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "boolean"
                },
                "server": {
                    "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                }
            },
            "required": [
                "server",
                "path"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ObjectFieldSelector": {
            "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                }
            },
            "required": [
                "fieldPath"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_PersistentVolumeClaimVolumeSource": {
            "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
            "properties": {
                "claimName": {
                    "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                    "type": "boolean"
                }
            },
            "required": [
                "claimName"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_PhotonPersistentDiskVolumeSource": {
            "description": "Represents a Photon Controller persistent disk resource.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "pdID": {
                    "description": "ID that identifies Photon Controller persistent disk",
                    "type": "string"
                }
            },
            "required": [
                "pdID"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_PortworxVolumeSource": {
            "description": "PortworxVolumeSource represents a Portworx volume resource.",
            "properties": {
                "fsType": {
                    "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "VolumeID uniquely identifies a Portworx volume",
                    "type": "string"
                }
            },
            "required": [
                "volumeID"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ProjectedVolumeSource": {
            "description": "Represents a projected volume source",
            "properties": {
                "defaultMode": {
                    "_format": "int32",
                    "description": "Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer"
                },
                "sources": {
                    "description": "list of volume projections",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_VolumeProjection"
                    },
                    "type": "array"
                }
            },
            "required": [
                "sources"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_QuobyteVolumeSource": {
            "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "group": {
                    "description": "Group to map volume access to Default is no group",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                    "type": "boolean"
                },
                "registry": {
                    "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
                    "type": "string"
                },
                "user": {
                    "description": "User to map volume access to Defaults to serivceaccount user",
                    "type": "string"
                },
                "volume": {
                    "description": "Volume is a string that references an already created Quobyte volume by name.",
                    "type": "string"
                }
            },
            "required": [
                "registry",
                "volume"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_RBDVolumeSource": {
            "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
                    "type": "string"
                },
                "image": {
                    "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "keyring": {
                    "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "monitors": {
                    "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "pool": {
                    "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference",
                    "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                },
                "user": {
                    "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                }
            },
            "required": [
                "monitors",
                "image"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ResourceFieldSelector": {
            "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars",
                    "type": "string"
                },
                "divisor": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_api_resource_Quantity",
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\""
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                }
            },
            "required": [
                "resource"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ScaleIOVolumeSource": {
            "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
                    "type": "string"
                },
                "gateway": {
                    "description": "The host address of the ScaleIO API Gateway.",
                    "type": "string"
                },
                "protectionDomain": {
                    "description": "The name of the ScaleIO Protection Domain for the configured storage.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference",
                    "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
                },
                "sslEnabled": {
                    "description": "Flag to enable/disable SSL communication with Gateway, default false",
                    "type": "boolean"
                },
                "storageMode": {
                    "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                    "type": "string"
                },
                "storagePool": {
                    "description": "The ScaleIO Storage Pool associated with the protection domain.",
                    "type": "string"
                },
                "system": {
                    "description": "The name of the storage system as configured in ScaleIO.",
                    "type": "string"
                },
                "volumeName": {
                    "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
                    "type": "string"
                }
            },
            "required": [
                "gateway",
                "system",
                "secretRef"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_SecretEnvSource": {
            "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_SecretKeySelector": {
            "description": "SecretKeySelector selects a key of a Secret.",
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": "boolean"
                }
            },
            "required": [
                "key"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_SecretProjection": {
            "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
            "properties": {
                "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_SecretVolumeSource": {
            "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "_format": "int32",
                    "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "type": "integer"
                },
                "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath"
                    },
                    "type": "array"
                },
                "optional": {
                    "description": "Specify whether the Secret or its keys must be defined",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ServiceAccountTokenProjection": {
            "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
            "properties": {
                "audience": {
                    "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                    "type": "string"
                },
                "expirationSeconds": {
                    "_format": "int64",
                    "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                    "type": "integer"
                },
                "path": {
                    "description": "Path is the path relative to the mount point of the file to project the token into.",
                    "type": "string"
                }
            },
            "required": [
                "path"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_StorageOSVolumeSource": {
            "description": "Represents a StorageOS persistent volume resource.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_LocalObjectReference",
                    "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
                },
                "volumeName": {
                    "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                    "type": "string"
                },
                "volumeNamespace": {
                    "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_Volume": {
            "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
            "properties": {
                "awsElasticBlockStore": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_AWSElasticBlockStoreVolumeSource",
                    "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
                },
                "azureDisk": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_AzureDiskVolumeSource",
                    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
                },
                "azureFile": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_AzureFileVolumeSource",
                    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod."
                },
                "cephfs": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_CephFSVolumeSource",
                    "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
                },
                "cinder": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_CinderVolumeSource",
                    "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
                },
                "configMap": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ConfigMapVolumeSource",
                    "description": "ConfigMap represents a configMap that should populate this volume"
                },
                "csi": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_CSIVolumeSource",
                    "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature)."
                },
                "downwardAPI": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_DownwardAPIVolumeSource",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume"
                },
                "emptyDir": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_EmptyDirVolumeSource",
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
                },
                "fc": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_FCVolumeSource",
                    "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
                },
                "flexVolume": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_FlexVolumeSource",
                    "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
                },
                "flocker": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_FlockerVolumeSource",
                    "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
                },
                "gcePersistentDisk": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_GCEPersistentDiskVolumeSource",
                    "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
                },
                "gitRepo": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_GitRepoVolumeSource",
                    "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
                },
                "glusterfs": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_GlusterfsVolumeSource",
                    "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
                },
                "hostPath": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_HostPathVolumeSource",
                    "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
                },
                "iscsi": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ISCSIVolumeSource",
                    "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
                },
                "name": {
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "nfs": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_NFSVolumeSource",
                    "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                },
                "persistentVolumeClaim": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_PersistentVolumeClaimVolumeSource",
                    "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
                },
                "photonPersistentDisk": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_PhotonPersistentDiskVolumeSource",
                    "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
                },
                "portworxVolume": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_PortworxVolumeSource",
                    "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine"
                },
                "projected": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ProjectedVolumeSource",
                    "description": "Items for all in one resources secrets, configmaps, and downward API"
                },
                "quobyte": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_QuobyteVolumeSource",
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
                },
                "rbd": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_RBDVolumeSource",
                    "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
                },
                "scaleIO": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ScaleIOVolumeSource",
                    "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
                },
                "secret": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_SecretVolumeSource",
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
                },
                "storageos": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_StorageOSVolumeSource",
                    "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
                },
                "vsphereVolume": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_VsphereVirtualDiskVolumeSource",
                    "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_VolumeMount": {
            "description": "VolumeMount describes a mounting of a Volume within a container.",
            "properties": {
                "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                    "type": "string"
                },
                "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                    "type": "string"
                },
                "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                    "type": "boolean"
                },
                "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                    "type": "string"
                },
                "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "mountPath"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_VolumeProjection": {
            "description": "Projection that may be projected along with other supported volume types",
            "properties": {
                "configMap": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ConfigMapProjection",
                    "description": "information about the configMap data to project"
                },
                "downwardAPI": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_DownwardAPIProjection",
                    "description": "information about the downwardAPI data to project"
                },
                "secret": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_SecretProjection",
                    "description": "information about the secret data to project"
                },
                "serviceAccountToken": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ServiceAccountTokenProjection",
                    "description": "information about the serviceAccountToken data to project"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_VsphereVirtualDiskVolumeSource": {
            "description": "Represents a vSphere volume resource.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "storagePolicyID": {
                    "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                    "type": "string"
                },
                "storagePolicyName": {
                    "description": "Storage Policy Based Management (SPBM) profile name.",
                    "type": "string"
                },
                "volumePath": {
                    "description": "Path that identifies vSphere volume vmdk",
                    "type": "string"
                }
            },
            "required": [
                "volumePath"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_settings_v1alpha1_PodPresetSpec": {
            "description": "PodPresetSpec is a description of a pod preset.",
            "properties": {
                "env": {
                    "description": "Env defines the collection of EnvVar to inject into containers.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_EnvVar"
                    },
                    "type": "array"
                },
                "envFrom": {
                    "description": "EnvFrom defines the collection of EnvFromSource to inject into containers.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_EnvFromSource"
                    },
                    "type": "array"
                },
                "selector": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelector",
                    "description": "Selector is a label query over a set of resources, in this case pods. Required."
                },
                "volumeMounts": {
                    "description": "VolumeMounts defines the collection of VolumeMount to inject into containers.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_VolumeMount"
                    },
                    "type": "array"
                },
                "volumes": {
                    "description": "Volumes defines the collection of Volume to inject into the pod.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_Volume"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_api_resource_Quantity": {
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ]
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_FieldsV1": {
            "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelector": {
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelectorRequirement"
                    },
                    "type": "array"
                },
                "matchLabels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelectorRequirement": {
            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string",
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "key",
                "operator"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_ManagedFieldsEntry": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_FieldsV1",
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                    "type": "string"
                },
                "time": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_Time",
                    "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_ObjectMeta": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "properties": {
                "annotations": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                    "type": "object"
                },
                "clusterName": {
                    "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                    "type": "string"
                },
                "creationTimestamp": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_Time",
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "deletionGracePeriodSeconds": {
                    "_format": "int64",
                    "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_Time",
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                    "type": "string"
                },
                "generation": {
                    "_format": "int64",
                    "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                    "type": "integer"
                },
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                    "type": "object"
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_ManagedFieldsEntry"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                    "items": {
                        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_OwnerReference"
                    },
                    "type": "array",
                    "x-kubernetes-patch-merge-key": "uid",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                },
                "selfLink": {
                    "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_OwnerReference": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                    "type": "string"
                }
            },
            "required": [
                "apiVersion",
                "kind",
                "name",
                "uid"
            ],
            "type": "object"
        },
        "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_Time": {
            "_format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "type": "string"
        }
    },
    "description": "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
    "properties": {
        "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": [
                "string",
                "null"
            ]
        },
        "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "enum": [
                "PodPreset"
            ],
            "type": [
                "string",
                "null"
            ]
        },
        "metadata": {
            "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_ObjectMeta"
        },
        "spec": {
            "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_settings_v1alpha1_PodPresetSpec"
        }
    },
    "type": "object",
    "x-kubernetes-group-version-kind": [
        {
            "group": "settings.k8s.io",
            "kind": "PodPreset",
            "version": "v1alpha1"
        }
    ]
}