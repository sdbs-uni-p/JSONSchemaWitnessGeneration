{
    "additionalProperties": false,
    "definitions": {
        "assetPattern": {
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "glob": {
                            "description": "The pattern to match.",
                            "type": "string"
                        },
                        "ignore": {
                            "description": "An array of globs to ignore.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "input": {
                            "description": "The input directory path in which to apply 'glob'. Defaults to the project root.",
                            "type": "string"
                        },
                        "output": {
                            "description": "Absolute path within the output.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "glob",
                        "input",
                        "output"
                    ],
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ]
        },
        "budget": {
            "additionalProperties": false,
            "properties": {
                "baseline": {
                    "description": "The baseline size for comparison.",
                    "type": "string"
                },
                "error": {
                    "description": "The threshold for error relative to the baseline (min & max).",
                    "type": "string"
                },
                "maximumError": {
                    "description": "The maximum threshold for error relative to the baseline.",
                    "type": "string"
                },
                "maximumWarning": {
                    "description": "The maximum threshold for warning relative to the baseline.",
                    "type": "string"
                },
                "minimumError": {
                    "description": "The minimum threshold for error relative to the baseline.",
                    "type": "string"
                },
                "minimumWarning": {
                    "description": "The minimum threshold for warning relative to the baseline.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the bundle.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of budget.",
                    "enum": [
                        "all",
                        "allScript",
                        "any",
                        "anyScript",
                        "anyComponentStyle",
                        "bundle",
                        "initial"
                    ],
                    "type": "string"
                },
                "warning": {
                    "description": "The threshold for warning relative to the baseline (min & max).",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "extraEntryPoint": {
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "bundleName": {
                            "description": "The bundle name for this extra entry point.",
                            "type": "string"
                        },
                        "inject": {
                            "default": true,
                            "description": "If the bundle will be referenced in the HTML file.",
                            "type": "boolean"
                        },
                        "input": {
                            "description": "The file to include.",
                            "type": "string"
                        },
                        "lazy": {
                            "default": false,
                            "description": "If the bundle will be lazy loaded.",
                            "type": "boolean",
                            "x-deprecated": "Use 'inject' option with 'false' value instead."
                        }
                    },
                    "required": [
                        "input"
                    ],
                    "type": "object"
                },
                {
                    "description": "The file to include.",
                    "type": "string"
                }
            ]
        },
        "fileReplacement": {
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "replaceWith": {
                            "type": "string"
                        },
                        "src": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "src",
                        "replaceWith"
                    ],
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "replace": {
                            "type": "string"
                        },
                        "with": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "replace",
                        "with"
                    ],
                    "type": "object"
                }
            ]
        }
    },
    "description": "Browser target options",
    "properties": {
        "allowedCommonJsDependencies": {
            "default": [],
            "description": "A list of CommonJS packages that are allowed to be used without a built time warning.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "aot": {
            "default": false,
            "description": "Build using Ahead of Time compilation.",
            "type": "boolean",
            "x-user-analytics": 13
        },
        "assets": {
            "default": [],
            "description": "List of static application assets.",
            "items": {
                "$ref": "#/definitions/assetPattern"
            },
            "type": "array"
        },
        "baseHref": {
            "description": "Base url for the application being built.",
            "type": "string"
        },
        "budgets": {
            "default": [],
            "description": "Budget thresholds to ensure parts of your application stay within boundaries which you set.",
            "items": {
                "$ref": "#/definitions/budget"
            },
            "type": "array"
        },
        "buildOptimizer": {
            "default": false,
            "description": "Enables '@angular-devkit/build-optimizer' optimizations when using the 'aot' option.",
            "type": "boolean"
        },
        "commonChunk": {
            "default": true,
            "description": "Use a separate bundle containing code used across multiple bundles.",
            "type": "boolean"
        },
        "crossOrigin": {
            "default": "none",
            "description": "Define the crossorigin attribute setting of elements that provide CORS support.",
            "enum": [
                "none",
                "anonymous",
                "use-credentials"
            ],
            "type": "string"
        },
        "deleteOutputPath": {
            "default": true,
            "description": "Delete the output path before building.",
            "type": "boolean"
        },
        "deployUrl": {
            "description": "URL where files will be deployed.",
            "type": "string"
        },
        "es5BrowserSupport": {
            "description": "Enables conditionally loaded ES2015 polyfills.",
            "type": "boolean",
            "x-deprecated": "This will be determined from the list of supported browsers specified in the 'browserslist' file."
        },
        "evalSourceMap": {
            "default": false,
            "description": "Output in-file eval sourcemaps.",
            "type": "boolean",
            "x-deprecated": true
        },
        "experimentalRollupPass": {
            "default": false,
            "description": "Concatenate modules with Rollup before bundling them with Webpack.",
            "type": "boolean"
        },
        "extractCss": {
            "default": false,
            "description": "Extract css from global styles into css files instead of js ones.",
            "type": "boolean"
        },
        "extractLicenses": {
            "default": false,
            "description": "Extract all licenses in a separate file.",
            "type": "boolean"
        },
        "fileReplacements": {
            "default": [],
            "description": "Replace files with other files in the build.",
            "items": {
                "$ref": "#/definitions/fileReplacement"
            },
            "type": "array"
        },
        "forkTypeChecker": {
            "default": true,
            "description": "Run the TypeScript type checker in a forked process.",
            "type": "boolean"
        },
        "i18nFile": {
            "description": "Localization file to use for i18n.",
            "type": "string",
            "x-deprecated": "Use 'locales' object in the project metadata instead."
        },
        "i18nFormat": {
            "description": "Format of the localization file specified with --i18n-file.",
            "type": "string",
            "x-deprecated": "No longer needed as the format will be determined automatically."
        },
        "i18nLocale": {
            "description": "Locale to use for i18n.",
            "type": "string",
            "x-deprecated": "Use 'localize' instead."
        },
        "i18nMissingTranslation": {
            "default": "warning",
            "description": "How to handle missing translations for i18n.",
            "enum": [
                "warning",
                "error",
                "ignore"
            ],
            "type": "string"
        },
        "index": {
            "description": "Configures the generation of the application's HTML index.",
            "oneOf": [
                {
                    "description": "The path of a file to use for the application's HTML index. The filename of the specified path will be used for the generated file and will be created in the root of the application's configured output path.",
                    "type": "string"
                },
                {
                    "description": "",
                    "properties": {
                        "input": {
                            "description": "The path of a file to use for the application's generated HTML index.",
                            "minLength": 1,
                            "type": "string"
                        },
                        "output": {
                            "default": "index.html",
                            "description": "The output path of the application's generated HTML index file. The full provided path will be used and will be considered relative to the application's configured output path.",
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "required": [
                        "input"
                    ],
                    "type": "object"
                }
            ]
        },
        "lazyModules": {
            "default": [],
            "description": "List of additional NgModule files that will be lazy loaded. Lazy router modules will be discovered automatically.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "x-deprecated": "'SystemJsNgModuleLoader' is deprecated, and this is part of its usage. Use 'import()' syntax instead."
        },
        "localize": {
            "oneOf": [
                {
                    "description": "Translate all locales.",
                    "type": "boolean"
                },
                {
                    "description": "List of locales ID's to translate.",
                    "items": {
                        "pattern": "^[a-zA-Z]{2,3}(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-[a-zA-Z]{5,8})?(-x(-[a-zA-Z0-9]{1,8})+)?$",
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            ]
        },
        "main": {
            "$valueDescription": "fileName",
            "description": "The full path for the main entry point to the app, relative to the current workspace.",
            "type": "string"
        },
        "namedChunks": {
            "default": true,
            "description": "Use file name for lazy loaded chunks.",
            "type": "boolean"
        },
        "ngswConfigPath": {
            "description": "Path to ngsw-config.json.",
            "type": "string"
        },
        "optimization": {
            "description": "Enables optimization of the build output.",
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "scripts": {
                            "default": true,
                            "description": "Enables optimization of the scripts output.",
                            "type": "boolean"
                        },
                        "styles": {
                            "default": true,
                            "description": "Enables optimization of the styles output.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "boolean"
                }
            ],
            "x-user-analytics": 16
        },
        "outputHashing": {
            "default": "none",
            "description": "Define the output filename cache-busting hashing mode.",
            "enum": [
                "none",
                "all",
                "media",
                "bundles"
            ],
            "type": "string"
        },
        "outputPath": {
            "description": "The full path for the new output directory, relative to the current workspace.\n\nBy default, writes output to a folder named dist/ in the current project.",
            "type": "string"
        },
        "poll": {
            "description": "Enable and define the file watching poll time period in milliseconds.",
            "type": "number"
        },
        "polyfills": {
            "description": "The full path for the polyfills file, relative to the current workspace.",
            "type": "string"
        },
        "preserveSymlinks": {
            "description": "Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.",
            "type": "boolean"
        },
        "profile": {
            "default": false,
            "description": "Output profile events for Chrome profiler.",
            "type": "boolean",
            "x-deprecated": "Use \"NG_BUILD_PROFILING\" environment variable instead."
        },
        "progress": {
            "description": "Log progress to the console while building.",
            "type": "boolean"
        },
        "rebaseRootRelativeCssUrls": {
            "default": false,
            "description": "Change root relative URLs in stylesheets to include base HREF and deploy URL. Use only for compatibility and transition. The behavior of this option is non-standard and will be removed in the next major release.",
            "type": "boolean",
            "x-deprecated": true
        },
        "resourcesOutputPath": {
            "default": "",
            "description": "The path where style resources will be placed, relative to outputPath.",
            "type": "string"
        },
        "scripts": {
            "default": [],
            "description": "Global scripts to be included in the build.",
            "items": {
                "$ref": "#/definitions/extraEntryPoint"
            },
            "type": "array"
        },
        "serviceWorker": {
            "default": false,
            "description": "Generates a service worker config for production builds.",
            "type": "boolean"
        },
        "showCircularDependencies": {
            "default": true,
            "description": "Show circular dependency warnings on builds.",
            "type": "boolean"
        },
        "skipAppShell": {
            "default": false,
            "description": "Flag to prevent building an app shell.",
            "type": "boolean",
            "x-deprecated": true
        },
        "sourceMap": {
            "default": true,
            "description": "Output sourcemaps.",
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "hidden": {
                            "default": false,
                            "description": "Output sourcemaps used for error reporting tools.",
                            "type": "boolean"
                        },
                        "scripts": {
                            "default": true,
                            "description": "Output sourcemaps for all scripts.",
                            "type": "boolean"
                        },
                        "styles": {
                            "default": true,
                            "description": "Output sourcemaps for all styles.",
                            "type": "boolean"
                        },
                        "vendor": {
                            "default": false,
                            "description": "Resolve vendor packages sourcemaps.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "boolean"
                }
            ]
        },
        "statsJson": {
            "default": false,
            "description": "Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.",
            "type": "boolean"
        },
        "stylePreprocessorOptions": {
            "additionalProperties": false,
            "description": "Options to pass to style preprocessors.",
            "properties": {
                "includePaths": {
                    "default": [],
                    "description": "Paths to include. Paths will be resolved to project root.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "styles": {
            "default": [],
            "description": "Global styles to be included in the build.",
            "items": {
                "$ref": "#/definitions/extraEntryPoint"
            },
            "type": "array"
        },
        "subresourceIntegrity": {
            "default": false,
            "description": "Enables the use of subresource integrity validation.",
            "type": "boolean"
        },
        "tsConfig": {
            "description": "The full path for the TypeScript configuration file, relative to the current workspace.",
            "type": "string"
        },
        "vendorChunk": {
            "default": true,
            "description": "Use a separate bundle containing only vendor libraries.",
            "type": "boolean"
        },
        "vendorSourceMap": {
            "default": false,
            "description": "Resolve vendor packages sourcemaps.",
            "type": "boolean",
            "x-deprecated": true
        },
        "verbose": {
            "default": false,
            "description": "Adds more details to output logging.",
            "type": "boolean"
        },
        "watch": {
            "default": false,
            "description": "Run build when files change.",
            "type": "boolean"
        },
        "webWorkerTsConfig": {
            "description": "TypeScript configuration for Web Worker modules.",
            "type": "string"
        }
    },
    "required": [
        "outputPath",
        "index",
        "main",
        "tsConfig"
    ],
    "title": "Webpack browser schema for Build Facade.",
    "type": "object"
}