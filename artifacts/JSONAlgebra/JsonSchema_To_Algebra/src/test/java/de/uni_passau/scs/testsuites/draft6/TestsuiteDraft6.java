package de.uni_passau.scs.testsuites.draft6;

import de.uni_passau.sds.lib.IJsonSchemaLib;
import de.uni_passau.sds.lib.JsonSchemaLibFactory;
import de.uni_passau.sds.lib.JsonSchemaLibImplementations;
import de.uni_passau.sds.lib.schemaComparism.JsonSchemaComparison;
import de.uni_passau.sds.lib.schemaComparism.JsonSchemaRelationships;
import org.junit.Assert;
import org.junit.Test;
import org.junit.Ignore;

/**
 * The schemas used in this testsuite are from the json-schema-containment-testsuite.
 * You can find this testsuite here --> https://github.com/sdbs-uni-p/json-schema-containment-testsuite
 * 
 * To be more specific the schemas you can find in folder "draft6" here 
 * --> https://github.com/sdbs-uni-p/json-schema-containment-testsuite/tree/main/tests/draft6
 * 
 * json-schema-containment-testsuite last commit:   e89f6596d20faae443a5a1f5d2584e6f08c773ec
 * JsonSchema_To_Algebra last commit:               56312921f0e5f09a5a29e5678b15c6d938278d9f
 * 
 * Please read the README.md for further informations.
 * https://github.com/miniHive/JSONAlgebra/blob/main/JsonSchema_To_Algebra/src/test/java/de/uni_passau/scs/testsuites/README.md
 * 
 * @author Luca Escher
 */
public class TestsuiteDraft6 {
    private final IJsonSchemaLib jsonSchemaLib = JsonSchemaLibFactory.getJsonSchemaLib();
    private JsonSchemaComparison data = new JsonSchemaComparison();

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id1() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id2() throws Exception {

        String schema1 = "{\"const\":[1,1]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id3() throws Exception {

        String schema1 = "{\"const\":[1,1,1]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id4() throws Exception {

        String schema1 = "{\"const\":[0,false]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id5() throws Exception {

        String schema1 = "{\"const\":[1,true]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id6() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"baz\"}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id7() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"bar\"}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id8() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":false}}}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id9() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":true}}}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id10() throws Exception {

        String schema1 = "{\"const\":[[\"foo\"],[\"bar\"]]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id11() throws Exception {

        String schema1 = "{\"const\":[[\"foo\"],[\"foo\"]]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id12() throws Exception {

        String schema1 = "{\"const\":[1,true]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id13() throws Exception {

        String schema1 = "{\"const\":[0,false]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id14() throws Exception {

        String schema1 = "{\"const\":[[1],[true]]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id15() throws Exception {

        String schema1 = "{\"const\":[[0],[false]]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id16() throws Exception {

        String schema1 = "{\"const\":[[[1],\"foo\"],[[true],\"foo\"]]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id17() throws Exception {

        String schema1 = "{\"const\":[[[0],\"foo\"],[[false],\"foo\"]]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id18() throws Exception {

        String schema1 = "{\"const\":[{},[1],true,null,1,\"{}\"]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id19() throws Exception {

        String schema1 = "{\"const\":[{},[1],true,null,{},1]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id20() throws Exception {

        String schema1 = "{\"const\":[{\"a\":1,\"b\":2},{\"a\":2,\"b\":1}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id21() throws Exception {

        String schema1 = "{\"const\":[{\"a\":1,\"b\":2},{\"a\":1,\"b\":2}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id22() throws Exception {

        String schema1 = "{\"const\":[{\"a\":false},{\"a\":0}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id23() throws Exception {

        String schema1 = "{\"const\":[{\"a\":true},{\"a\":1}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id24() throws Exception {

        String schema1 = "{\"const\":[false,true]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id25() throws Exception {

        String schema1 = "{\"const\":[true,false]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id26() throws Exception {

        String schema1 = "{\"const\":[false,false]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id27() throws Exception {

        String schema1 = "{\"const\":[true,true]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id28() throws Exception {

        String schema1 = "{\"const\":[false,true,\"foo\",\"bar\"]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id29() throws Exception {

        String schema1 = "{\"const\":[true,false,\"foo\",\"bar\"]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id30() throws Exception {

        String schema1 = "{\"const\":[false,true,\"foo\",\"foo\"]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id31() throws Exception {

        String schema1 = "{\"const\":[true,false,\"foo\",\"foo\"]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id32() throws Exception {

        String schema1 = "{\"const\":[false,true]}";
        String schema2 = "{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id33() throws Exception {

        String schema1 = "{\"const\":[true,false]}";
        String schema2 = "{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id34() throws Exception {

        String schema1 = "{\"const\":[false,false]}";
        String schema2 = "{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id35() throws Exception {

        String schema1 = "{\"const\":[true,true]}";
        String schema2 = "{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id36() throws Exception {

        String schema1 = "{\"const\":[false,true,null]}";
        String schema2 = "{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id37() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id38() throws Exception {

        String schema1 = "{\"const\":[1,1]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id39() throws Exception {

        String schema1 = "{\"const\":[1,1,1]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id40() throws Exception {

        String schema1 = "{\"const\":[0,false]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id41() throws Exception {

        String schema1 = "{\"const\":[1,true]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id42() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"baz\"}]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id43() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"bar\"}]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id44() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":false}}}]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id45() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":true}}}]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id46() throws Exception {

        String schema1 = "{\"const\":[[\"foo\"],[\"bar\"]]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id47() throws Exception {

        String schema1 = "{\"const\":[[\"foo\"],[\"foo\"]]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id48() throws Exception {

        String schema1 = "{\"const\":[1,true]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id49() throws Exception {

        String schema1 = "{\"const\":[0,false]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id50() throws Exception {

        String schema1 = "{\"const\":[{},[1],true,null,1]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id51() throws Exception {

        String schema1 = "{\"const\":[{},[1],true,null,{},1]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id52() throws Exception {

        String schema1 = "{\"const\":[false,true]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id53() throws Exception {

        String schema1 = "{\"const\":[true,false]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id54() throws Exception {

        String schema1 = "{\"const\":[false,false]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id55() throws Exception {

        String schema1 = "{\"const\":[true,true]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id56() throws Exception {

        String schema1 = "{\"const\":[false,true,\"foo\",\"bar\"]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id57() throws Exception {

        String schema1 = "{\"const\":[true,false,\"foo\",\"bar\"]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id58() throws Exception {

        String schema1 = "{\"const\":[false,true,\"foo\",\"foo\"]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id59() throws Exception {

        String schema1 = "{\"const\":[true,false,\"foo\",\"foo\"]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id60() throws Exception {

        String schema1 = "{\"const\":[false,true]}";
        String schema2 = "{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id61() throws Exception {

        String schema1 = "{\"const\":[true,false]}";
        String schema2 = "{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id62() throws Exception {

        String schema1 = "{\"const\":[false,false]}";
        String schema2 = "{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id63() throws Exception {

        String schema1 = "{\"const\":[true,true]}";
        String schema2 = "{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_uniqueItems_id64() throws Exception {

        String schema1 = "{\"const\":[false,true,null]}";
        String schema2 = "{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minItems_id1() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"minItems\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minItems_id2() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"minItems\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minItems_id3() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"minItems\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minItems_id4() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"minItems\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id2() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"quux\":\"boom\",\"foo\":1}}";
        String schema2 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id3() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id4() throws Exception {

        String schema1 = "{\"const\":\"foobarbaz\"}";
        String schema2 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id5() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id6() throws Exception {

        String schema1 = "{\"const\":{\"vroom\":2,\"foo\":1}}";
        String schema2 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id7() throws Exception {

        String schema1 = "{\"const\":{\"ármányos\":2}}";
        String schema2 = "{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id8() throws Exception {

        String schema1 = "{\"const\":{\"élmény\":2}}";
        String schema2 = "{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id9() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id10() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"quux\":true,\"foo\":1}}";
        String schema2 = "{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id11() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"quux\":12,\"foo\":1}}";
        String schema2 = "{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id12() throws Exception {

        String schema1 = "{\"const\":{\"foo\":true}}";
        String schema2 = "{\"additionalProperties\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id13() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"additionalProperties\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id14() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"quux\":true,\"foo\":1}}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalProperties_id15() throws Exception {

        String schema1 = "{\"const\":{\"bar\":true,\"foo\":1}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{}}}],\"additionalProperties\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id1() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id4() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id5() throws Exception {

        String schema1 = "{\"const\":[\"bar\"]}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id6() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id7() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id8() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"dependencies\":{\"bar\":[]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id9() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"dependencies\":{\"bar\":[]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id10() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"dependencies\":{\"bar\":[]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id11() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id12() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id13() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"quux\":3,\"foo\":1}}";
        String schema2 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id14() throws Exception {

        String schema1 = "{\"const\":{\"quux\":2,\"foo\":1}}";
        String schema2 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id15() throws Exception {

        String schema1 = "{\"const\":{\"bar\":1,\"quux\":2}}";
        String schema2 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id16() throws Exception {

        String schema1 = "{\"const\":{\"quux\":1}}";
        String schema2 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id17() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id18() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"quux\"}}";
        String schema2 = "{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id19() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"quux\"}}";
        String schema2 = "{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id20() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"quux\",\"foo\":2}}";
        String schema2 = "{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id21() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"quux\",\"foo\":\"quux\"}}";
        String schema2 = "{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id22() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"dependencies\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id23() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"dependencies\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id24() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"dependencies\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id25() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"dependencies\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id26() throws Exception {

        String schema1 = "{\"const\":{\"foo\\rbar\":2,\"foo\\nbar\":1}}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id27() throws Exception {

        String schema1 = "{\"const\":{\"a\":2,\"b\":3,\"c\":4,\"foo\\tbar\":1}}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id28() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\"bar\":2,\"foo'bar\":1}}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id29() throws Exception {

        String schema1 = "{\"const\":{\"foo\":2,\"foo\\nbar\":1}}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id30() throws Exception {

        String schema1 = "{\"const\":{\"a\":2,\"foo\\tbar\":1}}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id31() throws Exception {

        String schema1 = "{\"const\":{\"foo'bar\":1}}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_dependencies_id32() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\"bar\":2}}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_exclusiveMinimum_id1() throws Exception {

        String schema1 = "{\"const\":1.2}";
        String schema2 = "{\"exclusiveMinimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_exclusiveMinimum_id2() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"exclusiveMinimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_exclusiveMinimum_id3() throws Exception {

        String schema1 = "{\"const\":0.6}";
        String schema2 = "{\"exclusiveMinimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_exclusiveMinimum_id4() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"exclusiveMinimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id1() throws Exception {

        String schema1 = "{\"const\":2}";
        String schema2 = "{\"const\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id2() throws Exception {

        String schema1 = "{\"const\":5}";
        String schema2 = "{\"const\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id3() throws Exception {

        String schema1 = "{\"const\":\"a\"}";
        String schema2 = "{\"const\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id4() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        String schema2 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id5() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        String schema2 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id6() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id7() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id8() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"}]}";
        String schema2 = "{\"const\":[{\"foo\":\"bar\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id9() throws Exception {

        String schema1 = "{\"const\":[2]}";
        String schema2 = "{\"const\":[{\"foo\":\"bar\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id10() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"const\":[{\"foo\":\"bar\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id11() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"const\":null}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id12() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"const\":null}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id13() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"const\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id14() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"const\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id15() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"const\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id16() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"const\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id17() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"const\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id18() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"const\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id19() throws Exception {

        String schema1 = "{\"const\":[false]}";
        String schema2 = "{\"const\":[false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id20() throws Exception {

        String schema1 = "{\"const\":[0]}";
        String schema2 = "{\"const\":[false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id21() throws Exception {

        String schema1 = "{\"const\":[0]}";
        String schema2 = "{\"const\":[false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id22() throws Exception {

        String schema1 = "{\"const\":[true]}";
        String schema2 = "{\"const\":[true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id23() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"const\":[true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id24() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"const\":[true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id25() throws Exception {

        String schema1 = "{\"const\":{\"a\":false}}";
        String schema2 = "{\"const\":{\"a\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id26() throws Exception {

        String schema1 = "{\"const\":{\"a\":0}}";
        String schema2 = "{\"const\":{\"a\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id27() throws Exception {

        String schema1 = "{\"const\":{\"a\":0}}";
        String schema2 = "{\"const\":{\"a\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id28() throws Exception {

        String schema1 = "{\"const\":{\"a\":true}}";
        String schema2 = "{\"const\":{\"a\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id29() throws Exception {

        String schema1 = "{\"const\":{\"a\":1}}";
        String schema2 = "{\"const\":{\"a\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id30() throws Exception {

        String schema1 = "{\"const\":{\"a\":1}}";
        String schema2 = "{\"const\":{\"a\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id31() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"const\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id32() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"const\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id33() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"const\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id34() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"const\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id35() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"const\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id36() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"const\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id37() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"const\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id38() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"const\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id39() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"const\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id40() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"const\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id41() throws Exception {

        String schema1 = "{\"const\":2}";
        String schema2 = "{\"const\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id42() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"const\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id43() throws Exception {

        String schema1 = "{\"const\":2}";
        String schema2 = "{\"const\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id44() throws Exception {

        String schema1 = "{\"const\":-2.00001}";
        String schema2 = "{\"const\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id45() throws Exception {

        String schema1 = "{\"const\":9007199254740992}";
        String schema2 = "{\"const\":9007199254740992}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id46() throws Exception {

        String schema1 = "{\"const\":9007199254740991}";
        String schema2 = "{\"const\":9007199254740992}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id47() throws Exception {

        String schema1 = "{\"const\":9007199254740992}";
        String schema2 = "{\"const\":9007199254740992}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_const_id48() throws Exception {

        String schema1 = "{\"const\":9007199254740991}";
        String schema2 = "{\"const\":9007199254740992}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_const_id49() throws Exception {

        String schema1 = "{\"const\":\"hello\\u0000there\"}";
        String schema2 = "{\"const\":\"hello\\u0000there\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_const_id50() throws Exception {

        String schema1 = "{\"const\":\"hellothere\"}";
        String schema2 = "{\"const\":\"hello\\u0000there\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id2() throws Exception {

        String schema1 = "{\"const\":2.5}";
        String schema2 = "{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id3() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id4() throws Exception {

        String schema1 = "{\"const\":1.5}";
        String schema2 = "{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id5() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id6() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id7() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id8() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"anyOf\":[true,true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id9() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"anyOf\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id10() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"anyOf\":[false,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id11() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id12() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"baz\"}}";
        String schema2 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id13() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"baz\"}}";
        String schema2 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id14() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"quux\",\"foo\":2}}";
        String schema2 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id15() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"anyOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id16() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"anyOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id17() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id18() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id19() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_anyOf_id20() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id1() throws Exception {

        String schema1 = "{\"const\":{\"f\":{},\"foo\":{}}}";
        String schema2 = "{\"propertyNames\":{\"maxLength\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id2() throws Exception {

        String schema1 = "{\"const\":{\"foobar\":{},\"foo\":{}}}";
        String schema2 = "{\"propertyNames\":{\"maxLength\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id3() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"propertyNames\":{\"maxLength\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id4() throws Exception {

        String schema1 = "{\"const\":[1,2,3,4]}";
        String schema2 = "{\"propertyNames\":{\"maxLength\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id5() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"propertyNames\":{\"maxLength\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id6() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"propertyNames\":{\"maxLength\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id7() throws Exception {

        String schema1 = "{\"const\":{\"aa\":{},\"aaa\":{},\"a\":{}}}";
        String schema2 = "{\"propertyNames\":{\"pattern\":\"^a+$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id8() throws Exception {

        String schema1 = "{\"const\":{\"aaA\":{}}}";
        String schema2 = "{\"propertyNames\":{\"pattern\":\"^a+$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id9() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"propertyNames\":{\"pattern\":\"^a+$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id10() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"propertyNames\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id11() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"propertyNames\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id12() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"propertyNames\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_propertyNames_id13() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"propertyNames\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_unknownKeyword_id1() throws Exception {

        String schema1 = "{\"const\":\"a string\"}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_unknown0\"},{\"$ref\":\"#/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_unknownKeyword_id2() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_unknown0\"},{\"$ref\":\"#/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_unknownKeyword_id3() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_unknown0\"},{\"$ref\":\"#/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id2() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id3() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id4() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id5() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id6() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id7() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id8() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id9() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id10() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id11() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id12() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id13() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id14() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id15() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id16() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id17() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_boolean_schema_id18() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id1() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id2() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id3() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"type\":[\"integer\",\"boolean\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id4() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"type\":[\"integer\",\"boolean\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id5() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"not\":{\"type\":[\"integer\",\"boolean\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id6() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id7() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id8() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id9() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"properties\":{\"foo\":{\"not\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id10() throws Exception {

        String schema1 = "{\"const\":{\"bar\":1,\"baz\":2}}";
        String schema2 = "{\"properties\":{\"foo\":{\"not\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id11() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_not_id12() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id1() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"items\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id2() throws Exception {

        String schema1 = "{\"const\":[1,\"x\"]}";
        String schema2 = "{\"items\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id3() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "{\"items\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id4() throws Exception {

        String schema1 = "{\"const\":{\"0\":\"invalid\",\"length\":1}}";
        String schema2 = "{\"items\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id5() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\"]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id6() throws Exception {

        String schema1 = "{\"const\":[\"foo\",1]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id7() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id8() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\",true]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id9() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id10() throws Exception {

        String schema1 = "{\"const\":{\"0\":\"invalid\",\"1\":\"valid\",\"length\":2}}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id11() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\",true]}";
        String schema2 = "{\"items\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id12() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"items\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id13() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\",true]}";
        String schema2 = "{\"items\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id14() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"items\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id15() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"items\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id16() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\"]}";
        String schema2 = "{\"items\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id17() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"items\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id18() throws Exception {

        String schema1 = "{\"const\":[[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}]]}";
        String schema2 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id19() throws Exception {

        String schema1 = "{\"const\":[[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}]]}";
        String schema2 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id20() throws Exception {

        String schema1 = "{\"const\":[[{\"foo\":null},{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}]]}";
        String schema2 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id21() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":null},[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}]]}";
        String schema2 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id22() throws Exception {

        String schema1 = "{\"const\":[[{},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}]]}";
        String schema2 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id23() throws Exception {

        String schema1 = "{\"const\":[[{\"foo\":null}],[{\"foo\":null}]]}";
        String schema2 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id24() throws Exception {

        String schema1 = "{\"const\":[[[[1]],[[2],[3]]],[[[4],[5],[6]]]]}";
        String schema2 = "{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id25() throws Exception {

        String schema1 = "{\"const\":[[[[\"1\"]],[[2],[3]]],[[[4],[5],[6]]]]}";
        String schema2 = "{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_items_id26() throws Exception {

        String schema1 = "{\"const\":[[[1],[2],[3]],[[4],[5],[6]]]}";
        String schema2 = "{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"enum\":[1,2,3]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id2() throws Exception {

        String schema1 = "{\"const\":4}";
        String schema2 = "{\"enum\":[1,2,3]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id3() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id4() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id5() throws Exception {

        String schema1 = "{\"const\":{\"foo\":false}}";
        String schema2 = "{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id6() throws Exception {

        String schema1 = "{\"const\":{\"foo\":12}}";
        String schema2 = "{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id7() throws Exception {

        String schema1 = "{\"const\":{\"boo\":42,\"foo\":12}}";
        String schema2 = "{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id8() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"enum\":[6,null]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id9() throws Exception {

        String schema1 = "{\"const\":6}";
        String schema2 = "{\"enum\":[6,null]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id10() throws Exception {

        String schema1 = "{\"const\":\"test\"}";
        String schema2 = "{\"enum\":[6,null]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id11() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"bar\",\"foo\":\"foo\"}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id12() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"bar\",\"foo\":\"foot\"}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id13() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"bart\",\"foo\":\"foo\"}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id14() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"bar\"}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id15() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"foo\"}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_enum_id16() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id17() throws Exception {

        String schema1 = "{\"const\":\"foo\\nbar\"}";
        String schema2 = "{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id18() throws Exception {

        String schema1 = "{\"const\":\"foo\\rbar\"}";
        String schema2 = "{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id19() throws Exception {

        String schema1 = "{\"const\":\"abc\"}";
        String schema2 = "{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id20() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"enum\":[false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id21() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"enum\":[false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id22() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"enum\":[false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id23() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"enum\":[true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id24() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"enum\":[true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id25() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"enum\":[true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id26() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"enum\":[0]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id27() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"enum\":[0]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id28() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"enum\":[0]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id29() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"enum\":[1]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id30() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"enum\":[1]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id31() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"enum\":[1]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id32() throws Exception {

        String schema1 = "{\"const\":\"hello\\u0000there\"}";
        String schema2 = "{\"enum\":[\"hello\\u0000there\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_enum_id33() throws Exception {

        String schema1 = "{\"const\":\"hellothere\"}";
        String schema2 = "{\"enum\":[\"hello\\u0000there\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minProperties_id1() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"minProperties\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minProperties_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"minProperties\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minProperties_id3() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"minProperties\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minProperties_id4() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"minProperties\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minProperties_id5() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"minProperties\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minProperties_id6() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"minProperties\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id1() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"baz\",\"foo\":1}}";
        String schema2 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id2() throws Exception {

        String schema1 = "{\"const\":{\"bar\":{},\"foo\":1}}";
        String schema2 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":{},\"foo\":[]}}";
        String schema2 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id4() throws Exception {

        String schema1 = "{\"const\":{\"quux\":[]}}";
        String schema2 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id5() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id6() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id7() throws Exception {

        String schema1 = "{\"const\":{\"foo\":[1,2]}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id8() throws Exception {

        String schema1 = "{\"const\":{\"foo\":[1,2,3,4]}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id9() throws Exception {

        String schema1 = "{\"const\":{\"foo\":[]}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id10() throws Exception {

        String schema1 = "{\"const\":{\"fxo\":[1,2]}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id11() throws Exception {

        String schema1 = "{\"const\":{\"fxo\":[]}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id12() throws Exception {

        String schema1 = "{\"const\":{\"bar\":[]}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id13() throws Exception {

        String schema1 = "{\"const\":{\"quux\":3}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id14() throws Exception {

        String schema1 = "{\"const\":{\"quux\":\"foo\"}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id15() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"properties\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id16() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"properties\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id17() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"properties\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_properties_id18() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"properties\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_properties_id19() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\\bar\":1,\"foo\\\"bar\":1,\"foo\\rbar\":1,\"foo\\fbar\":1,\"foo\\tbar\":1,\"foo\\nbar\":1}}";
        String schema2 = "{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_properties_id20() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\\bar\":\"1\",\"foo\\\"bar\":\"1\",\"foo\\rbar\":\"1\",\"foo\\fbar\":\"1\",\"foo\\tbar\":\"1\",\"foo\\nbar\":\"1\"}}";
        String schema2 = "{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxLength_id1() throws Exception {

        String schema1 = "{\"const\":\"f\"}";
        String schema2 = "{\"maxLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxLength_id2() throws Exception {

        String schema1 = "{\"const\":\"fo\"}";
        String schema2 = "{\"maxLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxLength_id3() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"maxLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxLength_id4() throws Exception {

        String schema1 = "{\"const\":100}";
        String schema2 = "{\"maxLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxLength_id5() throws Exception {

        String schema1 = "{\"const\":\"💩💩\"}";
        String schema2 = "{\"maxLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_infinite_loop_detection_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/definitions/int\"}}],\"definitions\":{\"int\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_infinite_loop_detection_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"a string\"}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/definitions/int\"}}],\"definitions\":{\"int\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_exclusiveMaximum_id1() throws Exception {

        String schema1 = "{\"const\":2.2}";
        String schema2 = "{\"exclusiveMaximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_exclusiveMaximum_id2() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"exclusiveMaximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_exclusiveMaximum_id3() throws Exception {

        String schema1 = "{\"const\":3.5}";
        String schema2 = "{\"exclusiveMaximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_exclusiveMaximum_id4() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"exclusiveMaximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id1() throws Exception {

        String schema1 = "{\"const\":2.6}";
        String schema2 = "{\"minimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id2() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"minimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id3() throws Exception {

        String schema1 = "{\"const\":0.6}";
        String schema2 = "{\"minimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id4() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"minimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id5() throws Exception {

        String schema1 = "{\"const\":-1}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id6() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id7() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id8() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id9() throws Exception {

        String schema1 = "{\"const\":-2.0001}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id10() throws Exception {

        String schema1 = "{\"const\":-3}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minimum_id11() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id1() throws Exception {

        String schema1 = "{\"const\":1.2345678910111214E52}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id2() throws Exception {

        String schema1 = "{\"const\":-1.2345678910111214E52}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id3() throws Exception {

        String schema1 = "{\"const\":9.824928374923492E52}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id4() throws Exception {

        String schema1 = "{\"const\":-9.824928374923492E52}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id5() throws Exception {

        String schema1 = "{\"const\":9.824928374923492E52}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id6() throws Exception {

        String schema1 = "{\"const\":1.8446744073709552E19}";
        String schema2 = "{\"maximum\":1.8446744073709552E19}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id7() throws Exception {

        String schema1 = "{\"const\":9.727837981879871E26}";
        String schema2 = "{\"exclusiveMaximum\":9.727837981879871E26}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id8() throws Exception {

        String schema1 = "{\"const\":-1.8446744073709552E19}";
        String schema2 = "{\"minimum\":-1.8446744073709552E19}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_bignum_id9() throws Exception {

        String schema1 = "{\"const\":-9.727837981879871E26}";
        String schema2 = "{\"exclusiveMinimum\":-9.727837981879871E26}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id1() throws Exception {

        String schema1 = "{\"const\":\"Les hivers de mon enfance étaient des saisons longues, longues. Nous vivions en trois lieux: l'école, l'église et la patinoire; mais la vraie vie était sur la patinoire.\"}";
        String schema2 = "{\"pattern\":\"\\\\wcole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id2() throws Exception {

        String schema1 = "{\"const\":\"Les hivers de mon enfance étaient des saisons longues, longues. Nous vivions en trois lieux: l'école, l'église et la patinoire; mais la vraie vie était sur la patinoire.\"}";
        String schema2 = "{\"pattern\":\"\\\\wcole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id3() throws Exception {

        String schema1 = "{\"const\":\"LES HIVERS DE MON ENFANCE ÉTAIENT DES SAISONS LONGUES, LONGUES. NOUS VIVIONS EN TROIS LIEUX: L'ÉCOLE, L'ÉGLISE ET LA PATINOIRE; MAIS LA VRAIE VIE ÉTAIT SUR LA PATINOIRE.\"}";
        String schema2 = "{\"pattern\":\"\\\\wcole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id4() throws Exception {

        String schema1 = "{\"const\":\"Les hivers de mon enfance étaient des saisons longues, longues. Nous vivions en trois lieux: l'école, l'église et la patinoire; mais la vraie vie était sur la patinoire.\"}";
        String schema2 = "{\"pattern\":\"[a-z]cole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id5() throws Exception {

        String schema1 = "{\"const\":\"Les hivers de mon enfance étaient des saisons longues, longues. Nous vivions en trois lieux: l'école, l'église et la patinoire; mais la vraie vie était sur la patinoire.\"}";
        String schema2 = "{\"pattern\":\"[a-z]cole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id6() throws Exception {

        String schema1 = "{\"const\":\"Les hivers de mon enfance etaient des saisons longues, longues. Nous vivions en trois lieux: l'ecole, l'eglise et la patinoire; mais la vraie vie etait sur la patinoire.\"}";
        String schema2 = "{\"pattern\":\"[a-z]cole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id7() throws Exception {

        String schema1 = "{\"const\":\"42\"}";
        String schema2 = "{\"pattern\":\"^\\\\d+$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id8() throws Exception {

        String schema1 = "{\"const\":\"-%#\"}";
        String schema2 = "{\"pattern\":\"^\\\\d+$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id9() throws Exception {

        String schema1 = "{\"const\":\"৪২\"}";
        String schema2 = "{\"pattern\":\"^\\\\d+$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id10() throws Exception {

        String schema1 = "{\"const\":{\"l'école\":\"pas de vraie vie\"}}";
        String schema2 = "{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id11() throws Exception {

        String schema1 = "{\"const\":{\"l'école\":\"pas de vraie vie\"}}";
        String schema2 = "{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id12() throws Exception {

        String schema1 = "{\"const\":{\"L'ÉCOLE\":\"PAS DE VRAIE VIE\"}}";
        String schema2 = "{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id13() throws Exception {

        String schema1 = "{\"const\":{\"l'école\":\"pas de vraie vie\"}}";
        String schema2 = "{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id14() throws Exception {

        String schema1 = "{\"const\":{\"l'école\":\"pas de vraie vie\"}}";
        String schema2 = "{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id15() throws Exception {

        String schema1 = "{\"const\":{\"l'ecole\":\"pas de vraie vie\"}}";
        String schema2 = "{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id16() throws Exception {

        String schema1 = "{\"const\":{\"42\":\"life, the universe, and everything\"}}";
        String schema2 = "{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id17() throws Exception {

        String schema1 = "{\"const\":{\"-%#\":\"spending the year dead for tax reasons\"}}";
        String schema2 = "{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_unicode_id18() throws Exception {

        String schema1 = "{\"const\":{\"৪২\":\"khajit has wares if you have coin\"}}";
        String schema2 = "{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id1() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id2() throws Exception {

        String schema1 = "{\"const\":\"🐲\"}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id3() throws Exception {

        String schema1 = "{\"const\":\"🐲🐲\"}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id4() throws Exception {

        String schema1 = "{\"const\":\"🐉\"}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id5() throws Exception {

        String schema1 = "{\"const\":\"🐉🐉\"}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id6() throws Exception {

        String schema1 = "{\"const\":\"D\"}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id7() throws Exception {

        String schema1 = "{\"const\":\"DD\"}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id8() throws Exception {

        String schema1 = "{\"const\":{\"\":1}}";
        String schema2 = "{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id9() throws Exception {

        String schema1 = "{\"const\":{\"🐲\":1}}";
        String schema2 = "{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id10() throws Exception {

        String schema1 = "{\"const\":{\"🐲🐲\":1}}";
        String schema2 = "{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id11() throws Exception {

        String schema1 = "{\"const\":{\"🐲\":\"hello\"}}";
        String schema2 = "{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_non_bmp_regex_id12() throws Exception {

        String schema1 = "{\"const\":{\"🐲🐲\":\"hello\"}}";
        String schema2 = "{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id1() throws Exception {

        String schema1 = "{\"const\":\"/foo/bar~0/baz~1/%a\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id2() throws Exception {

        String schema1 = "{\"const\":\"/foo/bar~\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id3() throws Exception {

        String schema1 = "{\"const\":\"/foo//bar\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id4() throws Exception {

        String schema1 = "{\"const\":\"/foo/bar/\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id5() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id6() throws Exception {

        String schema1 = "{\"const\":\"/foo\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id7() throws Exception {

        String schema1 = "{\"const\":\"/foo/0\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id8() throws Exception {

        String schema1 = "{\"const\":\"/\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id9() throws Exception {

        String schema1 = "{\"const\":\"/a~1b\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id10() throws Exception {

        String schema1 = "{\"const\":\"/c%d\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id11() throws Exception {

        String schema1 = "{\"const\":\"/e^f\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id12() throws Exception {

        String schema1 = "{\"const\":\"/g|h\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id13() throws Exception {

        String schema1 = "{\"const\":\"/i\\\\j\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id14() throws Exception {

        String schema1 = "{\"const\":\"/k\\\"l\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id15() throws Exception {

        String schema1 = "{\"const\":\"/ \"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id16() throws Exception {

        String schema1 = "{\"const\":\"/m~0n\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id17() throws Exception {

        String schema1 = "{\"const\":\"/foo/-\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id18() throws Exception {

        String schema1 = "{\"const\":\"/foo/-/bar\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id19() throws Exception {

        String schema1 = "{\"const\":\"/~1~0~0~1~1\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id20() throws Exception {

        String schema1 = "{\"const\":\"/~1.1\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id21() throws Exception {

        String schema1 = "{\"const\":\"/~0.1\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id22() throws Exception {

        String schema1 = "{\"const\":\"#\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id23() throws Exception {

        String schema1 = "{\"const\":\"#/\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id24() throws Exception {

        String schema1 = "{\"const\":\"#a\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id25() throws Exception {

        String schema1 = "{\"const\":\"/~0~\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id26() throws Exception {

        String schema1 = "{\"const\":\"/~0/~\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id27() throws Exception {

        String schema1 = "{\"const\":\"/~2\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id28() throws Exception {

        String schema1 = "{\"const\":\"/~-1\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id29() throws Exception {

        String schema1 = "{\"const\":\"/~~\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id30() throws Exception {

        String schema1 = "{\"const\":\"a\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id31() throws Exception {

        String schema1 = "{\"const\":\"0\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_json_pointer_id32() throws Exception {

        String schema1 = "{\"const\":\"a/a\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id1() throws Exception {

        String schema1 = "{\"const\":\"http://foo.bar/?baz=qux#quux\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id2() throws Exception {

        String schema1 = "{\"const\":\"http://foo.com/blah_(wikipedia)_blah#cite-1\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id3() throws Exception {

        String schema1 = "{\"const\":\"http://foo.bar/?q=Test%20URL-encoded%20stuff\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id4() throws Exception {

        String schema1 = "{\"const\":\"http://xn--nw2a.xn--j6w193g/\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id5() throws Exception {

        String schema1 = "{\"const\":\"http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id6() throws Exception {

        String schema1 = "{\"const\":\"http://223.255.255.254\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id7() throws Exception {

        String schema1 = "{\"const\":\"ftp://ftp.is.co.za/rfc/rfc1808.txt\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id8() throws Exception {

        String schema1 = "{\"const\":\"http://www.ietf.org/rfc/rfc2396.txt\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id9() throws Exception {

        String schema1 = "{\"const\":\"ldap://[2001:db8::7]/c=GB?objectClass?one\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id10() throws Exception {

        String schema1 = "{\"const\":\"mailto:John.Doe@example.com\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id11() throws Exception {

        String schema1 = "{\"const\":\"news:comp.infosystems.www.servers.unix\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id12() throws Exception {

        String schema1 = "{\"const\":\"tel:+1-816-555-1212\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id13() throws Exception {

        String schema1 = "{\"const\":\"urn:oasis:names:specification:docbook:dtd:xml:4.1.2\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id14() throws Exception {

        String schema1 = "{\"const\":\"//foo.bar/?baz=qux#quux\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id15() throws Exception {

        String schema1 = "{\"const\":\"/abc\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id16() throws Exception {

        String schema1 = "{\"const\":\"\\\\\\\\WINDOWS\\\\fileshare\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id17() throws Exception {

        String schema1 = "{\"const\":\"abc\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id18() throws Exception {

        String schema1 = "{\"const\":\"http:// shouldfail.com\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id19() throws Exception {

        String schema1 = "{\"const\":\":// should fail\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_id20() throws Exception {

        String schema1 = "{\"const\":\"bar,baz:foo\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_template_id1() throws Exception {

        String schema1 = "{\"const\":\"http://example.com/dictionary/{term:1}/{term}\"}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_template_id2() throws Exception {

        String schema1 = "{\"const\":\"http://example.com/dictionary/{term:1}/{term\"}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_template_id3() throws Exception {

        String schema1 = "{\"const\":\"http://example.com/dictionary\"}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_template_id4() throws Exception {

        String schema1 = "{\"const\":\"dictionary/{term:1}/{term}\"}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id1() throws Exception {

        String schema1 = "{\"const\":\"192.168.0.1\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id2() throws Exception {

        String schema1 = "{\"const\":\"127.0.0.0.1\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id3() throws Exception {

        String schema1 = "{\"const\":\"256.256.256.256\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id4() throws Exception {

        String schema1 = "{\"const\":\"127.0\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id5() throws Exception {

        String schema1 = "{\"const\":\"0x7f000001\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id6() throws Exception {

        String schema1 = "{\"const\":\"2130706433\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id7() throws Exception {

        String schema1 = "{\"const\":\"087.10.0.1\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id8() throws Exception {

        String schema1 = "{\"const\":\"87.10.0.1\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv4_id9() throws Exception {

        String schema1 = "{\"const\":\"1২7.0.0.1\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_reference_id1() throws Exception {

        String schema1 = "{\"const\":\"http://foo.bar/?baz=qux#quux\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_reference_id2() throws Exception {

        String schema1 = "{\"const\":\"//foo.bar/?baz=qux#quux\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_reference_id3() throws Exception {

        String schema1 = "{\"const\":\"/abc\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_reference_id4() throws Exception {

        String schema1 = "{\"const\":\"\\\\\\\\WINDOWS\\\\fileshare\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_reference_id5() throws Exception {

        String schema1 = "{\"const\":\"abc\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_reference_id6() throws Exception {

        String schema1 = "{\"const\":\"#fragment\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_uri_reference_id7() throws Exception {

        String schema1 = "{\"const\":\"#frag\\\\ment\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id1() throws Exception {

        String schema1 = "{\"const\":\"::1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id2() throws Exception {

        String schema1 = "{\"const\":\"12345::\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id3() throws Exception {

        String schema1 = "{\"const\":\"1:1:1:1:1:1:1:1:1:1:1:1:1:1:1:1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id4() throws Exception {

        String schema1 = "{\"const\":\"::laptop\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id5() throws Exception {

        String schema1 = "{\"const\":\"::\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id6() throws Exception {

        String schema1 = "{\"const\":\"::42:ff:1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id7() throws Exception {

        String schema1 = "{\"const\":\"d6::\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id8() throws Exception {

        String schema1 = "{\"const\":\":2:3:4:5:6:7:8\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id9() throws Exception {

        String schema1 = "{\"const\":\"1:2:3:4:5:6:7:\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id10() throws Exception {

        String schema1 = "{\"const\":\":2:3:4::8\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id11() throws Exception {

        String schema1 = "{\"const\":\"1::d6::42\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id12() throws Exception {

        String schema1 = "{\"const\":\"1::d6:192.168.0.1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id13() throws Exception {

        String schema1 = "{\"const\":\"1:2::192.168.0.1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id14() throws Exception {

        String schema1 = "{\"const\":\"1::2:192.168.256.1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id15() throws Exception {

        String schema1 = "{\"const\":\"1::2:192.168.ff.1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id16() throws Exception {

        String schema1 = "{\"const\":\"::ffff:192.168.0.1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id17() throws Exception {

        String schema1 = "{\"const\":\"1:2:3:4:5:::8\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id18() throws Exception {

        String schema1 = "{\"const\":\"1:2:3:4:5:6:7:8\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id19() throws Exception {

        String schema1 = "{\"const\":\"1:2:3:4:5:6:7\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id20() throws Exception {

        String schema1 = "{\"const\":\"1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id21() throws Exception {

        String schema1 = "{\"const\":\"127.0.0.1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id22() throws Exception {

        String schema1 = "{\"const\":\"1:2:3:4:1.2.3\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id23() throws Exception {

        String schema1 = "{\"const\":\"  ::1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id24() throws Exception {

        String schema1 = "{\"const\":\"::1  \"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id25() throws Exception {

        String schema1 = "{\"const\":\"fe80::/64\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id26() throws Exception {

        String schema1 = "{\"const\":\"fe80::a%eth1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id27() throws Exception {

        String schema1 = "{\"const\":\"1000:1000:1000:1000:1000:1000:255.255.255.255\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id28() throws Exception {

        String schema1 = "{\"const\":\"100:100:100:100:100:100:255.255.255.255.255\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id29() throws Exception {

        String schema1 = "{\"const\":\"100:100:100:100:100:100:100:255.255.255.255\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id30() throws Exception {

        String schema1 = "{\"const\":\"1:2:3:4:5:6:7:৪\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_ipv6_id31() throws Exception {

        String schema1 = "{\"const\":\"1:2::192.16৪.0.1\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id1() throws Exception {

        String schema1 = "{\"const\":\"www.example.com\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id2() throws Exception {

        String schema1 = "{\"const\":\"-a-host-name-that-starts-with--\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id3() throws Exception {

        String schema1 = "{\"const\":\"not_a_valid_host_name\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id4() throws Exception {

        String schema1 = "{\"const\":\"a-vvvvvvvvvvvvvvvveeeeeeeeeeeeeeeerrrrrrrrrrrrrrrryyyyyyyyyyyyyyyy-long-host-name-component\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id5() throws Exception {

        String schema1 = "{\"const\":\"-hostname\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id6() throws Exception {

        String schema1 = "{\"const\":\"hostname-\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id7() throws Exception {

        String schema1 = "{\"const\":\"_hostname\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id8() throws Exception {

        String schema1 = "{\"const\":\"hostname_\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id9() throws Exception {

        String schema1 = "{\"const\":\"host_name\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id10() throws Exception {

        String schema1 = "{\"const\":\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.com\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_hostname_id11() throws Exception {

        String schema1 = "{\"const\":\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl.com\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id1() throws Exception {

        String schema1 = "{\"const\":\"joe.bloggs@example.com\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id2() throws Exception {

        String schema1 = "{\"const\":\"2962\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id3() throws Exception {

        String schema1 = "{\"const\":\"te~st@example.com\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id4() throws Exception {

        String schema1 = "{\"const\":\"~test@example.com\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id5() throws Exception {

        String schema1 = "{\"const\":\"test~@example.com\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id6() throws Exception {

        String schema1 = "{\"const\":\".test@example.com\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id7() throws Exception {

        String schema1 = "{\"const\":\"test.@example.com\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id8() throws Exception {

        String schema1 = "{\"const\":\"te.s.t@example.com\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_email_id9() throws Exception {

        String schema1 = "{\"const\":\"te..st@example.com\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id1() throws Exception {

        String schema1 = "{\"const\":\"1963-06-19T08:30:06.283185Z\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id2() throws Exception {

        String schema1 = "{\"const\":\"1963-06-19T08:30:06Z\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id3() throws Exception {

        String schema1 = "{\"const\":\"1937-01-01T12:00:27.87+00:20\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id4() throws Exception {

        String schema1 = "{\"const\":\"1990-12-31T15:59:50.123-08:00\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id5() throws Exception {

        String schema1 = "{\"const\":\"1990-02-31T15:59:60.123-08:00\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id6() throws Exception {

        String schema1 = "{\"const\":\"1990-12-31T15:59:60-24:00\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id7() throws Exception {

        String schema1 = "{\"const\":\"1963-06-19T08:30:06.28123+01:00Z\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id8() throws Exception {

        String schema1 = "{\"const\":\"06/19/1963 08:30:06 PST\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id9() throws Exception {

        String schema1 = "{\"const\":\"1963-06-19t08:30:06.283185z\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id10() throws Exception {

        String schema1 = "{\"const\":\"2013-350T01:01:01\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id11() throws Exception {

        String schema1 = "{\"const\":\"1963-6-19T08:30:06.283185Z\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id12() throws Exception {

        String schema1 = "{\"const\":\"1963-06-1T08:30:06.283185Z\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id13() throws Exception {

        String schema1 = "{\"const\":\"1963-06-1৪T00:00:00Z\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_format_date_time_id14() throws Exception {

        String schema1 = "{\"const\":\"1963-06-11T0৪:00:00Z\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_float_overflow_id1() throws Exception {

        String schema1 = "{\"const\":1.0E308}";
        String schema2 = "{\"multipleOf\":0.5,\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id1() throws Exception {

        String schema1 = "{\"const\":\"abc\\\\n\"}";
        String schema2 = "{\"pattern\":\"^abc$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id2() throws Exception {

        String schema1 = "{\"const\":\"abc\"}";
        String schema2 = "{\"pattern\":\"^abc$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id3() throws Exception {

        String schema1 = "{\"const\":\"\\\\t\"}";
        String schema2 = "{\"pattern\":\"^\\\\t$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id4() throws Exception {

        String schema1 = "{\"const\":\"\\t\"}";
        String schema2 = "{\"pattern\":\"^\\\\t$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id5() throws Exception {

        String schema1 = "{\"const\":\"\\\\cC\"}";
        String schema2 = "{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id6() throws Exception {

        String schema1 = "{\"const\":\"\\u0003\"}";
        String schema2 = "{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id7() throws Exception {

        String schema1 = "{\"const\":\"\\\\cc\"}";
        String schema2 = "{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id8() throws Exception {

        String schema1 = "{\"const\":\"\\u0003\"}";
        String schema2 = "{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id9() throws Exception {

        String schema1 = "{\"const\":\"0\"}";
        String schema2 = "{\"pattern\":\"^\\\\d$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id10() throws Exception {

        String schema1 = "{\"const\":\"߀\"}";
        String schema2 = "{\"pattern\":\"^\\\\d$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id11() throws Exception {

        String schema1 = "{\"const\":\"߀\"}";
        String schema2 = "{\"pattern\":\"^\\\\d$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id12() throws Exception {

        String schema1 = "{\"const\":\"0\"}";
        String schema2 = "{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id13() throws Exception {

        String schema1 = "{\"const\":\"߀\"}";
        String schema2 = "{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id14() throws Exception {

        String schema1 = "{\"const\":\"߀\"}";
        String schema2 = "{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id15() throws Exception {

        String schema1 = "{\"const\":\"a\"}";
        String schema2 = "{\"pattern\":\"^\\\\w$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id16() throws Exception {

        String schema1 = "{\"const\":\"é\"}";
        String schema2 = "{\"pattern\":\"^\\\\w$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id17() throws Exception {

        String schema1 = "{\"const\":\"a\"}";
        String schema2 = "{\"pattern\":\"^\\\\W$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id18() throws Exception {

        String schema1 = "{\"const\":\"é\"}";
        String schema2 = "{\"pattern\":\"^\\\\W$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id19() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id20() throws Exception {

        String schema1 = "{\"const\":\"\\t\"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id21() throws Exception {

        String schema1 = "{\"const\":\"\\u000b\"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id22() throws Exception {

        String schema1 = "{\"const\":\"\\f\"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id23() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id24() throws Exception {

        String schema1 = "{\"const\":\"﻿\"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id25() throws Exception {

        String schema1 = "{\"const\":\"\\n\"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id26() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id27() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id28() throws Exception {

        String schema1 = "{\"const\":\"\\u0001\"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id29() throws Exception {

        String schema1 = "{\"const\":\"–\"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id30() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id31() throws Exception {

        String schema1 = "{\"const\":\"\\t\"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id32() throws Exception {

        String schema1 = "{\"const\":\"\\u000b\"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id33() throws Exception {

        String schema1 = "{\"const\":\"\\f\"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id34() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id35() throws Exception {

        String schema1 = "{\"const\":\"﻿\"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id36() throws Exception {

        String schema1 = "{\"const\":\"\\n\"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id37() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id38() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id39() throws Exception {

        String schema1 = "{\"const\":\"\\u0001\"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_optional_ecmascript_regex_id40() throws Exception {

        String schema1 = "{\"const\":\"–\"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id2() throws Exception {

        String schema1 = "{\"const\":2.5}";
        String schema2 = "{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id3() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id4() throws Exception {

        String schema1 = "{\"const\":1.5}";
        String schema2 = "{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id5() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id6() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id7() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id8() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"oneOf\":[true,true,true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id9() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"oneOf\":[true,false,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id10() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"oneOf\":[true,true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id11() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"oneOf\":[false,false,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id12() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id13() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"baz\"}}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id14() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"baz\"}}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id15() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"quux\",\"foo\":2}}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id16() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"oneOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id17() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"oneOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id18() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id19() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id20() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1,\"baz\":3}}";
        String schema2 = "{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id21() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1,\"baz\":3}}";
        String schema2 = "{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id22() throws Exception {

        String schema1 = "{\"const\":{\"bar\":8}}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id23() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"foo\"}}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id24() throws Exception {

        String schema1 = "{\"const\":{\"bar\":8,\"foo\":\"foo\"}}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id25() throws Exception {

        String schema1 = "{\"const\":{\"baz\":\"quux\"}}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id26() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_oneOf_id27() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id1() throws Exception {

        String schema1 = "{\"const\":[null,2,3,4]}";
        String schema2 = "{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id2() throws Exception {

        String schema1 = "{\"const\":[null,2,3,\"foo\"]}";
        String schema2 = "{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id3() throws Exception {

        String schema1 = "{\"const\":[1,2,3,4,5]}";
        String schema2 = "{\"additionalItems\":false,\"items\":{}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id4() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"additionalItems\":false,\"items\":[{},{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id5() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"additionalItems\":false,\"items\":[{},{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id6() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"additionalItems\":false,\"items\":[{},{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id7() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"additionalItems\":false,\"items\":[{},{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id8() throws Exception {

        String schema1 = "{\"const\":[1,2,3,4]}";
        String schema2 = "{\"additionalItems\":false,\"items\":[{},{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id9() throws Exception {

        String schema1 = "{\"const\":[1,2,3,4,5]}";
        String schema2 = "{\"additionalItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id10() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "{\"additionalItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id11() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\",false]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id12() throws Exception {

        String schema1 = "{\"const\":[1,null]}";
        String schema2 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]}],\"additionalItems\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id13() throws Exception {

        String schema1 = "{\"const\":[1,\"hello\"]}";
        String schema2 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}],\"additionalItems\":{\"type\":\"boolean\"},\"items\":[{\"type\":\"integer\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id14() throws Exception {

        String schema1 = "{\"const\":[\"x\",2,3]}";
        String schema2 = "{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_additionalItems_id15() throws Exception {

        String schema1 = "{\"const\":[\"x\",\"y\"]}";
        String schema2 = "{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id1() throws Exception {

        String schema1 = "{\"const\":\"aaa\"}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id2() throws Exception {

        String schema1 = "{\"const\":\"abc\"}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id3() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id4() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id5() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id6() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id7() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id8() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_pattern_id9() throws Exception {

        String schema1 = "{\"const\":\"xxaayy\"}";
        String schema2 = "{\"pattern\":\"a+\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_definitions_id1() throws Exception {

        String schema1 = "{\"const\":{\"definitions\":{\"foo\":{\"type\":\"integer\"}}}}";
        String schema2 = "{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_definitions_id2() throws Exception {

        String schema1 = "{\"const\":{\"definitions\":{\"foo\":{\"type\":1}}}}";
        String schema2 = "{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxProperties_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"maxProperties\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxProperties_id2() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"maxProperties\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxProperties_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1,\"baz\":3}}";
        String schema2 = "{\"maxProperties\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxProperties_id4() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"maxProperties\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxProperties_id5() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"maxProperties\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxProperties_id6() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"maxProperties\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxProperties_id7() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"maxProperties\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxProperties_id8() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"maxProperties\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_required_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_required_id2() throws Exception {

        String schema1 = "{\"const\":{\"bar\":1}}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_required_id3() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_required_id4() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_required_id5() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_required_id6() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"properties\":{\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_required_id7() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"properties\":{\"foo\":{}},\"required\":[]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_required_id8() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\\bar\":1,\"foo\\\"bar\":1,\"foo\\rbar\":1,\"foo\\fbar\":1,\"foo\\tbar\":1,\"foo\\nbar\":1}}";
        String schema2 = "{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_required_id9() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\"bar\":\"1\",\"foo\\nbar\":\"1\"}}";
        String schema2 = "{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_id_id1() throws Exception {

        String schema1 = "{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_id_id2() throws Exception {

        String schema1 = "{\"const\":\"a string to match #/definitions/id_in_enum\"}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_id_id3() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id2() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id3() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id4() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id5() throws Exception {

        String schema1 = "{\"const\":\"1\"}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id6() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id7() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id8() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id9() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id10() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id11() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id12() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id13() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id14() throws Exception {

        String schema1 = "{\"const\":\"1\"}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id15() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id16() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id17() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id18() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id19() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id20() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id21() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id22() throws Exception {

        String schema1 = "{\"const\":\"1\"}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id23() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id24() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id25() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id26() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id27() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id28() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id29() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id30() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id31() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id32() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id33() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id34() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id35() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"array\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id36() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"type\":\"array\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id37() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":\"array\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id38() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"array\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id39() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"type\":\"array\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id40() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"type\":\"array\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id41() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":\"array\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id42() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id43() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id44() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id45() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id46() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id47() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id48() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id49() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id50() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id51() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id52() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id53() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id54() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id55() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id56() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id57() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id58() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id59() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id60() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id61() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id62() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id63() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id64() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id65() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id66() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id67() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id68() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id69() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":[\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id70() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"type\":[\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id71() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"type\":[\"array\",\"object\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id72() throws Exception {

        String schema1 = "{\"const\":{\"foo\":123}}";
        String schema2 = "{\"type\":[\"array\",\"object\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id73() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"type\":[\"array\",\"object\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id74() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":[\"array\",\"object\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id75() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":[\"array\",\"object\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id76() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"type\":[\"array\",\"object\",\"null\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id77() throws Exception {

        String schema1 = "{\"const\":{\"foo\":123}}";
        String schema2 = "{\"type\":[\"array\",\"object\",\"null\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id78() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"type\":[\"array\",\"object\",\"null\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id79() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"type\":[\"array\",\"object\",\"null\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_type_id80() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"type\":[\"array\",\"object\",\"null\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_default_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":13}}";
        String schema2 = "{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_default_id2() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_default_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"good\"}}";
        String schema2 = "{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_default_id4() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_default_id5() throws Exception {

        String schema1 = "{\"const\":{\"alpha\":1}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_default_id6() throws Exception {

        String schema1 = "{\"const\":{\"alpha\":5}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_default_id7() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id1() throws Exception {

        String schema1 = "{\"const\":10}";
        String schema2 = "{\"multipleOf\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id2() throws Exception {

        String schema1 = "{\"const\":7}";
        String schema2 = "{\"multipleOf\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id3() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"multipleOf\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id4() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"multipleOf\":1.5}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id5() throws Exception {

        String schema1 = "{\"const\":4.5}";
        String schema2 = "{\"multipleOf\":1.5}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id6() throws Exception {

        String schema1 = "{\"const\":35}";
        String schema2 = "{\"multipleOf\":1.5}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id7() throws Exception {

        String schema1 = "{\"const\":0.0075}";
        String schema2 = "{\"multipleOf\":1.0E-4}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id8() throws Exception {

        String schema1 = "{\"const\":0.00751}";
        String schema2 = "{\"multipleOf\":1.0E-4}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_multipleOf_id9() throws Exception {

        String schema1 = "{\"const\":1.0E308}";
        String schema2 = "{\"multipleOf\":0.123456789,\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id2() throws Exception {

        String schema1 = "{\"const\":{\"foooooo\":2,\"foo\":1}}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id3() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\",\"fooooo\":2}}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id4() throws Exception {

        String schema1 = "{\"const\":{\"foooooo\":\"baz\",\"foo\":\"bar\"}}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id5() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id6() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id7() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id8() throws Exception {

        String schema1 = "{\"const\":{\"a\":21}}";
        String schema2 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id9() throws Exception {

        String schema1 = "{\"const\":{\"aaaa\":18}}";
        String schema2 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id10() throws Exception {

        String schema1 = "{\"const\":{\"a\":21,\"aaaa\":18}}";
        String schema2 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id11() throws Exception {

        String schema1 = "{\"const\":{\"a\":\"bar\"}}";
        String schema2 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id12() throws Exception {

        String schema1 = "{\"const\":{\"aaaa\":31}}";
        String schema2 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id13() throws Exception {

        String schema1 = "{\"const\":{\"aaa\":\"foo\",\"aaaa\":31}}";
        String schema2 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id14() throws Exception {

        String schema1 = "{\"const\":{\"answer 1\":\"42\"}}";
        String schema2 = "{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id15() throws Exception {

        String schema1 = "{\"const\":{\"a31b\":null}}";
        String schema2 = "{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id16() throws Exception {

        String schema1 = "{\"const\":{\"a_x_3\":3}}";
        String schema2 = "{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id17() throws Exception {

        String schema1 = "{\"const\":{\"a_X_3\":3}}";
        String schema2 = "{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id18() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id19() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id20() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id21() throws Exception {

        String schema1 = "{\"const\":{\"foobar\":1}}";
        String schema2 = "{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_patternProperties_id22() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id1() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"baz\"}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"baz\"}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id4() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"quux\",\"foo\":\"baz\"}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id5() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"quux\",\"baz\":null}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id6() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"quux\",\"baz\":null}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id7() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"baz\":null}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id8() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"quux\"}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id9() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id10() throws Exception {

        String schema1 = "{\"const\":25}";
        String schema2 = "{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id11() throws Exception {

        String schema1 = "{\"const\":35}";
        String schema2 = "{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id12() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"allOf\":[true,true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id13() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"allOf\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id14() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"allOf\":[false,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id15() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"allOf\":[{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id16() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"allOf\":[{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id17() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"allOf\":[{},{\"type\":\"number\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id18() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"allOf\":[{},{\"type\":\"number\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id19() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"allOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id20() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"allOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id21() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id22() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id23() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id24() throws Exception {

        String schema1 = "{\"const\":5}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id25() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id26() throws Exception {

        String schema1 = "{\"const\":15}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id27() throws Exception {

        String schema1 = "{\"const\":2}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id28() throws Exception {

        String schema1 = "{\"const\":10}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id29() throws Exception {

        String schema1 = "{\"const\":6}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_allOf_id30() throws Exception {

        String schema1 = "{\"const\":30}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id1() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id2() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id3() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id4() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id5() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id6() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id7() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id8() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id9() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id10() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id11() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id12() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id13() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id14() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id15() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id16() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id17() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id18() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id19() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id20() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id21() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id22() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id23() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id24() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id25() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id26() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id27() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id28() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id29() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id30() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id31() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id32() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id33() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id34() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id35() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id36() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id37() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id38() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id39() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id40() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id41() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id42() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id43() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id44() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id45() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id46() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id47() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id48() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id49() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id50() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id51() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id52() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id53() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_format_id54() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":false}}";
        String schema2 = "{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":{\"foo\":false}}}";
        String schema2 = "{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":false}}";
        String schema2 = "{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id4() throws Exception {

        String schema1 = "{\"const\":{\"foo\":{\"bar\":false}}}";
        String schema2 = "{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id5() throws Exception {

        String schema1 = "{\"const\":{\"bar\":3}}";
        String schema2 = "{\"properties\":{\"bar\":{\"$ref\":\"#/properties/foo\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id6() throws Exception {

        String schema1 = "{\"const\":{\"bar\":true}}";
        String schema2 = "{\"properties\":{\"bar\":{\"$ref\":\"#/properties/foo\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id7() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/items/0\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id8() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\"]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/items/0\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id9() throws Exception {

        String schema1 = "{\"const\":{\"slash\":\"aoeu\"}}";
        String schema2 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id10() throws Exception {

        String schema1 = "{\"const\":{\"tilde\":\"aoeu\"}}";
        String schema2 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id11() throws Exception {

        String schema1 = "{\"const\":{\"percent\":\"aoeu\"}}";
        String schema2 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id12() throws Exception {

        String schema1 = "{\"const\":{\"slash\":123}}";
        String schema2 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id13() throws Exception {

        String schema1 = "{\"const\":{\"tilde\":123}}";
        String schema2 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id14() throws Exception {

        String schema1 = "{\"const\":{\"percent\":123}}";
        String schema2 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id15() throws Exception {

        String schema1 = "{\"const\":5}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#/definitions/c\"}],\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/definitions/a\"},\"c\":{\"$ref\":\"#/definitions/b\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id16() throws Exception {

        String schema1 = "{\"const\":\"a\"}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#/definitions/c\"}],\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/definitions/a\"},\"c\":{\"$ref\":\"#/definitions/b\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id17() throws Exception {

        String schema1 = "{\"const\":{\"foo\":[]}}";
        String schema2 = "{\"definitions\":{\"reffed\":{\"type\":\"array\"}},\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/definitions/reffed\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id18() throws Exception {

        String schema1 = "{\"const\":{\"foo\":[1,2,3]}}";
        String schema2 = "{\"definitions\":{\"reffed\":{\"type\":\"array\"}},\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/definitions/reffed\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_ref_id19() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"string\"}}";
        String schema2 = "{\"definitions\":{\"reffed\":{\"type\":\"array\"}},\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/definitions/reffed\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id20() throws Exception {

        String schema1 = "{\"const\":10}";
        String schema2 = "{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json\",\"$id\":\"http://localhost:1234/sibling_id/\"}],\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id21() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json\",\"$id\":\"http://localhost:1234/sibling_id/\"}],\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id22() throws Exception {

        String schema1 = "{\"const\":{\"minLength\":1}}";
        String schema2 = "{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id23() throws Exception {

        String schema1 = "{\"const\":{\"minLength\":-1}}";
        String schema2 = "{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id24() throws Exception {

        String schema1 = "{\"const\":{\"$ref\":\"a\"}}";
        String schema2 = "{\"properties\":{\"$ref\":{\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id25() throws Exception {

        String schema1 = "{\"const\":{\"$ref\":2}}";
        String schema2 = "{\"properties\":{\"$ref\":{\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id26() throws Exception {

        String schema1 = "{\"const\":{\"$ref\":\"a\"}}";
        String schema2 = "{\"definitions\":{\"is-string\":{\"type\":\"string\"}},\"properties\":{\"$ref\":{\"$ref\":\"#/definitions/is-string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id27() throws Exception {

        String schema1 = "{\"const\":{\"$ref\":2}}";
        String schema2 = "{\"definitions\":{\"is-string\":{\"type\":\"string\"}},\"properties\":{\"$ref\":{\"$ref\":\"#/definitions/is-string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id28() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#/definitions/bool\"}],\"definitions\":{\"bool\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id29() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#/definitions/bool\"}],\"definitions\":{\"bool\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id30() throws Exception {

        String schema1 = "{\"const\":{\"nodes\":[{\"subtree\":{\"nodes\":[{\"value\":1.1},{\"value\":1.2}],\"meta\":\"child\"},\"value\":1},{\"subtree\":{\"nodes\":[{\"value\":2.1},{\"value\":2.2}],\"meta\":\"child\"},\"value\":2}],\"meta\":\"root\"}}";
        String schema2 = "{\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node\"}},\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node\"}},\"meta\":{\"type\":\"string\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id31() throws Exception {

        String schema1 = "{\"const\":{\"nodes\":[{\"subtree\":{\"nodes\":[{\"value\":\"string is invalid\"},{\"value\":1.2}],\"meta\":\"child\"},\"value\":1},{\"subtree\":{\"nodes\":[{\"value\":2.1},{\"value\":2.2}],\"meta\":\"child\"},\"value\":2}],\"meta\":\"root\"}}";
        String schema2 = "{\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node\"}},\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node\"}},\"meta\":{\"type\":\"string\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id32() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\"bar\":1}}";
        String schema2 = "{\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}},\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/definitions/foo%22bar\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id33() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\"bar\":\"1\"}}";
        String schema2 = "{\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}},\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/definitions/foo%22bar\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id34() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#foo\"}],\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id35() throws Exception {

        String schema1 = "{\"const\":\"a\"}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#foo\"}],\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id36() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested.json#foo\"}],\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo\"}},\"$id\":\"nested.json\"}},\"$id\":\"http://localhost:1234/root\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id37() throws Exception {

        String schema1 = "{\"const\":\"a\"}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested.json#foo\"}],\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo\"}},\"$id\":\"nested.json\"}},\"$id\":\"http://localhost:1234/root\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id38() throws Exception {

        String schema1 = "{\"const\":\"this is a string\"}";
        String schema2 = "{\"definitions\":{\"a_string\":{\"type\":\"string\"}},\"enum\":[{\"$ref\":\"#/definitions/a_string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id39() throws Exception {

        String schema1 = "{\"const\":{\"type\":\"string\"}}";
        String schema2 = "{\"definitions\":{\"a_string\":{\"type\":\"string\"}},\"enum\":[{\"$ref\":\"#/definitions/a_string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id40() throws Exception {

        String schema1 = "{\"const\":{\"$ref\":\"#/definitions/a_string\"}}";
        String schema2 = "{\"definitions\":{\"a_string\":{\"type\":\"string\"}},\"enum\":[{\"$ref\":\"#/definitions/a_string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id41() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"a\",\"foo\":{\"bar\":1}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs2.json\"}},\"$id\":\"http://example.com/schema-relative-uri-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id42() throws Exception {

        String schema1 = "{\"const\":{\"bar\":1,\"foo\":{\"bar\":\"a\"}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs2.json\"}},\"$id\":\"http://example.com/schema-relative-uri-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id43() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"a\",\"foo\":{\"bar\":\"a\"}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs2.json\"}},\"$id\":\"http://example.com/schema-relative-uri-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id44() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"a\",\"foo\":{\"bar\":1}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs2.json\"}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id45() throws Exception {

        String schema1 = "{\"const\":{\"bar\":1,\"foo\":{\"bar\":\"a\"}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs2.json\"}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_valid_ref_id46() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"a\",\"foo\":{\"bar\":\"a\"}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs2.json\"}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maximum_id1() throws Exception {

        String schema1 = "{\"const\":2.6}";
        String schema2 = "{\"maximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maximum_id2() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"maximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maximum_id3() throws Exception {

        String schema1 = "{\"const\":3.5}";
        String schema2 = "{\"maximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maximum_id4() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"maximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maximum_id5() throws Exception {

        String schema1 = "{\"const\":299.97}";
        String schema2 = "{\"maximum\":300}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maximum_id6() throws Exception {

        String schema1 = "{\"const\":300}";
        String schema2 = "{\"maximum\":300}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maximum_id7() throws Exception {

        String schema1 = "{\"const\":300}";
        String schema2 = "{\"maximum\":300}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maximum_id8() throws Exception {

        String schema1 = "{\"const\":300.5}";
        String schema2 = "{\"maximum\":300}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minLength_id1() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"minLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minLength_id2() throws Exception {

        String schema1 = "{\"const\":\"fo\"}";
        String schema2 = "{\"minLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minLength_id3() throws Exception {

        String schema1 = "{\"const\":\"f\"}";
        String schema2 = "{\"minLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minLength_id4() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"minLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_minLength_id5() throws Exception {

        String schema1 = "{\"const\":\"💩\"}";
        String schema2 = "{\"minLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxItems_id1() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"maxItems\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxItems_id2() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"maxItems\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxItems_id3() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"maxItems\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_maxItems_id4() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"maxItems\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id1() throws Exception {

        String schema1 = "{\"const\":[3,4,5]}";
        String schema2 = "{\"contains\":{\"minimum\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id2() throws Exception {

        String schema1 = "{\"const\":[3,4,6]}";
        String schema2 = "{\"contains\":{\"minimum\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id3() throws Exception {

        String schema1 = "{\"const\":[3,4,5,6]}";
        String schema2 = "{\"contains\":{\"minimum\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id4() throws Exception {

        String schema1 = "{\"const\":[2,3,4]}";
        String schema2 = "{\"contains\":{\"minimum\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id5() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"contains\":{\"minimum\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id6() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"contains\":{\"minimum\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id7() throws Exception {

        String schema1 = "{\"const\":[3,4,5]}";
        String schema2 = "{\"contains\":{\"const\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id8() throws Exception {

        String schema1 = "{\"const\":[3,4,5,5]}";
        String schema2 = "{\"contains\":{\"const\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id9() throws Exception {

        String schema1 = "{\"const\":[1,2,3,4]}";
        String schema2 = "{\"contains\":{\"const\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id10() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "{\"contains\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id11() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"contains\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id12() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "{\"contains\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id13() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"contains\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id14() throws Exception {

        String schema1 = "{\"const\":\"contains does not apply to strings\"}";
        String schema2 = "{\"contains\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id15() throws Exception {

        String schema1 = "{\"const\":[2,4,8]}";
        String schema2 = "{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id16() throws Exception {

        String schema1 = "{\"const\":[3,6,9]}";
        String schema2 = "{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id17() throws Exception {

        String schema1 = "{\"const\":[6,12]}";
        String schema2 = "{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id18() throws Exception {

        String schema1 = "{\"const\":[1,5]}";
        String schema2 = "{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id19() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "{\"contains\":{\"else\":true,\"if\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_valid_contains_id20() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"contains\":{\"else\":true,\"if\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_uniqueItems_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,2]},{\"const\":[0,false]},{\"const\":[1,true]},{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"baz\"}]},{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":false}}}]},{\"const\":[[\"foo\"],[\"bar\"]]},{\"const\":[1,true]},{\"const\":[0,false]},{\"const\":[[1],[true]]},{\"const\":[[0],[false]]},{\"const\":[[[1],\"foo\"],[[true],\"foo\"]]},{\"const\":[[[0],\"foo\"],[[false],\"foo\"]]},{\"const\":[{},[1],true,null,1,\"{}\"]},{\"const\":[{\"a\":1,\"b\":2},{\"a\":2,\"b\":1}]},{\"const\":[{\"a\":false},{\"a\":0}]},{\"const\":[{\"a\":true},{\"a\":1}]}]}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_uniqueItems_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[false,true]},{\"const\":[true,false]},{\"const\":[false,true,\"foo\",\"bar\"]},{\"const\":[true,false,\"foo\",\"bar\"]}]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_uniqueItems_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[false,true]},{\"const\":[true,false]}]}";
        String schema2 = "{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_uniqueItems_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,2]},{\"const\":[1,1]},{\"const\":[1,1,1]},{\"const\":[0,false]},{\"const\":[1,true]},{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"baz\"}]},{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"bar\"}]},{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":false}}}]},{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":true}}}]},{\"const\":[[\"foo\"],[\"bar\"]]},{\"const\":[[\"foo\"],[\"foo\"]]},{\"const\":[1,true]},{\"const\":[0,false]},{\"const\":[{},[1],true,null,1]},{\"const\":[{},[1],true,null,{},1]}]}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_uniqueItems_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[false,true]},{\"const\":[true,false]},{\"const\":[false,false]},{\"const\":[true,true]},{\"const\":[false,true,\"foo\",\"bar\"]},{\"const\":[true,false,\"foo\",\"bar\"]},{\"const\":[false,true,\"foo\",\"foo\"]},{\"const\":[true,false,\"foo\",\"foo\"]}]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_uniqueItems_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[false,true]},{\"const\":[true,false]},{\"const\":[false,false]},{\"const\":[true,true]}]}";
        String schema2 = "{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_minItems_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,2]},{\"const\":[1]},{\"const\":\"\"}]}";
        String schema2 = "{\"minItems\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_additionalProperties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":1}},{\"const\":[1,2,3]},{\"const\":\"foobarbaz\"},{\"const\":12},{\"const\":{\"vroom\":2,\"foo\":1}}]}";
        String schema2 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_additionalProperties_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":1}},{\"const\":{\"bar\":2,\"quux\":true,\"foo\":1}}]}";
        String schema2 = "{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_dependencies_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{}},{\"const\":{\"foo\":1}},{\"const\":{\"bar\":2,\"foo\":1}},{\"const\":[\"bar\"]},{\"const\":\"foobar\"},{\"const\":12}]}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_dependencies_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{}},{\"const\":{\"bar\":2}},{\"const\":1}]}";
        String schema2 = "{\"dependencies\":{\"bar\":[]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_dependencies_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{}},{\"const\":{\"bar\":2,\"foo\":1}},{\"const\":{\"bar\":2,\"quux\":3,\"foo\":1}}]}";
        String schema2 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_dependencies_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":2,\"foo\":1}},{\"const\":{\"foo\":\"quux\"}}]}";
        String schema2 = "{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_dependencies_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":1}},{\"const\":{}}]}";
        String schema2 = "{\"dependencies\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_dependencies_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\\rbar\":2,\"foo\\nbar\":1}},{\"const\":{\"a\":2,\"b\":3,\"c\":4,\"foo\\tbar\":1}},{\"const\":{\"foo\\\"bar\":2,\"foo'bar\":1}}]}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_exclusiveMinimum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1.2},{\"const\":\"x\"}]}";
        String schema2 = "{\"exclusiveMinimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_const_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}},{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}]}";
        String schema2 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_const_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":0},{\"const\":0}]}";
        String schema2 = "{\"const\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_const_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":1}]}";
        String schema2 = "{\"const\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_const_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":-2},{\"const\":-2}]}";
        String schema2 = "{\"const\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_const_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":9007199254740992},{\"const\":9007199254740992}]}";
        String schema2 = "{\"const\":9007199254740992}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_anyOf_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":2.5},{\"const\":3}]}";
        String schema2 = "{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_anyOf_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":2}},{\"const\":{\"foo\":\"baz\"}},{\"const\":{\"bar\":2,\"foo\":\"baz\"}}]}";
        String schema2 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_anyOf_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"foo\"},{\"const\":123}]}";
        String schema2 = "{\"anyOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_propertyNames_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"f\":{},\"foo\":{}}},{\"const\":{}},{\"const\":[1,2,3,4]},{\"const\":\"foobar\"},{\"const\":12}]}";
        String schema2 = "{\"propertyNames\":{\"maxLength\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_propertyNames_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"aa\":{},\"aaa\":{},\"a\":{}}},{\"const\":{}}]}";
        String schema2 = "{\"propertyNames\":{\"pattern\":\"^a+$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_propertyNames_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":1}},{\"const\":{}}]}";
        String schema2 = "{\"propertyNames\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_boolean_schema_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":\"foo\"},{\"const\":true},{\"const\":false},{\"const\":null},{\"const\":{\"foo\":\"bar\"}},{\"const\":{}},{\"const\":[\"foo\"]},{\"const\":[]}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_not_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":{\"foo\":1}}]}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_items_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,2,3]},{\"const\":{\"foo\":\"bar\"}},{\"const\":{\"0\":\"invalid\",\"length\":1}}]}";
        String schema2 = "{\"items\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_items_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,\"foo\"]},{\"const\":[1]},{\"const\":[1,\"foo\",true]},{\"const\":[]},{\"const\":{\"0\":\"invalid\",\"1\":\"valid\",\"length\":2}}]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_items_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,\"foo\",true]},{\"const\":[]}]}";
        String schema2 = "{\"items\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_items_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1]},{\"const\":[]}]}";
        String schema2 = "{\"items\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_items_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}]]},{\"const\":[[{\"foo\":null}],[{\"foo\":null}]]}]}";
        String schema2 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_enum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[]},{\"const\":{\"foo\":12}}]}";
        String schema2 = "{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_enum_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":null},{\"const\":6}]}";
        String schema2 = "{\"enum\":[6,null]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_enum_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":\"bar\",\"foo\":\"foo\"}},{\"const\":{\"bar\":\"bar\"}}]}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_enum_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"foo\\nbar\"},{\"const\":\"foo\\rbar\"}]}";
        String schema2 = "{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_enum_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":0},{\"const\":0}]}";
        String schema2 = "{\"enum\":[0]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_enum_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":1}]}";
        String schema2 = "{\"enum\":[1]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_minProperties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":2,\"foo\":1}},{\"const\":{\"foo\":1}},{\"const\":[]},{\"const\":\"\"},{\"const\":12}]}";
        String schema2 = "{\"minProperties\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_properties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":\"baz\",\"foo\":1}},{\"const\":{\"quux\":[]}},{\"const\":[]},{\"const\":12}]}";
        String schema2 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_properties_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":[1,2]}},{\"const\":{\"fxo\":[1,2]}},{\"const\":{\"bar\":[]}},{\"const\":{\"quux\":3}}]}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_properties_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{}},{\"const\":{\"foo\":1}}]}";
        String schema2 = "{\"properties\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_maxLength_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"f\"},{\"const\":\"fo\"},{\"const\":100},{\"const\":\"💩💩\"}]}";
        String schema2 = "{\"maxLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_exclusiveMaximum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":2.2},{\"const\":\"x\"}]}";
        String schema2 = "{\"exclusiveMaximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_minimum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":2.6},{\"const\":1.1},{\"const\":\"x\"}]}";
        String schema2 = "{\"minimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_minimum_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":-1},{\"const\":0},{\"const\":-2},{\"const\":-2},{\"const\":\"x\"}]}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_bignum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1.2345678910111214E52},{\"const\":-1.2345678910111214E52}]}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_bignum_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":9.824928374923492E52},{\"const\":-9.824928374923492E52}]}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_unicode_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"Les hivers de mon enfance étaient des saisons longues, longues. Nous vivions en trois lieux: l'école, l'église et la patinoire; mais la vraie vie était sur la patinoire.\"},{\"const\":\"Les hivers de mon enfance étaient des saisons longues, longues. Nous vivions en trois lieux: l'école, l'église et la patinoire; mais la vraie vie était sur la patinoire.\"}]}";
        String schema2 = "{\"pattern\":\"\\\\wcole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_unicode_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"42\"},{\"const\":\"৪২\"}]}";
        String schema2 = "{\"pattern\":\"^\\\\d+$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_unicode_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"l'école\":\"pas de vraie vie\"}},{\"const\":{\"l'école\":\"pas de vraie vie\"}}]}";
        String schema2 = "{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_unicode_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"42\":\"life, the universe, and everything\"}},{\"const\":{\"৪২\":\"khajit has wares if you have coin\"}}]}";
        String schema2 = "{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_non_bmp_regex_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"\"},{\"const\":\"🐲\"},{\"const\":\"🐲🐲\"}]}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_non_bmp_regex_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"\":1}},{\"const\":{\"🐲\":1}},{\"const\":{\"🐲🐲\":1}}]}";
        String schema2 = "{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_json_pointer_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"/foo/bar~0/baz~1/%a\"},{\"const\":\"/foo//bar\"},{\"const\":\"/foo/bar/\"},{\"const\":\"\"},{\"const\":\"/foo\"},{\"const\":\"/foo/0\"},{\"const\":\"/\"},{\"const\":\"/a~1b\"},{\"const\":\"/c%d\"},{\"const\":\"/e^f\"},{\"const\":\"/g|h\"},{\"const\":\"/i\\\\j\"},{\"const\":\"/k\\\"l\"},{\"const\":\"/ \"},{\"const\":\"/m~0n\"},{\"const\":\"/foo/-\"},{\"const\":\"/foo/-/bar\"},{\"const\":\"/~1~0~0~1~1\"},{\"const\":\"/~1.1\"},{\"const\":\"/~0.1\"}]}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_uri_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"http://foo.bar/?baz=qux#quux\"},{\"const\":\"http://foo.com/blah_(wikipedia)_blah#cite-1\"},{\"const\":\"http://foo.bar/?q=Test%20URL-encoded%20stuff\"},{\"const\":\"http://xn--nw2a.xn--j6w193g/\"},{\"const\":\"http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com\"},{\"const\":\"http://223.255.255.254\"},{\"const\":\"ftp://ftp.is.co.za/rfc/rfc1808.txt\"},{\"const\":\"http://www.ietf.org/rfc/rfc2396.txt\"},{\"const\":\"ldap://[2001:db8::7]/c=GB?objectClass?one\"},{\"const\":\"mailto:John.Doe@example.com\"},{\"const\":\"news:comp.infosystems.www.servers.unix\"},{\"const\":\"tel:+1-816-555-1212\"},{\"const\":\"urn:oasis:names:specification:docbook:dtd:xml:4.1.2\"}]}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_uri_template_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"http://example.com/dictionary/{term:1}/{term}\"},{\"const\":\"http://example.com/dictionary\"},{\"const\":\"dictionary/{term:1}/{term}\"}]}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_ipv4_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"192.168.0.1\"},{\"const\":\"87.10.0.1\"}]}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_uri_reference_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"http://foo.bar/?baz=qux#quux\"},{\"const\":\"//foo.bar/?baz=qux#quux\"},{\"const\":\"/abc\"},{\"const\":\"abc\"},{\"const\":\"#fragment\"}]}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_ipv6_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"::1\"},{\"const\":\"::\"},{\"const\":\"::42:ff:1\"},{\"const\":\"d6::\"},{\"const\":\"1::d6:192.168.0.1\"},{\"const\":\"1:2::192.168.0.1\"},{\"const\":\"::ffff:192.168.0.1\"},{\"const\":\"1:2:3:4:5:6:7:8\"},{\"const\":\"1000:1000:1000:1000:1000:1000:255.255.255.255\"}]}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_hostname_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"www.example.com\"},{\"const\":\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.com\"}]}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_email_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"joe.bloggs@example.com\"},{\"const\":\"te~st@example.com\"},{\"const\":\"~test@example.com\"},{\"const\":\"test~@example.com\"},{\"const\":\"te.s.t@example.com\"}]}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_format_date_time_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"1963-06-19T08:30:06.283185Z\"},{\"const\":\"1963-06-19T08:30:06Z\"},{\"const\":\"1937-01-01T12:00:27.87+00:20\"},{\"const\":\"1990-12-31T15:59:50.123-08:00\"},{\"const\":\"1963-06-19t08:30:06.283185z\"}]}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_ecmascript_regex_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"߀\"},{\"const\":\"߀\"}]}";
        String schema2 = "{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_ecmascript_regex_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\" \"},{\"const\":\"\\t\"},{\"const\":\"\\u000b\"},{\"const\":\"\\f\"},{\"const\":\" \"},{\"const\":\"﻿\"},{\"const\":\"\\n\"},{\"const\":\" \"},{\"const\":\" \"}]}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_optional_ecmascript_regex_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"\\u0001\"},{\"const\":\"–\"}]}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_oneOf_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":2.5}]}";
        String schema2 = "{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_oneOf_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":2}},{\"const\":{\"foo\":\"baz\"}}]}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_oneOf_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":2,\"foo\":1}},{\"const\":{\"foo\":1,\"baz\":3}}]}";
        String schema2 = "{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_oneOf_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":8}},{\"const\":{\"foo\":\"foo\"}}]}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_additionalItems_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[]},{\"const\":[1]},{\"const\":[1,2]},{\"const\":[1,2,3]}]}";
        String schema2 = "{\"additionalItems\":false,\"items\":[{},{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_additionalItems_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,2,3,4,5]},{\"const\":{\"foo\":\"bar\"}}]}";
        String schema2 = "{\"additionalItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_pattern_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"aaa\"},{\"const\":true},{\"const\":123},{\"const\":1},{\"const\":{}},{\"const\":[]},{\"const\":null}]}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_maxProperties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":1}},{\"const\":{\"bar\":2,\"foo\":1}},{\"const\":[1,2,3]},{\"const\":\"foobar\"},{\"const\":12}]}";
        String schema2 = "{\"maxProperties\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_required_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":1}},{\"const\":[]},{\"const\":\"\"},{\"const\":12}]}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_id_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},{\"const\":\"a string to match #/definitions/id_in_enum\"}]}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_type_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":1}]}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_type_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":1},{\"const\":1.1}]}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_type_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"foo\"},{\"const\":\"1\"},{\"const\":\"\"}]}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_type_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":true},{\"const\":false}]}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_type_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"const\":\"foo\"}]}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_type_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,2,3]},{\"const\":{\"foo\":123}}]}";
        String schema2 = "{\"type\":[\"array\",\"object\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_type_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1,2,3]},{\"const\":{\"foo\":123}},{\"const\":null}]}";
        String schema2 = "{\"type\":[\"array\",\"object\",\"null\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_default_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":13}},{\"const\":{}}]}";
        String schema2 = "{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_default_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"bar\":\"good\"}},{\"const\":{}}]}";
        String schema2 = "{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_default_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"alpha\":1}},{\"const\":{}}]}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_multipleOf_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":10},{\"const\":\"foo\"}]}";
        String schema2 = "{\"multipleOf\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_multipleOf_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":0},{\"const\":4.5}]}";
        String schema2 = "{\"multipleOf\":1.5}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_patternProperties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":1}},{\"const\":{\"foooooo\":2,\"foo\":1}},{\"const\":[\"foo\"]},{\"const\":\"foo\"},{\"const\":12}]}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_patternProperties_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"a\":21}},{\"const\":{\"aaaa\":18}},{\"const\":{\"a\":21,\"aaaa\":18}}]}";
        String schema2 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_patternProperties_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"answer 1\":\"42\"}},{\"const\":{\"a_x_3\":3}}]}";
        String schema2 = "{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_patternProperties_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":1}},{\"const\":{}}]}";
        String schema2 = "{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unions_format_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":12},{\"const\":13.7},{\"const\":{}},{\"const\":[]},{\"const\":false},{\"const\":null}]}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_ref_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":false}},{\"const\":{\"foo\":{\"foo\":false}}}]}";
        String schema2 = "{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_ref_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"slash\":123}},{\"const\":{\"tilde\":123}},{\"const\":{\"percent\":123}}]}";
        String schema2 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_ref_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":[]}},{\"const\":{\"foo\":[1,2,3]}}]}";
        String schema2 = "{\"definitions\":{\"reffed\":{\"type\":\"array\"}},\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/definitions/reffed\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_maximum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":2.6},{\"const\":3},{\"const\":\"x\"}]}";
        String schema2 = "{\"maximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_maximum_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":299.97},{\"const\":300},{\"const\":300}]}";
        String schema2 = "{\"maximum\":300}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_minLength_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"foo\"},{\"const\":\"fo\"},{\"const\":1}]}";
        String schema2 = "{\"minLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_maxItems_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[1]},{\"const\":[1,2]},{\"const\":\"foobar\"}]}";
        String schema2 = "{\"maxItems\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_contains_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[3,4,5]},{\"const\":[3,4,6]},{\"const\":[3,4,5,6]},{\"const\":{}}]}";
        String schema2 = "{\"contains\":{\"minimum\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    public void draft6_unions_contains_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[3,4,5]},{\"const\":[3,4,5,5]}]}";
        String schema2 = "{\"contains\":{\"const\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must be subschema of schema2", true, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_uniqueItems_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"uniqueItems\":true},{\"not\":{\"uniqueItems\":true}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_uniqueItems_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]},{\"not\":{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_uniqueItems_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]},{\"not\":{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_uniqueItems_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"uniqueItems\":false},{\"not\":{\"uniqueItems\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_uniqueItems_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]},{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_uniqueItems_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]},{\"not\":{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_minItems_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"minItems\":1},{\"not\":{\"minItems\":1}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalProperties_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}},{\"not\":{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalProperties_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false},{\"not\":{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalProperties_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}},{\"not\":{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalProperties_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalProperties\":{\"type\":\"boolean\"}},{\"not\":{\"additionalProperties\":{\"type\":\"boolean\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalProperties_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"bar\":{},\"foo\":{}}},{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalProperties_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"properties\":{\"foo\":{}}}],\"additionalProperties\":{\"type\":\"boolean\"}},{\"not\":{\"allOf\":[{\"properties\":{\"foo\":{}}}],\"additionalProperties\":{\"type\":\"boolean\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_dependencies_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"dependencies\":{\"bar\":[\"foo\"]}},{\"not\":{\"dependencies\":{\"bar\":[\"foo\"]}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_dependencies_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"dependencies\":{\"bar\":[]}},{\"not\":{\"dependencies\":{\"bar\":[]}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_dependencies_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}},{\"not\":{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_dependencies_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}},{\"not\":{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_dependencies_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"dependencies\":{\"bar\":false,\"foo\":true}},{\"not\":{\"dependencies\":{\"bar\":false,\"foo\":true}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_dependencies_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}},{\"not\":{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_exclusiveMinimum_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"exclusiveMinimum\":1.1},{\"not\":{\"exclusiveMinimum\":1.1}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":2},{\"not\":{\"const\":2}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}},{\"not\":{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":[{\"foo\":\"bar\"}]},{\"not\":{\"const\":[{\"foo\":\"bar\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":null},{\"not\":{\"const\":null}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":false},{\"not\":{\"const\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":true},{\"not\":{\"const\":true}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":[false]},{\"not\":{\"const\":[false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":[true]},{\"not\":{\"const\":[true]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id9() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":{\"a\":false}},{\"not\":{\"const\":{\"a\":false}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id10() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":{\"a\":true}},{\"not\":{\"const\":{\"a\":true}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id11() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":0},{\"not\":{\"const\":0}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id12() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":1},{\"not\":{\"const\":1}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id13() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":-2},{\"not\":{\"const\":-2}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_const_id14() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":9007199254740992},{\"not\":{\"const\":9007199254740992}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_const_id15() throws Exception {

        String schema1 = "{\"allOf\":[{\"const\":\"hello\\u0000there\"},{\"not\":{\"const\":\"hello\\u0000there\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_anyOf_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]},{\"not\":{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_anyOf_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"},{\"not\":{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_anyOf_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[true,true]},{\"not\":{\"anyOf\":[true,true]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_anyOf_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[true,false]},{\"not\":{\"anyOf\":[true,false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_anyOf_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[false,false]},{\"not\":{\"anyOf\":[false,false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_anyOf_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]},{\"not\":{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_anyOf_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[{\"type\":\"number\"},{}]},{\"not\":{\"anyOf\":[{\"type\":\"number\"},{}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_anyOf_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]},{\"not\":{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_propertyNames_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"propertyNames\":{\"maxLength\":3}},{\"not\":{\"propertyNames\":{\"maxLength\":3}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_propertyNames_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"propertyNames\":{\"pattern\":\"^a+$\"}},{\"not\":{\"propertyNames\":{\"pattern\":\"^a+$\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_propertyNames_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"propertyNames\":true},{\"not\":{\"propertyNames\":true}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_propertyNames_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"propertyNames\":false},{\"not\":{\"propertyNames\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_unknownKeyword_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[{\"$ref\":\"#/allOf/0/definitions/id_in_unknown0\"},{\"$ref\":\"#/allOf/0/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]}}}},{\"not\":{\"anyOf\":[{\"$ref\":\"#/allOf/1/definitions/id_in_unknown0\"},{\"$ref\":\"#/allOf/1/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier1.json\"}]},\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier1.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier1.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier1.json\"}]}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_boolean_schema_id1() throws Exception {

        String schema1 = "{\"allOf\":[true,{\"not\":true}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_boolean_schema_id2() throws Exception {

        String schema1 = "{\"allOf\":[false,{\"not\":false}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_not_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"not\":{\"type\":\"integer\"}},{\"not\":{\"not\":{\"type\":\"integer\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_not_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"not\":{\"type\":[\"integer\",\"boolean\"]}},{\"not\":{\"not\":{\"type\":[\"integer\",\"boolean\"]}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_not_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}},{\"not\":{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_not_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"foo\":{\"not\":{}}}},{\"not\":{\"properties\":{\"foo\":{\"not\":{}}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_not_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"not\":true},{\"not\":{\"not\":true}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_not_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"not\":false},{\"not\":{\"not\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_items_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":{\"type\":\"integer\"}},{\"not\":{\"items\":{\"type\":\"integer\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_items_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]},{\"not\":{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_items_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":true},{\"not\":{\"items\":true}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_items_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":false},{\"not\":{\"items\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_items_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":[true,false]},{\"not\":{\"items\":[true,false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_items_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/allOf/0/definitions/sub-item\"},{\"$ref\":\"#/allOf/0/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/allOf/0/definitions/item\"},{\"$ref\":\"#/allOf/0/definitions/item\"},{\"$ref\":\"#/allOf/0/definitions/item\"}]},{\"not\":{\"items\":[{\"$ref\":\"#/allOf/1/definitions/item\"},{\"$ref\":\"#/allOf/1/definitions/item\"},{\"$ref\":\"#/allOf/1/definitions/item\"}]},\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/allOf/1/definitions/sub-item\"},{\"$ref\":\"#/allOf/1/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_items_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}},{\"not\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_enum_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[1,2,3]},{\"not\":{\"enum\":[1,2,3]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_enum_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]},{\"not\":{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_enum_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[6,null]},{\"not\":{\"enum\":[6,null]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_enum_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]},{\"not\":{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_enum_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]},{\"not\":{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_enum_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[false]},{\"not\":{\"enum\":[false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_enum_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[true]},{\"not\":{\"enum\":[true]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_enum_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[0]},{\"not\":{\"enum\":[0]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_enum_id9() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[1]},{\"not\":{\"enum\":[1]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_enum_id10() throws Exception {

        String schema1 = "{\"allOf\":[{\"enum\":[\"hello\\u0000there\"]},{\"not\":{\"enum\":[\"hello\\u0000there\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_minProperties_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"minProperties\":1},{\"not\":{\"minProperties\":1}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_properties_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}},{\"not\":{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_properties_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}},{\"not\":{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_properties_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"bar\":false,\"foo\":true}},{\"not\":{\"properties\":{\"bar\":false,\"foo\":true}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_properties_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}},{\"not\":{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_maxLength_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"maxLength\":2},{\"not\":{\"maxLength\":2}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_infinite_loop_detection_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/allOf/0/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/allOf/0/definitions/int\"}}],\"definitions\":{\"int\":{\"type\":\"integer\"}}},{\"not\":{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/allOf/1/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/allOf/1/definitions/int\"}}]},\"definitions\":{\"int\":{\"type\":\"integer\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_exclusiveMaximum_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"exclusiveMaximum\":3},{\"not\":{\"exclusiveMaximum\":3}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_minimum_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"minimum\":1.1},{\"not\":{\"minimum\":1.1}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_minimum_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"minimum\":-2},{\"not\":{\"minimum\":-2}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_bignum_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"integer\"},{\"not\":{\"type\":\"integer\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_bignum_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"number\"},{\"not\":{\"type\":\"number\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_bignum_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"string\"},{\"not\":{\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_bignum_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"maximum\":1.8446744073709552E19},{\"not\":{\"maximum\":1.8446744073709552E19}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_bignum_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"exclusiveMaximum\":9.727837981879871E26},{\"not\":{\"exclusiveMaximum\":9.727837981879871E26}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_bignum_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"minimum\":-1.8446744073709552E19},{\"not\":{\"minimum\":-1.8446744073709552E19}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_bignum_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"exclusiveMinimum\":-9.727837981879871E26},{\"not\":{\"exclusiveMinimum\":-9.727837981879871E26}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_unicode_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"\\\\wcole\"},{\"not\":{\"pattern\":\"\\\\wcole\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_unicode_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"[a-z]cole\"},{\"not\":{\"pattern\":\"[a-z]cole\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_unicode_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\d+$\"},{\"not\":{\"pattern\":\"^\\\\d+$\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_unicode_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"},{\"not\":{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_unicode_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"},{\"not\":{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_unicode_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"},{\"not\":{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_non_bmp_regex_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^🐲*$\"},{\"not\":{\"pattern\":\"^🐲*$\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_non_bmp_regex_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}},{\"not\":{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_json_pointer_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"json-pointer\"},{\"not\":{\"format\":\"json-pointer\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_uri_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"uri\"},{\"not\":{\"format\":\"uri\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_uri_template_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"uri-template\"},{\"not\":{\"format\":\"uri-template\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_ipv4_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"ipv4\"},{\"not\":{\"format\":\"ipv4\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_uri_reference_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"uri-reference\"},{\"not\":{\"format\":\"uri-reference\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_ipv6_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"ipv6\"},{\"not\":{\"format\":\"ipv6\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_hostname_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"hostname\"},{\"not\":{\"format\":\"hostname\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_email_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"email\"},{\"not\":{\"format\":\"email\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_format_date_time_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"date-time\"},{\"not\":{\"format\":\"date-time\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_float_overflow_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"multipleOf\":0.5,\"type\":\"integer\"},{\"not\":{\"multipleOf\":0.5,\"type\":\"integer\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^abc$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^abc$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\t$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\t$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\d$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\d$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\D$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\w$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\w$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\W$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\W$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id9() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\s$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_optional_ecmascript_regex_id10() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^\\\\S$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]},{\"not\":{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"},{\"not\":{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[true,true,true]},{\"not\":{\"oneOf\":[true,true,true]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[true,false,false]},{\"not\":{\"oneOf\":[true,false,false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[true,true,false]},{\"not\":{\"oneOf\":[true,true,false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[false,false,false]},{\"not\":{\"oneOf\":[false,false,false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]},{\"not\":{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[{\"type\":\"number\"},{}]},{\"not\":{\"oneOf\":[{\"type\":\"number\"},{}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id9() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"},{\"not\":{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id10() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]},{\"not\":{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_oneOf_id11() throws Exception {

        String schema1 = "{\"allOf\":[{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]},{\"not\":{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalItems_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]},{\"not\":{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalItems_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalItems\":false,\"items\":{}},{\"not\":{\"additionalItems\":false,\"items\":{}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalItems_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalItems\":false,\"items\":[{},{},{}]},{\"not\":{\"additionalItems\":false,\"items\":[{},{},{}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalItems_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalItems\":false},{\"not\":{\"additionalItems\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalItems_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]},{\"not\":{\"items\":[{\"type\":\"integer\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalItems_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]}],\"additionalItems\":{\"type\":\"boolean\"}},{\"not\":{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]}],\"additionalItems\":{\"type\":\"boolean\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalItems_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}],\"additionalItems\":{\"type\":\"boolean\"},\"items\":[{\"type\":\"integer\"}]},{\"not\":{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}],\"additionalItems\":{\"type\":\"boolean\"},\"items\":[{\"type\":\"integer\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_additionalItems_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]},{\"not\":{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_pattern_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"^a*$\"},{\"not\":{\"pattern\":\"^a*$\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_pattern_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"pattern\":\"a+\"},{\"not\":{\"pattern\":\"a+\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_definitions_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"http://json-schema.org/draft-06/schema#\"},{\"not\":{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_maxProperties_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"maxProperties\":2},{\"not\":{\"maxProperties\":2}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_maxProperties_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"maxProperties\":0},{\"not\":{\"maxProperties\":0}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_required_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]},{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_required_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"foo\":{}}},{\"not\":{\"properties\":{\"foo\":{}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_required_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"foo\":{}},\"required\":[]},{\"not\":{\"properties\":{\"foo\":{}},\"required\":[]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_required_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]},{\"not\":{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_id_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"anyOf\":[{\"$ref\":\"#/allOf/0/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}},{\"not\":{\"anyOf\":[{\"$ref\":\"#/allOf/1/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier1.json\"}]},\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier1.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier1.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier1.json\"}]}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"integer\"},{\"not\":{\"type\":\"integer\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"number\"},{\"not\":{\"type\":\"number\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"string\"},{\"not\":{\"type\":\"string\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"object\"},{\"not\":{\"type\":\"object\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"array\"},{\"not\":{\"type\":\"array\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"boolean\"},{\"not\":{\"type\":\"boolean\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"null\"},{\"not\":{\"type\":\"null\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":[\"integer\",\"string\"]},{\"not\":{\"type\":[\"integer\",\"string\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id9() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":[\"string\"]},{\"not\":{\"type\":[\"string\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id10() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":[\"array\",\"object\"]},{\"not\":{\"type\":[\"array\",\"object\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_type_id11() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":[\"array\",\"object\",\"null\"]},{\"not\":{\"type\":[\"array\",\"object\",\"null\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_default_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}},{\"not\":{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_default_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}},{\"not\":{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_default_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}},{\"not\":{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_multipleOf_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"multipleOf\":2},{\"not\":{\"multipleOf\":2}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_multipleOf_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"multipleOf\":1.5},{\"not\":{\"multipleOf\":1.5}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_multipleOf_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"multipleOf\":1.0E-4},{\"not\":{\"multipleOf\":1.0E-4}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_multipleOf_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"multipleOf\":0.123456789,\"type\":\"integer\"},{\"not\":{\"multipleOf\":0.123456789,\"type\":\"integer\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_patternProperties_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}},{\"not\":{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_patternProperties_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}},{\"not\":{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_patternProperties_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}},{\"not\":{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_patternProperties_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"patternProperties\":{\"f.*\":true,\"b.*\":false}},{\"not\":{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]},{\"not\":{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"not\":{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]},{\"not\":{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[true,true]},{\"not\":{\"allOf\":[true,true]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[true,false]},{\"not\":{\"allOf\":[true,false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[false,false]},{\"not\":{\"allOf\":[false,false]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{}]},{\"not\":{\"allOf\":[{}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{},{}]},{\"not\":{\"allOf\":[{},{}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id9() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{},{\"type\":\"number\"}]},{\"not\":{\"allOf\":[{},{\"type\":\"number\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id10() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"type\":\"number\"},{}]},{\"not\":{\"allOf\":[{\"type\":\"number\"},{}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id11() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]},{\"not\":{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_allOf_id12() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]},{\"not\":{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"email\"},{\"not\":{\"format\":\"email\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"ipv4\"},{\"not\":{\"format\":\"ipv4\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"ipv6\"},{\"not\":{\"format\":\"ipv6\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"hostname\"},{\"not\":{\"format\":\"hostname\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"date-time\"},{\"not\":{\"format\":\"date-time\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"json-pointer\"},{\"not\":{\"format\":\"json-pointer\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"uri\"},{\"not\":{\"format\":\"uri\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"uri-reference\"},{\"not\":{\"format\":\"uri-reference\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_format_id9() throws Exception {

        String schema1 = "{\"allOf\":[{\"format\":\"uri-template\"},{\"not\":{\"format\":\"uri-template\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_ref_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#/allOf/0\"}}},{\"not\":{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#/allOf/1/not\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_ref_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"bar\":{\"$ref\":\"#/allOf/0/properties/foo\"},\"foo\":{\"type\":\"integer\"}}},{\"not\":{\"properties\":{\"bar\":{\"$ref\":\"#/allOf/1/not/properties/foo\"},\"foo\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_ref_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/allOf/0/items/0\"}]},{\"not\":{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/allOf/1/not/items/0\"}]}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_ref_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/allOf/0/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/allOf/0/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/allOf/0/definitions/percent%25field\"}}},{\"not\":{\"properties\":{\"slash\":{\"$ref\":\"#/allOf/1/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/allOf/1/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/allOf/1/definitions/percent%25field\"}}},\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_ref_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"$ref\":\"#/allOf/0/definitions/c\"}],\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/allOf/0/definitions/a\"},\"c\":{\"$ref\":\"#/allOf/0/definitions/b\"}}},{\"not\":{\"allOf\":[{\"$ref\":\"#/allOf/1/definitions/c\"}]},\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/allOf/1/definitions/a\"},\"c\":{\"$ref\":\"#/allOf/1/definitions/b\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_ref_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"definitions\":{\"reffed\":{\"type\":\"array\"}},\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/allOf/0/definitions/reffed\"}}},{\"not\":{\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/allOf/1/definitions/reffed\"}}},\"definitions\":{\"reffed\":{\"type\":\"array\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json\",\"$id\":\"http://localhost:1234/sibling_id/\"}],\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/\"},{\"not\":{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json1\",\"$id\":\"http://localhost:1234/sibling_id/1\"}]},\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo1.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo1.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/1\"}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id8() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"http://json-schema.org/draft-06/schema#\"},{\"not\":{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id9() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"$ref\":{\"type\":\"string\"}}},{\"not\":{\"properties\":{\"$ref\":{\"type\":\"string\"}}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id10() throws Exception {

        String schema1 = "{\"allOf\":[{\"definitions\":{\"is-string\":{\"type\":\"string\"}},\"properties\":{\"$ref\":{\"$ref\":\"#/allOf/0/definitions/is-string\"}}},{\"not\":{\"properties\":{\"$ref\":{\"$ref\":\"#/allOf/1/definitions/is-string\"}}},\"definitions\":{\"is-string\":{\"type\":\"string\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id11() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"$ref\":\"#/allOf/0/definitions/bool\"}],\"definitions\":{\"bool\":true}},{\"not\":{\"allOf\":[{\"$ref\":\"#/allOf/1/definitions/bool\"}]},\"definitions\":{\"bool\":true}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id12() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"$ref\":\"#/allOf/0/definitions/bool\"}],\"definitions\":{\"bool\":false}},{\"not\":{\"allOf\":[{\"$ref\":\"#/allOf/1/definitions/bool\"}]},\"definitions\":{\"bool\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id13() throws Exception {

        String schema1 = "{\"allOf\":[{\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node\"}},\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node\"}},\"meta\":{\"type\":\"string\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree\"},{\"not\":{\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node1\"}},\"meta\":{\"type\":\"string\"}}},\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree1\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node1\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree1\"}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id14() throws Exception {

        String schema1 = "{\"allOf\":[{\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}},\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/allOf/0/definitions/foo%22bar\"}}},{\"not\":{\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/allOf/1/definitions/foo%22bar\"}}},\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id15() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"$ref\":\"#foo\"}],\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo\"}}},{\"not\":{\"allOf\":[{\"$ref\":\"#foo1\"}]},\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo1\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id16() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested.json#foo\"}],\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo\"}},\"$id\":\"nested.json\"}},\"$id\":\"http://localhost:1234/root\"},{\"not\":{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested1.json#foo1\"}]},\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo1\"}},\"$id\":\"nested1.json\"}},\"$id\":\"http://localhost:1234/root1\"}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id17() throws Exception {

        String schema1 = "{\"allOf\":[{\"definitions\":{\"a_string\":{\"type\":\"string\"}},\"enum\":[{\"$ref\":\"#/allOf/0/definitions/a_string\"}]},{\"not\":{\"enum\":[{\"$ref\":\"#/allOf/1/definitions/a_string\"}]},\"definitions\":{\"a_string\":{\"type\":\"string\"}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id18() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/allOf/0/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs2.json\"}},\"$id\":\"http://example.com/schema-relative-uri-defs1.json\"},{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json1\"}],\"not\":{\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/allOf/1/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs21.json\"}}},\"$id\":\"http://example.com/schema-relative-uri-defs11.json\"}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_unsatisfiable_ref_id19() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/allOf/0/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs2.json\"}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs1.json\"},{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json1\"}],\"not\":{\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/allOf/1/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs21.json\"}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs11.json\"}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_maximum_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"maximum\":3},{\"not\":{\"maximum\":3}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_maximum_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"maximum\":300},{\"not\":{\"maximum\":300}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_minLength_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"minLength\":2},{\"not\":{\"minLength\":2}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_maxItems_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"maxItems\":2},{\"not\":{\"maxItems\":2}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_contains_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"contains\":{\"minimum\":5}},{\"not\":{\"contains\":{\"minimum\":5}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_contains_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"contains\":{\"const\":5}},{\"not\":{\"contains\":{\"const\":5}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_contains_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"contains\":true},{\"not\":{\"contains\":true}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_contains_id4() throws Exception {

        String schema1 = "{\"allOf\":[{\"contains\":false},{\"not\":{\"contains\":false}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_contains_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}},{\"not\":{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_unsatisfiable_contains_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"contains\":{\"else\":true,\"if\":false}},{\"not\":{\"contains\":{\"else\":true,\"if\":false}}}]}";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id1() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id2() throws Exception {

        String schema1 = "{\"const\":[0,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id3() throws Exception {

        String schema1 = "{\"const\":[1,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id4() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"baz\"}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id5() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":false}}}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id6() throws Exception {

        String schema1 = "{\"const\":[[\"foo\"],[\"bar\"]]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id7() throws Exception {

        String schema1 = "{\"const\":[1,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id8() throws Exception {

        String schema1 = "{\"const\":[0,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id9() throws Exception {

        String schema1 = "{\"const\":[[1],[true]]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id10() throws Exception {

        String schema1 = "{\"const\":[[0],[false]]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id11() throws Exception {

        String schema1 = "{\"const\":[[[1],\"foo\"],[[true],\"foo\"]]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id12() throws Exception {

        String schema1 = "{\"const\":[[[0],\"foo\"],[[false],\"foo\"]]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id13() throws Exception {

        String schema1 = "{\"const\":[{},[1],true,null,1,\"{}\"]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id14() throws Exception {

        String schema1 = "{\"const\":[{\"a\":1,\"b\":2},{\"a\":2,\"b\":1}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id15() throws Exception {

        String schema1 = "{\"const\":[{\"a\":false},{\"a\":0}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id16() throws Exception {

        String schema1 = "{\"const\":[{\"a\":true},{\"a\":1}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id17() throws Exception {

        String schema1 = "{\"const\":[false,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id18() throws Exception {

        String schema1 = "{\"const\":[true,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id19() throws Exception {

        String schema1 = "{\"const\":[false,true,\"foo\",\"bar\"]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id20() throws Exception {

        String schema1 = "{\"const\":[true,false,\"foo\",\"bar\"]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id21() throws Exception {

        String schema1 = "{\"const\":[false,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id22() throws Exception {

        String schema1 = "{\"const\":[true,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id23() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id24() throws Exception {

        String schema1 = "{\"const\":[1,1]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id25() throws Exception {

        String schema1 = "{\"const\":[1,1,1]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id26() throws Exception {

        String schema1 = "{\"const\":[0,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id27() throws Exception {

        String schema1 = "{\"const\":[1,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id28() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"baz\"}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id29() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"},{\"foo\":\"bar\"}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id30() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":false}}}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id31() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":{\"bar\":{\"baz\":true}}},{\"foo\":{\"bar\":{\"baz\":true}}}]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id32() throws Exception {

        String schema1 = "{\"const\":[[\"foo\"],[\"bar\"]]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id33() throws Exception {

        String schema1 = "{\"const\":[[\"foo\"],[\"foo\"]]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id34() throws Exception {

        String schema1 = "{\"const\":[1,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id35() throws Exception {

        String schema1 = "{\"const\":[0,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id36() throws Exception {

        String schema1 = "{\"const\":[{},[1],true,null,1]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id37() throws Exception {

        String schema1 = "{\"const\":[{},[1],true,null,{},1]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id38() throws Exception {

        String schema1 = "{\"const\":[false,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id39() throws Exception {

        String schema1 = "{\"const\":[true,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id40() throws Exception {

        String schema1 = "{\"const\":[false,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id41() throws Exception {

        String schema1 = "{\"const\":[true,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id42() throws Exception {

        String schema1 = "{\"const\":[false,true,\"foo\",\"bar\"]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id43() throws Exception {

        String schema1 = "{\"const\":[true,false,\"foo\",\"bar\"]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id44() throws Exception {

        String schema1 = "{\"const\":[false,true,\"foo\",\"foo\"]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id45() throws Exception {

        String schema1 = "{\"const\":[true,false,\"foo\",\"foo\"]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id46() throws Exception {

        String schema1 = "{\"const\":[false,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id47() throws Exception {

        String schema1 = "{\"const\":[true,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id48() throws Exception {

        String schema1 = "{\"const\":[false,false]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_uniqueItems_id49() throws Exception {

        String schema1 = "{\"const\":[true,true]}";
        String schema2 = "{\"not\":{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minItems_id1() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"not\":{\"minItems\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minItems_id2() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"not\":{\"minItems\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minItems_id3() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"not\":{\"minItems\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id2() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id3() throws Exception {

        String schema1 = "{\"const\":\"foobarbaz\"}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id4() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id5() throws Exception {

        String schema1 = "{\"const\":{\"vroom\":2,\"foo\":1}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id6() throws Exception {

        String schema1 = "{\"const\":{\"ármányos\":2}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id7() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id8() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"quux\":true,\"foo\":1}}";
        String schema2 = "{\"not\":{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id9() throws Exception {

        String schema1 = "{\"const\":{\"foo\":true}}";
        String schema2 = "{\"not\":{\"additionalProperties\":{\"type\":\"boolean\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalProperties_id10() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"quux\":true,\"foo\":1}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id1() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[\"foo\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[\"foo\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[\"foo\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id4() throws Exception {

        String schema1 = "{\"const\":[\"bar\"]}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[\"foo\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id5() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[\"foo\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id6() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[\"foo\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id7() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id8() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id9() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":[]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id10() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id11() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id12() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"quux\":3,\"foo\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id13() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id14() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"quux\"}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id15() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":false,\"foo\":true}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id16() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"bar\":false,\"foo\":true}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id17() throws Exception {

        String schema1 = "{\"const\":{\"foo\\rbar\":2,\"foo\\nbar\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id18() throws Exception {

        String schema1 = "{\"const\":{\"a\":2,\"b\":3,\"c\":4,\"foo\\tbar\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_dependencies_id19() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\"bar\":2,\"foo'bar\":1}}";
        String schema2 = "{\"not\":{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_exclusiveMinimum_id1() throws Exception {

        String schema1 = "{\"const\":1.2}";
        String schema2 = "{\"not\":{\"exclusiveMinimum\":1.1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_exclusiveMinimum_id2() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"not\":{\"exclusiveMinimum\":1.1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id1() throws Exception {

        String schema1 = "{\"const\":2}";
        String schema2 = "{\"not\":{\"const\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        String schema2 = "{\"not\":{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id3() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        String schema2 = "{\"not\":{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id4() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"}]}";
        String schema2 = "{\"not\":{\"const\":[{\"foo\":\"bar\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id5() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"const\":null}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id6() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"const\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id7() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"not\":{\"const\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id8() throws Exception {

        String schema1 = "{\"const\":[false]}";
        String schema2 = "{\"not\":{\"const\":[false]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id9() throws Exception {

        String schema1 = "{\"const\":[true]}";
        String schema2 = "{\"not\":{\"const\":[true]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id10() throws Exception {

        String schema1 = "{\"const\":{\"a\":false}}";
        String schema2 = "{\"not\":{\"const\":{\"a\":false}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id11() throws Exception {

        String schema1 = "{\"const\":{\"a\":true}}";
        String schema2 = "{\"not\":{\"const\":{\"a\":true}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id12() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"not\":{\"const\":0}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id13() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"not\":{\"const\":0}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id14() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"const\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id15() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"const\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id16() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"not\":{\"const\":-2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id17() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"not\":{\"const\":-2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id18() throws Exception {

        String schema1 = "{\"const\":9007199254740992}";
        String schema2 = "{\"not\":{\"const\":9007199254740992}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_const_id19() throws Exception {

        String schema1 = "{\"const\":9007199254740992}";
        String schema2 = "{\"not\":{\"const\":9007199254740992}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_const_id20() throws Exception {

        String schema1 = "{\"const\":\"hello\\u0000there\"}";
        String schema2 = "{\"not\":{\"const\":\"hello\\u0000there\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id2() throws Exception {

        String schema1 = "{\"const\":2.5}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id3() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id4() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id5() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"anyOf\":[true,true]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id6() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"anyOf\":[true,false]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id7() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id8() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"baz\"}}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id9() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"baz\"}}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id10() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"type\":\"number\"},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id11() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"type\":\"number\"},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id12() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_anyOf_id13() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id1() throws Exception {

        String schema1 = "{\"const\":{\"f\":{},\"foo\":{}}}";
        String schema2 = "{\"not\":{\"propertyNames\":{\"maxLength\":3}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id2() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"propertyNames\":{\"maxLength\":3}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id3() throws Exception {

        String schema1 = "{\"const\":[1,2,3,4]}";
        String schema2 = "{\"not\":{\"propertyNames\":{\"maxLength\":3}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id4() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"not\":{\"propertyNames\":{\"maxLength\":3}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id5() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"propertyNames\":{\"maxLength\":3}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id6() throws Exception {

        String schema1 = "{\"const\":{\"aa\":{},\"aaa\":{},\"a\":{}}}";
        String schema2 = "{\"not\":{\"propertyNames\":{\"pattern\":\"^a+$\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id7() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"propertyNames\":{\"pattern\":\"^a+$\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id8() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"propertyNames\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id9() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"propertyNames\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_propertyNames_id10() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"propertyNames\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_unknownKeyword_id1() throws Exception {

        String schema1 = "{\"const\":\"a string\"}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_unknown0\"},{\"$ref\":\"#/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]},\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id2() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id3() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id4() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id5() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id6() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id7() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id8() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_boolean_schema_id9() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_not_id1() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"not\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_not_id2() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"not\":{\"type\":[\"integer\",\"boolean\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_not_id3() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_not_id4() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_not_id5() throws Exception {

        String schema1 = "{\"const\":{\"bar\":1,\"baz\":2}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\":{\"not\":{}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_not_id6() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"not\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id1() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"not\":{\"items\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "{\"not\":{\"items\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id3() throws Exception {

        String schema1 = "{\"const\":{\"0\":\"invalid\",\"length\":1}}";
        String schema2 = "{\"not\":{\"items\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id4() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\"]}";
        String schema2 = "{\"not\":{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id5() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"not\":{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id6() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\",true]}";
        String schema2 = "{\"not\":{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id7() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id8() throws Exception {

        String schema1 = "{\"const\":{\"0\":\"invalid\",\"1\":\"valid\",\"length\":2}}";
        String schema2 = "{\"not\":{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id9() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\",true]}";
        String schema2 = "{\"not\":{\"items\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id10() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"items\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id11() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"items\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id12() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"not\":{\"items\":[true,false]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id13() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"items\":[true,false]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id14() throws Exception {

        String schema1 = "{\"const\":[[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}],[{\"foo\":null},{\"foo\":null}]]}";
        String schema2 = "{\"not\":{\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]},\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id15() throws Exception {

        String schema1 = "{\"const\":[[{\"foo\":null}],[{\"foo\":null}]]}";
        String schema2 = "{\"not\":{\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]},\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_items_id16() throws Exception {

        String schema1 = "{\"const\":[[[[1]],[[2],[3]]],[[[4],[5],[6]]]]}";
        String schema2 = "{\"not\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_enum_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"enum\":[1,2,3]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_enum_id2() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_enum_id3() throws Exception {

        String schema1 = "{\"const\":{\"foo\":12}}";
        String schema2 = "{\"not\":{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_enum_id4() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"enum\":[6,null]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_enum_id5() throws Exception {

        String schema1 = "{\"const\":6}";
        String schema2 = "{\"not\":{\"enum\":[6,null]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_enum_id6() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"bar\",\"foo\":\"foo\"}}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_enum_id7() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"bar\"}}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id8() throws Exception {

        String schema1 = "{\"const\":\"foo\\nbar\"}";
        String schema2 = "{\"not\":{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id9() throws Exception {

        String schema1 = "{\"const\":\"foo\\rbar\"}";
        String schema2 = "{\"not\":{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id10() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"enum\":[false]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id11() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"not\":{\"enum\":[true]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id12() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"not\":{\"enum\":[0]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id13() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"not\":{\"enum\":[0]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id14() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"enum\":[1]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id15() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"enum\":[1]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_enum_id16() throws Exception {

        String schema1 = "{\"const\":\"hello\\u0000there\"}";
        String schema2 = "{\"not\":{\"enum\":[\"hello\\u0000there\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minProperties_id1() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"not\":{\"minProperties\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minProperties_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"minProperties\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minProperties_id3() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"minProperties\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minProperties_id4() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"not\":{\"minProperties\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minProperties_id5() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"minProperties\":1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id1() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"baz\",\"foo\":1}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id2() throws Exception {

        String schema1 = "{\"const\":{\"quux\":[]}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id3() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id4() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id5() throws Exception {

        String schema1 = "{\"const\":{\"foo\":[1,2]}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id6() throws Exception {

        String schema1 = "{\"const\":{\"fxo\":[1,2]}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id7() throws Exception {

        String schema1 = "{\"const\":{\"bar\":[]}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id8() throws Exception {

        String schema1 = "{\"const\":{\"quux\":3}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id9() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":false,\"foo\":true}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_properties_id10() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":false,\"foo\":true}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_properties_id11() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\\bar\":1,\"foo\\\"bar\":1,\"foo\\rbar\":1,\"foo\\fbar\":1,\"foo\\tbar\":1,\"foo\\nbar\":1}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxLength_id1() throws Exception {

        String schema1 = "{\"const\":\"f\"}";
        String schema2 = "{\"not\":{\"maxLength\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxLength_id2() throws Exception {

        String schema1 = "{\"const\":\"fo\"}";
        String schema2 = "{\"not\":{\"maxLength\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxLength_id3() throws Exception {

        String schema1 = "{\"const\":100}";
        String schema2 = "{\"not\":{\"maxLength\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxLength_id4() throws Exception {

        String schema1 = "{\"const\":\"💩💩\"}";
        String schema2 = "{\"not\":{\"maxLength\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_infinite_loop_detection_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/definitions/int\"}}]},\"definitions\":{\"int\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_exclusiveMaximum_id1() throws Exception {

        String schema1 = "{\"const\":2.2}";
        String schema2 = "{\"not\":{\"exclusiveMaximum\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_exclusiveMaximum_id2() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"not\":{\"exclusiveMaximum\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minimum_id1() throws Exception {

        String schema1 = "{\"const\":2.6}";
        String schema2 = "{\"not\":{\"minimum\":1.1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minimum_id2() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"not\":{\"minimum\":1.1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minimum_id3() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"not\":{\"minimum\":1.1}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minimum_id4() throws Exception {

        String schema1 = "{\"const\":-1}";
        String schema2 = "{\"not\":{\"minimum\":-2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minimum_id5() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"not\":{\"minimum\":-2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minimum_id6() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"not\":{\"minimum\":-2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minimum_id7() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"not\":{\"minimum\":-2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minimum_id8() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"not\":{\"minimum\":-2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_bignum_id1() throws Exception {

        String schema1 = "{\"const\":1.2345678910111214E52}";
        String schema2 = "{\"not\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_bignum_id2() throws Exception {

        String schema1 = "{\"const\":-1.2345678910111214E52}";
        String schema2 = "{\"not\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_bignum_id3() throws Exception {

        String schema1 = "{\"const\":9.824928374923492E52}";
        String schema2 = "{\"not\":{\"type\":\"number\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_bignum_id4() throws Exception {

        String schema1 = "{\"const\":-9.824928374923492E52}";
        String schema2 = "{\"not\":{\"type\":\"number\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_bignum_id5() throws Exception {

        String schema1 = "{\"const\":1.8446744073709552E19}";
        String schema2 = "{\"not\":{\"maximum\":1.8446744073709552E19}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_bignum_id6() throws Exception {

        String schema1 = "{\"const\":-1.8446744073709552E19}";
        String schema2 = "{\"not\":{\"minimum\":-1.8446744073709552E19}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id1() throws Exception {

        String schema1 = "{\"const\":\"Les hivers de mon enfance étaient des saisons longues, longues. Nous vivions en trois lieux: l'école, l'église et la patinoire; mais la vraie vie était sur la patinoire.\"}";
        String schema2 = "{\"not\":{\"pattern\":\"\\\\wcole\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id2() throws Exception {

        String schema1 = "{\"const\":\"Les hivers de mon enfance étaient des saisons longues, longues. Nous vivions en trois lieux: l'école, l'église et la patinoire; mais la vraie vie était sur la patinoire.\"}";
        String schema2 = "{\"not\":{\"pattern\":\"\\\\wcole\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id3() throws Exception {

        String schema1 = "{\"const\":\"Les hivers de mon enfance etaient des saisons longues, longues. Nous vivions en trois lieux: l'ecole, l'eglise et la patinoire; mais la vraie vie etait sur la patinoire.\"}";
        String schema2 = "{\"not\":{\"pattern\":\"[a-z]cole\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id4() throws Exception {

        String schema1 = "{\"const\":\"42\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\d+$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id5() throws Exception {

        String schema1 = "{\"const\":\"৪২\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\d+$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id6() throws Exception {

        String schema1 = "{\"const\":{\"l'école\":\"pas de vraie vie\"}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id7() throws Exception {

        String schema1 = "{\"const\":{\"l'école\":\"pas de vraie vie\"}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id8() throws Exception {

        String schema1 = "{\"const\":{\"l'ecole\":\"pas de vraie vie\"}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id9() throws Exception {

        String schema1 = "{\"const\":{\"42\":\"life, the universe, and everything\"}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_unicode_id10() throws Exception {

        String schema1 = "{\"const\":{\"৪২\":\"khajit has wares if you have coin\"}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_non_bmp_regex_id1() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^🐲*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_non_bmp_regex_id2() throws Exception {

        String schema1 = "{\"const\":\"🐲\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^🐲*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_non_bmp_regex_id3() throws Exception {

        String schema1 = "{\"const\":\"🐲🐲\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^🐲*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_non_bmp_regex_id4() throws Exception {

        String schema1 = "{\"const\":{\"\":1}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_non_bmp_regex_id5() throws Exception {

        String schema1 = "{\"const\":{\"🐲\":1}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_non_bmp_regex_id6() throws Exception {

        String schema1 = "{\"const\":{\"🐲🐲\":1}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id1() throws Exception {

        String schema1 = "{\"const\":\"/foo/bar~0/baz~1/%a\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id2() throws Exception {

        String schema1 = "{\"const\":\"/foo//bar\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id3() throws Exception {

        String schema1 = "{\"const\":\"/foo/bar/\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id4() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id5() throws Exception {

        String schema1 = "{\"const\":\"/foo\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id6() throws Exception {

        String schema1 = "{\"const\":\"/foo/0\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id7() throws Exception {

        String schema1 = "{\"const\":\"/\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id8() throws Exception {

        String schema1 = "{\"const\":\"/a~1b\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id9() throws Exception {

        String schema1 = "{\"const\":\"/c%d\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id10() throws Exception {

        String schema1 = "{\"const\":\"/e^f\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id11() throws Exception {

        String schema1 = "{\"const\":\"/g|h\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id12() throws Exception {

        String schema1 = "{\"const\":\"/i\\\\j\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id13() throws Exception {

        String schema1 = "{\"const\":\"/k\\\"l\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id14() throws Exception {

        String schema1 = "{\"const\":\"/ \"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id15() throws Exception {

        String schema1 = "{\"const\":\"/m~0n\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id16() throws Exception {

        String schema1 = "{\"const\":\"/foo/-\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id17() throws Exception {

        String schema1 = "{\"const\":\"/foo/-/bar\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id18() throws Exception {

        String schema1 = "{\"const\":\"/~1~0~0~1~1\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id19() throws Exception {

        String schema1 = "{\"const\":\"/~1.1\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_json_pointer_id20() throws Exception {

        String schema1 = "{\"const\":\"/~0.1\"}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id1() throws Exception {

        String schema1 = "{\"const\":\"http://foo.bar/?baz=qux#quux\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id2() throws Exception {

        String schema1 = "{\"const\":\"http://foo.com/blah_(wikipedia)_blah#cite-1\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id3() throws Exception {

        String schema1 = "{\"const\":\"http://foo.bar/?q=Test%20URL-encoded%20stuff\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id4() throws Exception {

        String schema1 = "{\"const\":\"http://xn--nw2a.xn--j6w193g/\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id5() throws Exception {

        String schema1 = "{\"const\":\"http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id6() throws Exception {

        String schema1 = "{\"const\":\"http://223.255.255.254\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id7() throws Exception {

        String schema1 = "{\"const\":\"ftp://ftp.is.co.za/rfc/rfc1808.txt\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id8() throws Exception {

        String schema1 = "{\"const\":\"http://www.ietf.org/rfc/rfc2396.txt\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id9() throws Exception {

        String schema1 = "{\"const\":\"ldap://[2001:db8::7]/c=GB?objectClass?one\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id10() throws Exception {

        String schema1 = "{\"const\":\"mailto:John.Doe@example.com\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id11() throws Exception {

        String schema1 = "{\"const\":\"news:comp.infosystems.www.servers.unix\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id12() throws Exception {

        String schema1 = "{\"const\":\"tel:+1-816-555-1212\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_id13() throws Exception {

        String schema1 = "{\"const\":\"urn:oasis:names:specification:docbook:dtd:xml:4.1.2\"}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_template_id1() throws Exception {

        String schema1 = "{\"const\":\"http://example.com/dictionary/{term:1}/{term}\"}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_template_id2() throws Exception {

        String schema1 = "{\"const\":\"http://example.com/dictionary\"}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_template_id3() throws Exception {

        String schema1 = "{\"const\":\"dictionary/{term:1}/{term}\"}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv4_id1() throws Exception {

        String schema1 = "{\"const\":\"192.168.0.1\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv4\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv4_id2() throws Exception {

        String schema1 = "{\"const\":\"87.10.0.1\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv4\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_reference_id1() throws Exception {

        String schema1 = "{\"const\":\"http://foo.bar/?baz=qux#quux\"}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_reference_id2() throws Exception {

        String schema1 = "{\"const\":\"//foo.bar/?baz=qux#quux\"}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_reference_id3() throws Exception {

        String schema1 = "{\"const\":\"/abc\"}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_reference_id4() throws Exception {

        String schema1 = "{\"const\":\"abc\"}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_uri_reference_id5() throws Exception {

        String schema1 = "{\"const\":\"#fragment\"}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id1() throws Exception {

        String schema1 = "{\"const\":\"::1\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id2() throws Exception {

        String schema1 = "{\"const\":\"::\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id3() throws Exception {

        String schema1 = "{\"const\":\"::42:ff:1\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id4() throws Exception {

        String schema1 = "{\"const\":\"d6::\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id5() throws Exception {

        String schema1 = "{\"const\":\"1::d6:192.168.0.1\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id6() throws Exception {

        String schema1 = "{\"const\":\"1:2::192.168.0.1\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id7() throws Exception {

        String schema1 = "{\"const\":\"::ffff:192.168.0.1\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id8() throws Exception {

        String schema1 = "{\"const\":\"1:2:3:4:5:6:7:8\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_ipv6_id9() throws Exception {

        String schema1 = "{\"const\":\"1000:1000:1000:1000:1000:1000:255.255.255.255\"}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_hostname_id1() throws Exception {

        String schema1 = "{\"const\":\"www.example.com\"}";
        String schema2 = "{\"not\":{\"format\":\"hostname\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_hostname_id2() throws Exception {

        String schema1 = "{\"const\":\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.com\"}";
        String schema2 = "{\"not\":{\"format\":\"hostname\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_email_id1() throws Exception {

        String schema1 = "{\"const\":\"joe.bloggs@example.com\"}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_email_id2() throws Exception {

        String schema1 = "{\"const\":\"te~st@example.com\"}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_email_id3() throws Exception {

        String schema1 = "{\"const\":\"~test@example.com\"}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_email_id4() throws Exception {

        String schema1 = "{\"const\":\"test~@example.com\"}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_email_id5() throws Exception {

        String schema1 = "{\"const\":\"te.s.t@example.com\"}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_date_time_id1() throws Exception {

        String schema1 = "{\"const\":\"1963-06-19T08:30:06.283185Z\"}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_date_time_id2() throws Exception {

        String schema1 = "{\"const\":\"1963-06-19T08:30:06Z\"}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_date_time_id3() throws Exception {

        String schema1 = "{\"const\":\"1937-01-01T12:00:27.87+00:20\"}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_date_time_id4() throws Exception {

        String schema1 = "{\"const\":\"1990-12-31T15:59:50.123-08:00\"}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_format_date_time_id5() throws Exception {

        String schema1 = "{\"const\":\"1963-06-19t08:30:06.283185z\"}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_float_overflow_id1() throws Exception {

        String schema1 = "{\"const\":1.0E308}";
        String schema2 = "{\"not\":{\"multipleOf\":0.5,\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id1() throws Exception {

        String schema1 = "{\"const\":\"abc\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^abc$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id2() throws Exception {

        String schema1 = "{\"const\":\"\\t\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\t$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id3() throws Exception {

        String schema1 = "{\"const\":\"\\u0003\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id4() throws Exception {

        String schema1 = "{\"const\":\"\\u0003\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id5() throws Exception {

        String schema1 = "{\"const\":\"0\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\d$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id6() throws Exception {

        String schema1 = "{\"const\":\"߀\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id7() throws Exception {

        String schema1 = "{\"const\":\"߀\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id8() throws Exception {

        String schema1 = "{\"const\":\"a\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\w$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id9() throws Exception {

        String schema1 = "{\"const\":\"é\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\W$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id10() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id11() throws Exception {

        String schema1 = "{\"const\":\"\\t\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id12() throws Exception {

        String schema1 = "{\"const\":\"\\u000b\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id13() throws Exception {

        String schema1 = "{\"const\":\"\\f\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id14() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id15() throws Exception {

        String schema1 = "{\"const\":\"﻿\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id16() throws Exception {

        String schema1 = "{\"const\":\"\\n\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id17() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id18() throws Exception {

        String schema1 = "{\"const\":\" \"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id19() throws Exception {

        String schema1 = "{\"const\":\"\\u0001\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_optional_ecmascript_regex_id20() throws Exception {

        String schema1 = "{\"const\":\"–\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id2() throws Exception {

        String schema1 = "{\"const\":2.5}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id3() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id4() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"oneOf\":[true,false,false]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id5() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2}}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id6() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"baz\"}}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id7() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"type\":\"number\"},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id8() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id9() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1,\"baz\":3}}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id10() throws Exception {

        String schema1 = "{\"const\":{\"bar\":8}}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id11() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"foo\"}}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_oneOf_id12() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id1() throws Exception {

        String schema1 = "{\"const\":[null,2,3,4]}";
        String schema2 = "{\"not\":{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id2() throws Exception {

        String schema1 = "{\"const\":[1,2,3,4,5]}";
        String schema2 = "{\"not\":{\"additionalItems\":false,\"items\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id3() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"additionalItems\":false,\"items\":[{},{},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id4() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"not\":{\"additionalItems\":false,\"items\":[{},{},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id5() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"not\":{\"additionalItems\":false,\"items\":[{},{},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id6() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"not\":{\"additionalItems\":false,\"items\":[{},{},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id7() throws Exception {

        String schema1 = "{\"const\":[1,2,3,4,5]}";
        String schema2 = "{\"not\":{\"additionalItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id8() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\"}}";
        String schema2 = "{\"not\":{\"additionalItems\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id9() throws Exception {

        String schema1 = "{\"const\":[1,\"foo\",false]}";
        String schema2 = "{\"not\":{\"items\":[{\"type\":\"integer\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id10() throws Exception {

        String schema1 = "{\"const\":[1,null]}";
        String schema2 = "{\"not\":{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]}],\"additionalItems\":{\"type\":\"boolean\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_additionalItems_id11() throws Exception {

        String schema1 = "{\"const\":[\"x\",2,3]}";
        String schema2 = "{\"not\":{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_pattern_id1() throws Exception {

        String schema1 = "{\"const\":\"aaa\"}";
        String schema2 = "{\"not\":{\"pattern\":\"^a*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_pattern_id2() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"not\":{\"pattern\":\"^a*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_pattern_id3() throws Exception {

        String schema1 = "{\"const\":123}";
        String schema2 = "{\"not\":{\"pattern\":\"^a*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_pattern_id4() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"pattern\":\"^a*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_pattern_id5() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"pattern\":\"^a*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_pattern_id6() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"pattern\":\"^a*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_pattern_id7() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"pattern\":\"^a*$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_pattern_id8() throws Exception {

        String schema1 = "{\"const\":\"xxaayy\"}";
        String schema2 = "{\"not\":{\"pattern\":\"a+\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_definitions_id1() throws Exception {

        String schema1 = "{\"const\":{\"definitions\":{\"foo\":{\"type\":\"integer\"}}}}";
        String schema2 = "{\"not\":{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxProperties_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"maxProperties\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxProperties_id2() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":1}}";
        String schema2 = "{\"not\":{\"maxProperties\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxProperties_id3() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"not\":{\"maxProperties\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxProperties_id4() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"not\":{\"maxProperties\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxProperties_id5() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"maxProperties\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxProperties_id6() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"maxProperties\":0}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_required_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_required_id2() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_required_id3() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_required_id4() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_required_id5() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_required_id6() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\":{}},\"required\":[]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_required_id7() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\\bar\":1,\"foo\\\"bar\":1,\"foo\\rbar\":1,\"foo\\fbar\":1,\"foo\\tbar\":1,\"foo\\nbar\":1}}";
        String schema2 = "{\"not\":{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_id_id1() throws Exception {

        String schema1 = "{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}]},\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_id_id2() throws Exception {

        String schema1 = "{\"const\":\"a string to match #/definitions/id_in_enum\"}";
        String schema2 = "{\"not\":{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}]},\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id1() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id2() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id3() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"type\":\"number\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id4() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"type\":\"number\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id5() throws Exception {

        String schema1 = "{\"const\":1.1}";
        String schema2 = "{\"not\":{\"type\":\"number\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id6() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id7() throws Exception {

        String schema1 = "{\"const\":\"1\"}";
        String schema2 = "{\"not\":{\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id8() throws Exception {

        String schema1 = "{\"const\":\"\"}";
        String schema2 = "{\"not\":{\"type\":\"string\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id9() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"type\":\"object\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id10() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"type\":\"array\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id11() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"not\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id12() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id13() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"type\":\"null\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id14() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"type\":[\"integer\",\"string\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id15() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"type\":[\"integer\",\"string\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id16() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"type\":[\"string\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id17() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"not\":{\"type\":[\"array\",\"object\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id18() throws Exception {

        String schema1 = "{\"const\":{\"foo\":123}}";
        String schema2 = "{\"not\":{\"type\":[\"array\",\"object\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id19() throws Exception {

        String schema1 = "{\"const\":[1,2,3]}";
        String schema2 = "{\"not\":{\"type\":[\"array\",\"object\",\"null\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id20() throws Exception {

        String schema1 = "{\"const\":{\"foo\":123}}";
        String schema2 = "{\"not\":{\"type\":[\"array\",\"object\",\"null\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_type_id21() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"type\":[\"array\",\"object\",\"null\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_default_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":13}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_default_id2() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_default_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"good\"}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_default_id4() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_default_id5() throws Exception {

        String schema1 = "{\"const\":{\"alpha\":1}}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_default_id6() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_multipleOf_id1() throws Exception {

        String schema1 = "{\"const\":10}";
        String schema2 = "{\"not\":{\"multipleOf\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_multipleOf_id2() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"multipleOf\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_multipleOf_id3() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"not\":{\"multipleOf\":1.5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_multipleOf_id4() throws Exception {

        String schema1 = "{\"const\":4.5}";
        String schema2 = "{\"not\":{\"multipleOf\":1.5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_multipleOf_id5() throws Exception {

        String schema1 = "{\"const\":0.0075}";
        String schema2 = "{\"not\":{\"multipleOf\":1.0E-4}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id2() throws Exception {

        String schema1 = "{\"const\":{\"foooooo\":2,\"foo\":1}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id3() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id4() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id5() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id6() throws Exception {

        String schema1 = "{\"const\":{\"a\":21}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id7() throws Exception {

        String schema1 = "{\"const\":{\"aaaa\":18}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id8() throws Exception {

        String schema1 = "{\"const\":{\"a\":21,\"aaaa\":18}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id9() throws Exception {

        String schema1 = "{\"const\":{\"answer 1\":\"42\"}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id10() throws Exception {

        String schema1 = "{\"const\":{\"a_x_3\":3}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id11() throws Exception {

        String schema1 = "{\"const\":{\"foo\":1}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_patternProperties_id12() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id1() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"baz\"}}";
        String schema2 = "{\"not\":{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id2() throws Exception {

        String schema1 = "{\"const\":{\"bar\":2,\"foo\":\"quux\",\"baz\":null}}";
        String schema2 = "{\"not\":{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id3() throws Exception {

        String schema1 = "{\"const\":25}";
        String schema2 = "{\"not\":{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id4() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"allOf\":[true,true]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id5() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"allOf\":[{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id6() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"allOf\":[{},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id7() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"allOf\":[{},{\"type\":\"number\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id8() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"allOf\":[{\"type\":\"number\"},{}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id9() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_allOf_id10() throws Exception {

        String schema1 = "{\"const\":30}";
        String schema2 = "{\"not\":{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id1() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id2() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id3() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id4() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id5() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id6() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"email\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id7() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"ipv4\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id8() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"ipv4\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id9() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"ipv4\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id10() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"ipv4\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id11() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"ipv4\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id12() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"ipv4\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id13() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id14() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id15() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id16() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id17() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id18() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"ipv6\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id19() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"hostname\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id20() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"hostname\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id21() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"hostname\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id22() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"hostname\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id23() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"hostname\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id24() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"hostname\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id25() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id26() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id27() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id28() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id29() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id30() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"date-time\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id31() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id32() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id33() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id34() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id35() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id36() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"json-pointer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id37() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id38() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id39() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id40() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id41() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id42() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"uri\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id43() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id44() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id45() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id46() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id47() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id48() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"uri-reference\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id49() throws Exception {

        String schema1 = "{\"const\":12}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id50() throws Exception {

        String schema1 = "{\"const\":13.7}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id51() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id52() throws Exception {

        String schema1 = "{\"const\":[]}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id53() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_format_id54() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"not\":{\"format\":\"uri-template\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id1() throws Exception {

        String schema1 = "{\"const\":{\"foo\":false}}";
        String schema2 = "{\"not\":{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#/not\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":{\"foo\":false}}}";
        String schema2 = "{\"not\":{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#/not\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id3() throws Exception {

        String schema1 = "{\"const\":{\"bar\":3}}";
        String schema2 = "{\"not\":{\"properties\":{\"bar\":{\"$ref\":\"#/not/properties/foo\"},\"foo\":{\"type\":\"integer\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id4() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"not\":{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/not/items/0\"}]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id5() throws Exception {

        String schema1 = "{\"const\":{\"slash\":123}}";
        String schema2 = "{\"not\":{\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}},\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id6() throws Exception {

        String schema1 = "{\"const\":{\"tilde\":123}}";
        String schema2 = "{\"not\":{\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}},\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id7() throws Exception {

        String schema1 = "{\"const\":{\"percent\":123}}";
        String schema2 = "{\"not\":{\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}},\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id8() throws Exception {

        String schema1 = "{\"const\":5}";
        String schema2 = "{\"not\":{\"allOf\":[{\"$ref\":\"#/definitions/c\"}]},\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/definitions/a\"},\"c\":{\"$ref\":\"#/definitions/b\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id9() throws Exception {

        String schema1 = "{\"const\":{\"foo\":[]}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/definitions/reffed\"}}},\"definitions\":{\"reffed\":{\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_ref_id10() throws Exception {

        String schema1 = "{\"const\":{\"foo\":[1,2,3]}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/definitions/reffed\"}}},\"definitions\":{\"reffed\":{\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id11() throws Exception {

        String schema1 = "{\"const\":10}";
        String schema2 = "{\"not\":{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json\",\"$id\":\"http://localhost:1234/sibling_id/\"}]},\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id12() throws Exception {

        String schema1 = "{\"const\":{\"minLength\":1}}";
        String schema2 = "{\"not\":{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id13() throws Exception {

        String schema1 = "{\"const\":{\"$ref\":\"a\"}}";
        String schema2 = "{\"not\":{\"properties\":{\"$ref\":{\"type\":\"string\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id14() throws Exception {

        String schema1 = "{\"const\":{\"$ref\":\"a\"}}";
        String schema2 = "{\"not\":{\"properties\":{\"$ref\":{\"$ref\":\"#/definitions/is-string\"}}},\"definitions\":{\"is-string\":{\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id15() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"allOf\":[{\"$ref\":\"#/definitions/bool\"}]},\"definitions\":{\"bool\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id16() throws Exception {

        String schema1 = "{\"const\":{\"nodes\":[{\"subtree\":{\"nodes\":[{\"value\":1.1},{\"value\":1.2}],\"meta\":\"child\"},\"value\":1},{\"subtree\":{\"nodes\":[{\"value\":2.1},{\"value\":2.2}],\"meta\":\"child\"},\"value\":2}],\"meta\":\"root\"}}";
        String schema2 = "{\"not\":{\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node\"}},\"meta\":{\"type\":\"string\"}}},\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id17() throws Exception {

        String schema1 = "{\"const\":{\"foo\\\"bar\":1}}";
        String schema2 = "{\"not\":{\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/definitions/foo%22bar\"}}},\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id18() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"allOf\":[{\"$ref\":\"#foo\"}]},\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id19() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested.json#foo\"}]},\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo\"}},\"$id\":\"nested.json\"}},\"$id\":\"http://localhost:1234/root\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id20() throws Exception {

        String schema1 = "{\"const\":{\"$ref\":\"#/definitions/a_string\"}}";
        String schema2 = "{\"not\":{\"enum\":[{\"$ref\":\"#/definitions/a_string\"}]},\"definitions\":{\"a_string\":{\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id21() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"a\",\"foo\":{\"bar\":\"a\"}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json\"}],\"not\":{\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs2.json\"}}},\"$id\":\"http://example.com/schema-relative-uri-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_nonvalid_ref_id22() throws Exception {

        String schema1 = "{\"const\":{\"bar\":\"a\",\"foo\":{\"bar\":\"a\"}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json\"}],\"not\":{\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs2.json\"}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maximum_id1() throws Exception {

        String schema1 = "{\"const\":2.6}";
        String schema2 = "{\"not\":{\"maximum\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maximum_id2() throws Exception {

        String schema1 = "{\"const\":3}";
        String schema2 = "{\"not\":{\"maximum\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maximum_id3() throws Exception {

        String schema1 = "{\"const\":\"x\"}";
        String schema2 = "{\"not\":{\"maximum\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maximum_id4() throws Exception {

        String schema1 = "{\"const\":299.97}";
        String schema2 = "{\"not\":{\"maximum\":300}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maximum_id5() throws Exception {

        String schema1 = "{\"const\":300}";
        String schema2 = "{\"not\":{\"maximum\":300}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maximum_id6() throws Exception {

        String schema1 = "{\"const\":300}";
        String schema2 = "{\"not\":{\"maximum\":300}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minLength_id1() throws Exception {

        String schema1 = "{\"const\":\"foo\"}";
        String schema2 = "{\"not\":{\"minLength\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minLength_id2() throws Exception {

        String schema1 = "{\"const\":\"fo\"}";
        String schema2 = "{\"not\":{\"minLength\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_minLength_id3() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"not\":{\"minLength\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxItems_id1() throws Exception {

        String schema1 = "{\"const\":[1]}";
        String schema2 = "{\"not\":{\"maxItems\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxItems_id2() throws Exception {

        String schema1 = "{\"const\":[1,2]}";
        String schema2 = "{\"not\":{\"maxItems\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_maxItems_id3() throws Exception {

        String schema1 = "{\"const\":\"foobar\"}";
        String schema2 = "{\"not\":{\"maxItems\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id1() throws Exception {

        String schema1 = "{\"const\":[3,4,5]}";
        String schema2 = "{\"not\":{\"contains\":{\"minimum\":5}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id2() throws Exception {

        String schema1 = "{\"const\":[3,4,6]}";
        String schema2 = "{\"not\":{\"contains\":{\"minimum\":5}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id3() throws Exception {

        String schema1 = "{\"const\":[3,4,5,6]}";
        String schema2 = "{\"not\":{\"contains\":{\"minimum\":5}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id4() throws Exception {

        String schema1 = "{\"const\":{}}";
        String schema2 = "{\"not\":{\"contains\":{\"minimum\":5}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id5() throws Exception {

        String schema1 = "{\"const\":[3,4,5]}";
        String schema2 = "{\"not\":{\"contains\":{\"const\":5}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id6() throws Exception {

        String schema1 = "{\"const\":[3,4,5,5]}";
        String schema2 = "{\"not\":{\"contains\":{\"const\":5}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id7() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "{\"not\":{\"contains\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id8() throws Exception {

        String schema1 = "{\"const\":\"contains does not apply to strings\"}";
        String schema2 = "{\"not\":{\"contains\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id9() throws Exception {

        String schema1 = "{\"const\":[6,12]}";
        String schema2 = "{\"not\":{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    public void draft6_nonvalid_contains_id10() throws Exception {

        String schema1 = "{\"const\":[\"foo\"]}";
        String schema2 = "{\"not\":{\"contains\":{\"else\":true,\"if\":false}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean result = false;

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship())) {
            result = true;
        }

        if (JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            result = true;
        }

        Assert.assertEquals("schema1 must not be subschema of schema2", false, result);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_uniqueItems_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"uniqueItems\":true},{\"not\":{\"uniqueItems\":true}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_uniqueItems_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]},{\"not\":{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_uniqueItems_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]},{\"not\":{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_uniqueItems_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"uniqueItems\":false},{\"not\":{\"uniqueItems\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_uniqueItems_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]},{\"not\":{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_uniqueItems_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]},{\"not\":{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_minItems_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"minItems\":1},{\"not\":{\"minItems\":1}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalProperties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}},{\"not\":{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalProperties_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false},{\"not\":{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalProperties_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}},{\"not\":{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalProperties_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalProperties\":{\"type\":\"boolean\"}},{\"not\":{\"additionalProperties\":{\"type\":\"boolean\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalProperties_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"bar\":{},\"foo\":{}}},{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalProperties_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"properties\":{\"foo\":{}}}],\"additionalProperties\":{\"type\":\"boolean\"}},{\"not\":{\"allOf\":[{\"properties\":{\"foo\":{}}}],\"additionalProperties\":{\"type\":\"boolean\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_dependencies_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"dependencies\":{\"bar\":[\"foo\"]}},{\"not\":{\"dependencies\":{\"bar\":[\"foo\"]}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_dependencies_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"dependencies\":{\"bar\":[]}},{\"not\":{\"dependencies\":{\"bar\":[]}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_dependencies_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}},{\"not\":{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_dependencies_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}},{\"not\":{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_dependencies_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"dependencies\":{\"bar\":false,\"foo\":true}},{\"not\":{\"dependencies\":{\"bar\":false,\"foo\":true}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_dependencies_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}},{\"not\":{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_exclusiveMinimum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"exclusiveMinimum\":1.1},{\"not\":{\"exclusiveMinimum\":1.1}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":2},{\"not\":{\"const\":2}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}},{\"not\":{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[{\"foo\":\"bar\"}]},{\"not\":{\"const\":[{\"foo\":\"bar\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":null},{\"not\":{\"const\":null}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":false},{\"not\":{\"const\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":true},{\"not\":{\"const\":true}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[false]},{\"not\":{\"const\":[false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":[true]},{\"not\":{\"const\":[true]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"a\":false}},{\"not\":{\"const\":{\"a\":false}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id10() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":{\"a\":true}},{\"not\":{\"const\":{\"a\":true}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id11() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":0},{\"not\":{\"const\":0}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id12() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":1},{\"not\":{\"const\":1}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id13() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":-2},{\"not\":{\"const\":-2}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_const_id14() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":9007199254740992},{\"not\":{\"const\":9007199254740992}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_const_id15() throws Exception {

        String schema1 = "{\"anyOf\":[{\"const\":\"hello\\u0000there\"},{\"not\":{\"const\":\"hello\\u0000there\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_anyOf_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]},{\"not\":{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_anyOf_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"},{\"not\":{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_anyOf_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[true,true]},{\"not\":{\"anyOf\":[true,true]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_anyOf_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[true,false]},{\"not\":{\"anyOf\":[true,false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_anyOf_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[false,false]},{\"not\":{\"anyOf\":[false,false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_anyOf_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]},{\"not\":{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_anyOf_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"number\"},{}]},{\"not\":{\"anyOf\":[{\"type\":\"number\"},{}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_anyOf_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]},{\"not\":{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_propertyNames_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"propertyNames\":{\"maxLength\":3}},{\"not\":{\"propertyNames\":{\"maxLength\":3}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_propertyNames_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"propertyNames\":{\"pattern\":\"^a+$\"}},{\"not\":{\"propertyNames\":{\"pattern\":\"^a+$\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_propertyNames_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"propertyNames\":true},{\"not\":{\"propertyNames\":true}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_propertyNames_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"propertyNames\":false},{\"not\":{\"propertyNames\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_unknownKeyword_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"$ref\":\"#/anyOf/0/definitions/id_in_unknown0\"},{\"$ref\":\"#/anyOf/0/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]}}}},{\"not\":{\"anyOf\":[{\"$ref\":\"#/anyOf/1/definitions/id_in_unknown0\"},{\"$ref\":\"#/anyOf/1/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier1.json\"}]},\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier1.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier1.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier1.json\"}]}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_boolean_schema_id1() throws Exception {

        String schema1 = "{\"anyOf\":[true,{\"not\":true}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_boolean_schema_id2() throws Exception {

        String schema1 = "{\"anyOf\":[false,{\"not\":false}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_not_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"not\":{\"type\":\"integer\"}},{\"not\":{\"not\":{\"type\":\"integer\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_not_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"not\":{\"type\":[\"integer\",\"boolean\"]}},{\"not\":{\"not\":{\"type\":[\"integer\",\"boolean\"]}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_not_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}},{\"not\":{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_not_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"foo\":{\"not\":{}}}},{\"not\":{\"properties\":{\"foo\":{\"not\":{}}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_not_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"not\":true},{\"not\":{\"not\":true}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_not_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"not\":false},{\"not\":{\"not\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_items_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"items\":{\"type\":\"integer\"}},{\"not\":{\"items\":{\"type\":\"integer\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_items_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]},{\"not\":{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_items_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"items\":true},{\"not\":{\"items\":true}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_items_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"items\":false},{\"not\":{\"items\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_items_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"items\":[true,false]},{\"not\":{\"items\":[true,false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_items_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/anyOf/0/definitions/sub-item\"},{\"$ref\":\"#/anyOf/0/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/anyOf/0/definitions/item\"},{\"$ref\":\"#/anyOf/0/definitions/item\"},{\"$ref\":\"#/anyOf/0/definitions/item\"}]},{\"not\":{\"items\":[{\"$ref\":\"#/anyOf/1/definitions/item\"},{\"$ref\":\"#/anyOf/1/definitions/item\"},{\"$ref\":\"#/anyOf/1/definitions/item\"}]},\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/anyOf/1/definitions/sub-item\"},{\"$ref\":\"#/anyOf/1/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_items_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}},{\"not\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_enum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[1,2,3]},{\"not\":{\"enum\":[1,2,3]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_enum_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]},{\"not\":{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_enum_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[6,null]},{\"not\":{\"enum\":[6,null]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_enum_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]},{\"not\":{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_enum_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]},{\"not\":{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_enum_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[false]},{\"not\":{\"enum\":[false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_enum_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[true]},{\"not\":{\"enum\":[true]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_enum_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[0]},{\"not\":{\"enum\":[0]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_enum_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[1]},{\"not\":{\"enum\":[1]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_enum_id10() throws Exception {

        String schema1 = "{\"anyOf\":[{\"enum\":[\"hello\\u0000there\"]},{\"not\":{\"enum\":[\"hello\\u0000there\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_minProperties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"minProperties\":1},{\"not\":{\"minProperties\":1}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_properties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}},{\"not\":{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_properties_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}},{\"not\":{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_properties_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"bar\":false,\"foo\":true}},{\"not\":{\"properties\":{\"bar\":false,\"foo\":true}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_properties_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}},{\"not\":{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_maxLength_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"maxLength\":2},{\"not\":{\"maxLength\":2}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_infinite_loop_detection_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/anyOf/0/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/anyOf/0/definitions/int\"}}],\"definitions\":{\"int\":{\"type\":\"integer\"}}},{\"not\":{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/anyOf/1/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/anyOf/1/definitions/int\"}}]},\"definitions\":{\"int\":{\"type\":\"integer\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_exclusiveMaximum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"exclusiveMaximum\":3},{\"not\":{\"exclusiveMaximum\":3}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_minimum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"minimum\":1.1},{\"not\":{\"minimum\":1.1}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_minimum_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"minimum\":-2},{\"not\":{\"minimum\":-2}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_bignum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"integer\"},{\"not\":{\"type\":\"integer\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_bignum_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"number\"},{\"not\":{\"type\":\"number\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_bignum_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"string\"},{\"not\":{\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_bignum_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"maximum\":1.8446744073709552E19},{\"not\":{\"maximum\":1.8446744073709552E19}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_bignum_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"exclusiveMaximum\":9.727837981879871E26},{\"not\":{\"exclusiveMaximum\":9.727837981879871E26}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_bignum_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"minimum\":-1.8446744073709552E19},{\"not\":{\"minimum\":-1.8446744073709552E19}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_bignum_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"exclusiveMinimum\":-9.727837981879871E26},{\"not\":{\"exclusiveMinimum\":-9.727837981879871E26}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_unicode_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"\\\\wcole\"},{\"not\":{\"pattern\":\"\\\\wcole\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_unicode_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"[a-z]cole\"},{\"not\":{\"pattern\":\"[a-z]cole\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_unicode_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\d+$\"},{\"not\":{\"pattern\":\"^\\\\d+$\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_unicode_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"},{\"not\":{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_unicode_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"},{\"not\":{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_unicode_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"},{\"not\":{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_non_bmp_regex_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^🐲*$\"},{\"not\":{\"pattern\":\"^🐲*$\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_non_bmp_regex_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}},{\"not\":{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_json_pointer_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"json-pointer\"},{\"not\":{\"format\":\"json-pointer\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_uri_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"uri\"},{\"not\":{\"format\":\"uri\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_uri_template_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"uri-template\"},{\"not\":{\"format\":\"uri-template\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_ipv4_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"ipv4\"},{\"not\":{\"format\":\"ipv4\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_uri_reference_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"uri-reference\"},{\"not\":{\"format\":\"uri-reference\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_ipv6_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"ipv6\"},{\"not\":{\"format\":\"ipv6\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_hostname_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"hostname\"},{\"not\":{\"format\":\"hostname\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_email_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"email\"},{\"not\":{\"format\":\"email\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_format_date_time_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"date-time\"},{\"not\":{\"format\":\"date-time\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_float_overflow_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"multipleOf\":0.5,\"type\":\"integer\"},{\"not\":{\"multipleOf\":0.5,\"type\":\"integer\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^abc$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^abc$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\t$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\t$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\d$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\d$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\D$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\w$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\w$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\W$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\W$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\s$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_optional_ecmascript_regex_id10() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^\\\\S$\",\"type\":\"string\"},{\"not\":{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]},{\"not\":{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"},{\"not\":{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[true,true,true]},{\"not\":{\"oneOf\":[true,true,true]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[true,false,false]},{\"not\":{\"oneOf\":[true,false,false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[true,true,false]},{\"not\":{\"oneOf\":[true,true,false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[false,false,false]},{\"not\":{\"oneOf\":[false,false,false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]},{\"not\":{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[{\"type\":\"number\"},{}]},{\"not\":{\"oneOf\":[{\"type\":\"number\"},{}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"},{\"not\":{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id10() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]},{\"not\":{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_oneOf_id11() throws Exception {

        String schema1 = "{\"anyOf\":[{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]},{\"not\":{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalItems_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]},{\"not\":{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalItems_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalItems\":false,\"items\":{}},{\"not\":{\"additionalItems\":false,\"items\":{}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalItems_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalItems\":false,\"items\":[{},{},{}]},{\"not\":{\"additionalItems\":false,\"items\":[{},{},{}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalItems_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalItems\":false},{\"not\":{\"additionalItems\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalItems_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"items\":[{\"type\":\"integer\"}]},{\"not\":{\"items\":[{\"type\":\"integer\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalItems_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]}],\"additionalItems\":{\"type\":\"boolean\"}},{\"not\":{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]}],\"additionalItems\":{\"type\":\"boolean\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalItems_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}],\"additionalItems\":{\"type\":\"boolean\"},\"items\":[{\"type\":\"integer\"}]},{\"not\":{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}],\"additionalItems\":{\"type\":\"boolean\"},\"items\":[{\"type\":\"integer\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_additionalItems_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]},{\"not\":{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_pattern_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"^a*$\"},{\"not\":{\"pattern\":\"^a*$\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_pattern_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"pattern\":\"a+\"},{\"not\":{\"pattern\":\"a+\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_definitions_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"$ref\":\"http://json-schema.org/draft-06/schema#\"},{\"not\":{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_maxProperties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"maxProperties\":2},{\"not\":{\"maxProperties\":2}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_maxProperties_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"maxProperties\":0},{\"not\":{\"maxProperties\":0}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_required_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]},{\"not\":{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_required_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"foo\":{}}},{\"not\":{\"properties\":{\"foo\":{}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_required_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"foo\":{}},\"required\":[]},{\"not\":{\"properties\":{\"foo\":{}},\"required\":[]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_required_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]},{\"not\":{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_id_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"$ref\":\"#/anyOf/0/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}},{\"not\":{\"anyOf\":[{\"$ref\":\"#/anyOf/1/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier1.json\"}]},\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier1.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier1.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier1.json\"}]}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"integer\"},{\"not\":{\"type\":\"integer\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"number\"},{\"not\":{\"type\":\"number\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"string\"},{\"not\":{\"type\":\"string\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"object\"},{\"not\":{\"type\":\"object\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"array\"},{\"not\":{\"type\":\"array\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"boolean\"},{\"not\":{\"type\":\"boolean\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"null\"},{\"not\":{\"type\":\"null\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":[\"integer\",\"string\"]},{\"not\":{\"type\":[\"integer\",\"string\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":[\"string\"]},{\"not\":{\"type\":[\"string\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id10() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":[\"array\",\"object\"]},{\"not\":{\"type\":[\"array\",\"object\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_type_id11() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":[\"array\",\"object\",\"null\"]},{\"not\":{\"type\":[\"array\",\"object\",\"null\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_default_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}},{\"not\":{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_default_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}},{\"not\":{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_default_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}},{\"not\":{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_multipleOf_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"multipleOf\":2},{\"not\":{\"multipleOf\":2}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_multipleOf_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"multipleOf\":1.5},{\"not\":{\"multipleOf\":1.5}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_multipleOf_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"multipleOf\":1.0E-4},{\"not\":{\"multipleOf\":1.0E-4}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_multipleOf_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"multipleOf\":0.123456789,\"type\":\"integer\"},{\"not\":{\"multipleOf\":0.123456789,\"type\":\"integer\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_patternProperties_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}},{\"not\":{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_patternProperties_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}},{\"not\":{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_patternProperties_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}},{\"not\":{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_patternProperties_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"patternProperties\":{\"f.*\":true,\"b.*\":false}},{\"not\":{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]},{\"not\":{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"not\":{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]},{\"not\":{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[true,true]},{\"not\":{\"allOf\":[true,true]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[true,false]},{\"not\":{\"allOf\":[true,false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[false,false]},{\"not\":{\"allOf\":[false,false]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{}]},{\"not\":{\"allOf\":[{}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{},{}]},{\"not\":{\"allOf\":[{},{}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{},{\"type\":\"number\"}]},{\"not\":{\"allOf\":[{},{\"type\":\"number\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id10() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"type\":\"number\"},{}]},{\"not\":{\"allOf\":[{\"type\":\"number\"},{}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id11() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]},{\"not\":{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_allOf_id12() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]},{\"not\":{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"email\"},{\"not\":{\"format\":\"email\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"ipv4\"},{\"not\":{\"format\":\"ipv4\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"ipv6\"},{\"not\":{\"format\":\"ipv6\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"hostname\"},{\"not\":{\"format\":\"hostname\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"date-time\"},{\"not\":{\"format\":\"date-time\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"json-pointer\"},{\"not\":{\"format\":\"json-pointer\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"uri\"},{\"not\":{\"format\":\"uri\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"uri-reference\"},{\"not\":{\"format\":\"uri-reference\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_format_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"format\":\"uri-template\"},{\"not\":{\"format\":\"uri-template\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_ref_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#/anyOf/0\"}}},{\"not\":{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#/anyOf/1/not\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_ref_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"$ref\":\"#/anyOf/0/properties/foo\"},\"foo\":{\"type\":\"integer\"}}},{\"not\":{\"properties\":{\"bar\":{\"$ref\":\"#/anyOf/1/not/properties/foo\"},\"foo\":{\"type\":\"integer\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_ref_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/anyOf/0/items/0\"}]},{\"not\":{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/anyOf/1/not/items/0\"}]}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_ref_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/anyOf/0/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/anyOf/0/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/anyOf/0/definitions/percent%25field\"}}},{\"not\":{\"properties\":{\"slash\":{\"$ref\":\"#/anyOf/1/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/anyOf/1/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/anyOf/1/definitions/percent%25field\"}}},\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_ref_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"$ref\":\"#/anyOf/0/definitions/c\"}],\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/anyOf/0/definitions/a\"},\"c\":{\"$ref\":\"#/anyOf/0/definitions/b\"}}},{\"not\":{\"allOf\":[{\"$ref\":\"#/anyOf/1/definitions/c\"}]},\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/anyOf/1/definitions/a\"},\"c\":{\"$ref\":\"#/anyOf/1/definitions/b\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_ref_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"definitions\":{\"reffed\":{\"type\":\"array\"}},\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/anyOf/0/definitions/reffed\"}}},{\"not\":{\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/anyOf/1/definitions/reffed\"}}},\"definitions\":{\"reffed\":{\"type\":\"array\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json\",\"$id\":\"http://localhost:1234/sibling_id/\"}],\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/\"},{\"not\":{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json1\",\"$id\":\"http://localhost:1234/sibling_id/1\"}]},\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo1.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo1.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/1\"}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"$ref\":\"http://json-schema.org/draft-06/schema#\"},{\"not\":{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"$ref\":{\"type\":\"string\"}}},{\"not\":{\"properties\":{\"$ref\":{\"type\":\"string\"}}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id10() throws Exception {

        String schema1 = "{\"anyOf\":[{\"definitions\":{\"is-string\":{\"type\":\"string\"}},\"properties\":{\"$ref\":{\"$ref\":\"#/anyOf/0/definitions/is-string\"}}},{\"not\":{\"properties\":{\"$ref\":{\"$ref\":\"#/anyOf/1/definitions/is-string\"}}},\"definitions\":{\"is-string\":{\"type\":\"string\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id11() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"$ref\":\"#/anyOf/0/definitions/bool\"}],\"definitions\":{\"bool\":true}},{\"not\":{\"allOf\":[{\"$ref\":\"#/anyOf/1/definitions/bool\"}]},\"definitions\":{\"bool\":true}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id12() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"$ref\":\"#/anyOf/0/definitions/bool\"}],\"definitions\":{\"bool\":false}},{\"not\":{\"allOf\":[{\"$ref\":\"#/anyOf/1/definitions/bool\"}]},\"definitions\":{\"bool\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id13() throws Exception {

        String schema1 = "{\"anyOf\":[{\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node\"}},\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node\"}},\"meta\":{\"type\":\"string\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree\"},{\"not\":{\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node1\"}},\"meta\":{\"type\":\"string\"}}},\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree1\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node1\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree1\"}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id14() throws Exception {

        String schema1 = "{\"anyOf\":[{\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}},\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/anyOf/0/definitions/foo%22bar\"}}},{\"not\":{\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/anyOf/1/definitions/foo%22bar\"}}},\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id15() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"$ref\":\"#foo\"}],\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo\"}}},{\"not\":{\"allOf\":[{\"$ref\":\"#foo1\"}]},\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo1\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id16() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested.json#foo\"}],\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo\"}},\"$id\":\"nested.json\"}},\"$id\":\"http://localhost:1234/root\"},{\"not\":{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested1.json#foo1\"}]},\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo1\"}},\"$id\":\"nested1.json\"}},\"$id\":\"http://localhost:1234/root1\"}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id17() throws Exception {

        String schema1 = "{\"anyOf\":[{\"definitions\":{\"a_string\":{\"type\":\"string\"}},\"enum\":[{\"$ref\":\"#/anyOf/0/definitions/a_string\"}]},{\"not\":{\"enum\":[{\"$ref\":\"#/anyOf/1/definitions/a_string\"}]},\"definitions\":{\"a_string\":{\"type\":\"string\"}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id18() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/anyOf/0/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs2.json\"}},\"$id\":\"http://example.com/schema-relative-uri-defs1.json\"},{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json1\"}],\"not\":{\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/anyOf/1/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs21.json\"}}},\"$id\":\"http://example.com/schema-relative-uri-defs11.json\"}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_universal_ref_id19() throws Exception {

        String schema1 = "{\"anyOf\":[{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/anyOf/0/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs2.json\"}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs1.json\"},{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json1\"}],\"not\":{\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/anyOf/1/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs21.json\"}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs11.json\"}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_maximum_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"maximum\":3},{\"not\":{\"maximum\":3}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_maximum_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"maximum\":300},{\"not\":{\"maximum\":300}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_minLength_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"minLength\":2},{\"not\":{\"minLength\":2}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_maxItems_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"maxItems\":2},{\"not\":{\"maxItems\":2}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_contains_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"contains\":{\"minimum\":5}},{\"not\":{\"contains\":{\"minimum\":5}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_contains_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"contains\":{\"const\":5}},{\"not\":{\"contains\":{\"const\":5}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_contains_id3() throws Exception {

        String schema1 = "{\"anyOf\":[{\"contains\":true},{\"not\":{\"contains\":true}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_contains_id4() throws Exception {

        String schema1 = "{\"anyOf\":[{\"contains\":false},{\"not\":{\"contains\":false}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_contains_id5() throws Exception {

        String schema1 = "{\"anyOf\":[{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}},{\"not\":{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_universal_contains_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"contains\":{\"else\":true,\"if\":false}},{\"not\":{\"contains\":{\"else\":true,\"if\":false}}}]}";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_uniqueItems_id1() throws Exception {

        String schema1 = "{\"uniqueItems\":true}";
        String schema2 = "{\"uniqueItems\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_uniqueItems_id2() throws Exception {

        String schema1 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        String schema2 = "{\"uniqueItems\":true,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_uniqueItems_id3() throws Exception {

        String schema1 = "{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        String schema2 = "{\"uniqueItems\":true,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_uniqueItems_id4() throws Exception {

        String schema1 = "{\"uniqueItems\":false}";
        String schema2 = "{\"uniqueItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_uniqueItems_id5() throws Exception {

        String schema1 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        String schema2 = "{\"uniqueItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_uniqueItems_id6() throws Exception {

        String schema1 = "{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        String schema2 = "{\"uniqueItems\":false,\"additionalItems\":false,\"items\":[{\"type\":\"boolean\"},{\"type\":\"boolean\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_minItems_id1() throws Exception {

        String schema1 = "{\"minItems\":1}";
        String schema2 = "{\"minItems\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalProperties_id1() throws Exception {

        String schema1 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        String schema2 = "{\"patternProperties\":{\"^v\":{}},\"additionalProperties\":false,\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalProperties_id2() throws Exception {

        String schema1 = "{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false}";
        String schema2 = "{\"patternProperties\":{\"^á\":{}},\"additionalProperties\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalProperties_id3() throws Exception {

        String schema1 = "{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}";
        String schema2 = "{\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalProperties_id4() throws Exception {

        String schema1 = "{\"additionalProperties\":{\"type\":\"boolean\"}}";
        String schema2 = "{\"additionalProperties\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalProperties_id5() throws Exception {

        String schema1 = "{\"properties\":{\"bar\":{},\"foo\":{}}}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalProperties_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"foo\":{}}}],\"additionalProperties\":{\"type\":\"boolean\"}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{}}}],\"additionalProperties\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_dependencies_id1() throws Exception {

        String schema1 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        String schema2 = "{\"dependencies\":{\"bar\":[\"foo\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_dependencies_id2() throws Exception {

        String schema1 = "{\"dependencies\":{\"bar\":[]}}";
        String schema2 = "{\"dependencies\":{\"bar\":[]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_dependencies_id3() throws Exception {

        String schema1 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        String schema2 = "{\"dependencies\":{\"quux\":[\"foo\",\"bar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_dependencies_id4() throws Exception {

        String schema1 = "{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}";
        String schema2 = "{\"dependencies\":{\"bar\":{\"properties\":{\"bar\":{\"type\":\"integer\"},\"foo\":{\"type\":\"integer\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_dependencies_id5() throws Exception {

        String schema1 = "{\"dependencies\":{\"bar\":false,\"foo\":true}}";
        String schema2 = "{\"dependencies\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_dependencies_id6() throws Exception {

        String schema1 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        String schema2 = "{\"dependencies\":{\"foo\\\"bar\":[\"foo'bar\"],\"foo'bar\":{\"required\":[\"foo\\\"bar\"]},\"foo\\tbar\":{\"minProperties\":4},\"foo\\nbar\":[\"foo\\rbar\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_exclusiveMinimum_id1() throws Exception {

        String schema1 = "{\"exclusiveMinimum\":1.1}";
        String schema2 = "{\"exclusiveMinimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id1() throws Exception {

        String schema1 = "{\"const\":2}";
        String schema2 = "{\"const\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id2() throws Exception {

        String schema1 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        String schema2 = "{\"const\":{\"foo\":\"bar\",\"baz\":\"bax\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id3() throws Exception {

        String schema1 = "{\"const\":[{\"foo\":\"bar\"}]}";
        String schema2 = "{\"const\":[{\"foo\":\"bar\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id4() throws Exception {

        String schema1 = "{\"const\":null}";
        String schema2 = "{\"const\":null}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id5() throws Exception {

        String schema1 = "{\"const\":false}";
        String schema2 = "{\"const\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id6() throws Exception {

        String schema1 = "{\"const\":true}";
        String schema2 = "{\"const\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id7() throws Exception {

        String schema1 = "{\"const\":[false]}";
        String schema2 = "{\"const\":[false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id8() throws Exception {

        String schema1 = "{\"const\":[true]}";
        String schema2 = "{\"const\":[true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id9() throws Exception {

        String schema1 = "{\"const\":{\"a\":false}}";
        String schema2 = "{\"const\":{\"a\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id10() throws Exception {

        String schema1 = "{\"const\":{\"a\":true}}";
        String schema2 = "{\"const\":{\"a\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id11() throws Exception {

        String schema1 = "{\"const\":0}";
        String schema2 = "{\"const\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id12() throws Exception {

        String schema1 = "{\"const\":1}";
        String schema2 = "{\"const\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id13() throws Exception {

        String schema1 = "{\"const\":-2}";
        String schema2 = "{\"const\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_const_id14() throws Exception {

        String schema1 = "{\"const\":9007199254740992}";
        String schema2 = "{\"const\":9007199254740992}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_const_id15() throws Exception {

        String schema1 = "{\"const\":\"hello\\u0000there\"}";
        String schema2 = "{\"const\":\"hello\\u0000there\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        String schema2 = "{\"anyOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id2() throws Exception {

        String schema1 = "{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"}";
        String schema2 = "{\"anyOf\":[{\"maxLength\":2},{\"minLength\":4}],\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id3() throws Exception {

        String schema1 = "{\"anyOf\":[true,true]}";
        String schema2 = "{\"anyOf\":[true,true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id4() throws Exception {

        String schema1 = "{\"anyOf\":[true,false]}";
        String schema2 = "{\"anyOf\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id5() throws Exception {

        String schema1 = "{\"anyOf\":[false,false]}";
        String schema2 = "{\"anyOf\":[false,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id6() throws Exception {

        String schema1 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        String schema2 = "{\"anyOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id7() throws Exception {

        String schema1 = "{\"anyOf\":[{\"type\":\"number\"},{}]}";
        String schema2 = "{\"anyOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id8() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}";
        String schema2 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_anyOf_id9() throws Exception {

        String schema1 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}";
        String schema2 = "{\"anyOf\":[{\"anyOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_propertyNames_id1() throws Exception {

        String schema1 = "{\"propertyNames\":{\"maxLength\":3}}";
        String schema2 = "{\"propertyNames\":{\"maxLength\":3}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_propertyNames_id2() throws Exception {

        String schema1 = "{\"propertyNames\":{\"pattern\":\"^a+$\"}}";
        String schema2 = "{\"propertyNames\":{\"pattern\":\"^a+$\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_propertyNames_id3() throws Exception {

        String schema1 = "{\"propertyNames\":true}";
        String schema2 = "{\"propertyNames\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_propertyNames_id4() throws Exception {

        String schema1 = "{\"propertyNames\":false}";
        String schema2 = "{\"propertyNames\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_unknownKeyword_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_unknown0\"},{\"$ref\":\"#/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]}}}}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_unknown0\"},{\"$ref\":\"#/definitions/id_in_unknown1\"},{\"$ref\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"},\"id_in_unknown1\":{\"not\":{\"object_of_schemas\":{\"foo\":{\"type\":\"integer\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}}}},\"id_in_unknown0\":{\"not\":{\"array_of_schemas\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/unknownKeyword/my_identifier.json\"}]}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_boolean_schema_id1() throws Exception {

        String schema1 = "true";
        String schema2 = "true";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_boolean_schema_id2() throws Exception {

        String schema1 = "false";
        String schema2 = "false";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_not_id1() throws Exception {

        String schema1 = "{\"not\":{\"type\":\"integer\"}}";
        String schema2 = "{\"not\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_not_id2() throws Exception {

        String schema1 = "{\"not\":{\"type\":[\"integer\",\"boolean\"]}}";
        String schema2 = "{\"not\":{\"type\":[\"integer\",\"boolean\"]}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_not_id3() throws Exception {

        String schema1 = "{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}";
        String schema2 = "{\"not\":{\"type\":\"object\",\"properties\":{\"foo\":{\"type\":\"string\"}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_not_id4() throws Exception {

        String schema1 = "{\"properties\":{\"foo\":{\"not\":{}}}}";
        String schema2 = "{\"properties\":{\"foo\":{\"not\":{}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_not_id5() throws Exception {

        String schema1 = "{\"not\":true}";
        String schema2 = "{\"not\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_not_id6() throws Exception {

        String schema1 = "{\"not\":false}";
        String schema2 = "{\"not\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_items_id1() throws Exception {

        String schema1 = "{\"items\":{\"type\":\"integer\"}}";
        String schema2 = "{\"items\":{\"type\":\"integer\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_items_id2() throws Exception {

        String schema1 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_items_id3() throws Exception {

        String schema1 = "{\"items\":true}";
        String schema2 = "{\"items\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_items_id4() throws Exception {

        String schema1 = "{\"items\":false}";
        String schema2 = "{\"items\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_items_id5() throws Exception {

        String schema1 = "{\"items\":[true,false]}";
        String schema2 = "{\"items\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_items_id6() throws Exception {

        String schema1 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        String schema2 = "{\"additionalItems\":false,\"type\":\"array\",\"definitions\":{\"item\":{\"additionalItems\":false,\"type\":\"array\",\"items\":[{\"$ref\":\"#/definitions/sub-item\"},{\"$ref\":\"#/definitions/sub-item\"}]},\"sub-item\":{\"type\":\"object\",\"required\":[\"foo\"]}},\"items\":[{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"},{\"$ref\":\"#/definitions/item\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_items_id7() throws Exception {

        String schema1 = "{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}}";
        String schema2 = "{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_enum_id1() throws Exception {

        String schema1 = "{\"enum\":[1,2,3]}";
        String schema2 = "{\"enum\":[1,2,3]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_enum_id2() throws Exception {

        String schema1 = "{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}";
        String schema2 = "{\"enum\":[6,\"foo\",[],true,{\"foo\":12}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_enum_id3() throws Exception {

        String schema1 = "{\"enum\":[6,null]}";
        String schema2 = "{\"enum\":[6,null]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_enum_id4() throws Exception {

        String schema1 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"bar\":{\"enum\":[\"bar\"]},\"foo\":{\"enum\":[\"foo\"]}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_enum_id5() throws Exception {

        String schema1 = "{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}";
        String schema2 = "{\"enum\":[\"foo\\nbar\",\"foo\\rbar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_enum_id6() throws Exception {

        String schema1 = "{\"enum\":[false]}";
        String schema2 = "{\"enum\":[false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_enum_id7() throws Exception {

        String schema1 = "{\"enum\":[true]}";
        String schema2 = "{\"enum\":[true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_enum_id8() throws Exception {

        String schema1 = "{\"enum\":[0]}";
        String schema2 = "{\"enum\":[0]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_enum_id9() throws Exception {

        String schema1 = "{\"enum\":[1]}";
        String schema2 = "{\"enum\":[1]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_enum_id10() throws Exception {

        String schema1 = "{\"enum\":[\"hello\\u0000there\"]}";
        String schema2 = "{\"enum\":[\"hello\\u0000there\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_minProperties_id1() throws Exception {

        String schema1 = "{\"minProperties\":1}";
        String schema2 = "{\"minProperties\":1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_properties_id1() throws Exception {

        String schema1 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        String schema2 = "{\"properties\":{\"bar\":{\"type\":\"string\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_properties_id2() throws Exception {

        String schema1 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        String schema2 = "{\"patternProperties\":{\"f.o\":{\"minItems\":2}},\"additionalProperties\":{\"type\":\"integer\"},\"properties\":{\"bar\":{\"type\":\"array\"},\"foo\":{\"maxItems\":3,\"type\":\"array\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_properties_id3() throws Exception {

        String schema1 = "{\"properties\":{\"bar\":false,\"foo\":true}}";
        String schema2 = "{\"properties\":{\"bar\":false,\"foo\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_properties_id4() throws Exception {

        String schema1 = "{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}}";
        String schema2 = "{\"properties\":{\"foo\\\\bar\":{\"type\":\"number\"},\"foo\\\"bar\":{\"type\":\"number\"},\"foo\\rbar\":{\"type\":\"number\"},\"foo\\fbar\":{\"type\":\"number\"},\"foo\\tbar\":{\"type\":\"number\"},\"foo\\nbar\":{\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_maxLength_id1() throws Exception {

        String schema1 = "{\"maxLength\":2}";
        String schema2 = "{\"maxLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_infinite_loop_detection_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/definitions/int\"}}],\"definitions\":{\"int\":{\"type\":\"integer\"}}}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"$ref\":\"#/definitions/int\"}}},{\"additionalProperties\":{\"$ref\":\"#/definitions/int\"}}],\"definitions\":{\"int\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_exclusiveMaximum_id1() throws Exception {

        String schema1 = "{\"exclusiveMaximum\":3}";
        String schema2 = "{\"exclusiveMaximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_minimum_id1() throws Exception {

        String schema1 = "{\"minimum\":1.1}";
        String schema2 = "{\"minimum\":1.1}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_minimum_id2() throws Exception {

        String schema1 = "{\"minimum\":-2}";
        String schema2 = "{\"minimum\":-2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_bignum_id1() throws Exception {

        String schema1 = "{\"type\":\"integer\"}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_bignum_id2() throws Exception {

        String schema1 = "{\"type\":\"number\"}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_bignum_id3() throws Exception {

        String schema1 = "{\"type\":\"string\"}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_bignum_id4() throws Exception {

        String schema1 = "{\"maximum\":1.8446744073709552E19}";
        String schema2 = "{\"maximum\":1.8446744073709552E19}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_bignum_id5() throws Exception {

        String schema1 = "{\"exclusiveMaximum\":9.727837981879871E26}";
        String schema2 = "{\"exclusiveMaximum\":9.727837981879871E26}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_bignum_id6() throws Exception {

        String schema1 = "{\"minimum\":-1.8446744073709552E19}";
        String schema2 = "{\"minimum\":-1.8446744073709552E19}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_bignum_id7() throws Exception {

        String schema1 = "{\"exclusiveMinimum\":-9.727837981879871E26}";
        String schema2 = "{\"exclusiveMinimum\":-9.727837981879871E26}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_unicode_id1() throws Exception {

        String schema1 = "{\"pattern\":\"\\\\wcole\"}";
        String schema2 = "{\"pattern\":\"\\\\wcole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_unicode_id2() throws Exception {

        String schema1 = "{\"pattern\":\"[a-z]cole\"}";
        String schema2 = "{\"pattern\":\"[a-z]cole\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_unicode_id3() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\d+$\"}";
        String schema2 = "{\"pattern\":\"^\\\\d+$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_unicode_id4() throws Exception {

        String schema1 = "{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        String schema2 = "{\"patternProperties\":{\"\\\\wcole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_unicode_id5() throws Exception {

        String schema1 = "{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        String schema2 = "{\"patternProperties\":{\"[a-z]cole\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_unicode_id6() throws Exception {

        String schema1 = "{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        String schema2 = "{\"patternProperties\":{\"^\\\\d+$\":true},\"additionalProperties\":false,\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_non_bmp_regex_id1() throws Exception {

        String schema1 = "{\"pattern\":\"^🐲*$\"}";
        String schema2 = "{\"pattern\":\"^🐲*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_non_bmp_regex_id2() throws Exception {

        String schema1 = "{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}";
        String schema2 = "{\"patternProperties\":{\"^🐲*$\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_json_pointer_id1() throws Exception {

        String schema1 = "{\"format\":\"json-pointer\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_uri_id1() throws Exception {

        String schema1 = "{\"format\":\"uri\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_uri_template_id1() throws Exception {

        String schema1 = "{\"format\":\"uri-template\"}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_ipv4_id1() throws Exception {

        String schema1 = "{\"format\":\"ipv4\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_uri_reference_id1() throws Exception {

        String schema1 = "{\"format\":\"uri-reference\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_ipv6_id1() throws Exception {

        String schema1 = "{\"format\":\"ipv6\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_hostname_id1() throws Exception {

        String schema1 = "{\"format\":\"hostname\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_email_id1() throws Exception {

        String schema1 = "{\"format\":\"email\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_format_date_time_id1() throws Exception {

        String schema1 = "{\"format\":\"date-time\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_float_overflow_id1() throws Exception {

        String schema1 = "{\"multipleOf\":0.5,\"type\":\"integer\"}";
        String schema2 = "{\"multipleOf\":0.5,\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id1() throws Exception {

        String schema1 = "{\"pattern\":\"^abc$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^abc$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id2() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\t$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\t$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id3() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\cC$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id4() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\cc$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id5() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\d$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\d$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id6() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\D$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id7() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\w$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\w$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id8() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\W$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\W$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id9() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\s$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_optional_ecmascript_regex_id10() throws Exception {

        String schema1 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        String schema2 = "{\"pattern\":\"^\\\\S$\",\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id1() throws Exception {

        String schema1 = "{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        String schema2 = "{\"oneOf\":[{\"type\":\"integer\"},{\"minimum\":2}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id2() throws Exception {

        String schema1 = "{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"}";
        String schema2 = "{\"oneOf\":[{\"minLength\":2},{\"maxLength\":4}],\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id3() throws Exception {

        String schema1 = "{\"oneOf\":[true,true,true]}";
        String schema2 = "{\"oneOf\":[true,true,true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id4() throws Exception {

        String schema1 = "{\"oneOf\":[true,false,false]}";
        String schema2 = "{\"oneOf\":[true,false,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id5() throws Exception {

        String schema1 = "{\"oneOf\":[true,true,false]}";
        String schema2 = "{\"oneOf\":[true,true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id6() throws Exception {

        String schema1 = "{\"oneOf\":[false,false,false]}";
        String schema2 = "{\"oneOf\":[false,false,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id7() throws Exception {

        String schema1 = "{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id8() throws Exception {

        String schema1 = "{\"oneOf\":[{\"type\":\"number\"},{}]}";
        String schema2 = "{\"oneOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id9() throws Exception {

        String schema1 = "{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}";
        String schema2 = "{\"oneOf\":[{\"required\":[\"foo\",\"bar\"]},{\"required\":[\"foo\",\"baz\"]}],\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id10() throws Exception {

        String schema1 = "{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}";
        String schema2 = "{\"oneOf\":[{\"properties\":{\"bar\":true,\"baz\":true},\"required\":[\"bar\"]},{\"properties\":{\"foo\":true},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_oneOf_id11() throws Exception {

        String schema1 = "{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]}";
        String schema2 = "{\"oneOf\":[{\"oneOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalItems_id1() throws Exception {

        String schema1 = "{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]}";
        String schema2 = "{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalItems_id2() throws Exception {

        String schema1 = "{\"additionalItems\":false,\"items\":{}}";
        String schema2 = "{\"additionalItems\":false,\"items\":{}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalItems_id3() throws Exception {

        String schema1 = "{\"additionalItems\":false,\"items\":[{},{},{}]}";
        String schema2 = "{\"additionalItems\":false,\"items\":[{},{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalItems_id4() throws Exception {

        String schema1 = "{\"additionalItems\":false}";
        String schema2 = "{\"additionalItems\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalItems_id5() throws Exception {

        String schema1 = "{\"items\":[{\"type\":\"integer\"}]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalItems_id6() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]}],\"additionalItems\":{\"type\":\"boolean\"}}";
        String schema2 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"}]}],\"additionalItems\":{\"type\":\"boolean\"}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalItems_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}],\"additionalItems\":{\"type\":\"boolean\"},\"items\":[{\"type\":\"integer\"}]}";
        String schema2 = "{\"allOf\":[{\"items\":[{\"type\":\"integer\"},{\"type\":\"string\"}]}],\"additionalItems\":{\"type\":\"boolean\"},\"items\":[{\"type\":\"integer\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_additionalItems_id8() throws Exception {

        String schema1 = "{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]}";
        String schema2 = "{\"additionalItems\":{\"type\":\"integer\"},\"items\":[{\"type\":\"string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_pattern_id1() throws Exception {

        String schema1 = "{\"pattern\":\"^a*$\"}";
        String schema2 = "{\"pattern\":\"^a*$\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_pattern_id2() throws Exception {

        String schema1 = "{\"pattern\":\"a+\"}";
        String schema2 = "{\"pattern\":\"a+\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_definitions_id1() throws Exception {

        String schema1 = "{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}";
        String schema2 = "{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_maxProperties_id1() throws Exception {

        String schema1 = "{\"maxProperties\":2}";
        String schema2 = "{\"maxProperties\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_maxProperties_id2() throws Exception {

        String schema1 = "{\"maxProperties\":0}";
        String schema2 = "{\"maxProperties\":0}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_required_id1() throws Exception {

        String schema1 = "{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}";
        String schema2 = "{\"properties\":{\"bar\":{},\"foo\":{}},\"required\":[\"foo\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_required_id2() throws Exception {

        String schema1 = "{\"properties\":{\"foo\":{}}}";
        String schema2 = "{\"properties\":{\"foo\":{}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_required_id3() throws Exception {

        String schema1 = "{\"properties\":{\"foo\":{}},\"required\":[]}";
        String schema2 = "{\"properties\":{\"foo\":{}},\"required\":[]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_required_id4() throws Exception {

        String schema1 = "{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]}";
        String schema2 = "{\"required\":[\"foo\\nbar\",\"foo\\\"bar\",\"foo\\\\bar\",\"foo\\rbar\",\"foo\\tbar\",\"foo\\fbar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_id_id1() throws Exception {

        String schema1 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}}";
        String schema2 = "{\"anyOf\":[{\"$ref\":\"#/definitions/id_in_enum\"},{\"$ref\":\"https://localhost:1234/id/my_identifier.json\"}],\"definitions\":{\"real_id_in_schema\":{\"type\":\"string\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"},\"zzz_id_in_const\":{\"const\":{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}},\"id_in_enum\":{\"enum\":[{\"type\":\"null\",\"$id\":\"https://localhost:1234/id/my_identifier.json\"}]}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id1() throws Exception {

        String schema1 = "{\"type\":\"integer\"}";
        String schema2 = "{\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id2() throws Exception {

        String schema1 = "{\"type\":\"number\"}";
        String schema2 = "{\"type\":\"number\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id3() throws Exception {

        String schema1 = "{\"type\":\"string\"}";
        String schema2 = "{\"type\":\"string\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id4() throws Exception {

        String schema1 = "{\"type\":\"object\"}";
        String schema2 = "{\"type\":\"object\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id5() throws Exception {

        String schema1 = "{\"type\":\"array\"}";
        String schema2 = "{\"type\":\"array\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id6() throws Exception {

        String schema1 = "{\"type\":\"boolean\"}";
        String schema2 = "{\"type\":\"boolean\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id7() throws Exception {

        String schema1 = "{\"type\":\"null\"}";
        String schema2 = "{\"type\":\"null\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id8() throws Exception {

        String schema1 = "{\"type\":[\"integer\",\"string\"]}";
        String schema2 = "{\"type\":[\"integer\",\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id9() throws Exception {

        String schema1 = "{\"type\":[\"string\"]}";
        String schema2 = "{\"type\":[\"string\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id10() throws Exception {

        String schema1 = "{\"type\":[\"array\",\"object\"]}";
        String schema2 = "{\"type\":[\"array\",\"object\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_type_id11() throws Exception {

        String schema1 = "{\"type\":[\"array\",\"object\",\"null\"]}";
        String schema2 = "{\"type\":[\"array\",\"object\",\"null\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_default_id1() throws Exception {

        String schema1 = "{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}";
        String schema2 = "{\"properties\":{\"foo\":{\"default\":[],\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_default_id2() throws Exception {

        String schema1 = "{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}";
        String schema2 = "{\"properties\":{\"bar\":{\"default\":\"bad\",\"minLength\":4,\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_default_id3() throws Exception {

        String schema1 = "{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}";
        String schema2 = "{\"type\":\"object\",\"properties\":{\"alpha\":{\"default\":5,\"maximum\":3,\"type\":\"number\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_multipleOf_id1() throws Exception {

        String schema1 = "{\"multipleOf\":2}";
        String schema2 = "{\"multipleOf\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_multipleOf_id2() throws Exception {

        String schema1 = "{\"multipleOf\":1.5}";
        String schema2 = "{\"multipleOf\":1.5}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_multipleOf_id3() throws Exception {

        String schema1 = "{\"multipleOf\":1.0E-4}";
        String schema2 = "{\"multipleOf\":1.0E-4}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_multipleOf_id4() throws Exception {

        String schema1 = "{\"multipleOf\":0.123456789,\"type\":\"integer\"}";
        String schema2 = "{\"multipleOf\":0.123456789,\"type\":\"integer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_patternProperties_id1() throws Exception {

        String schema1 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        String schema2 = "{\"patternProperties\":{\"f.*o\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_patternProperties_id2() throws Exception {

        String schema1 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        String schema2 = "{\"patternProperties\":{\"aaa*\":{\"maximum\":20},\"a*\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_patternProperties_id3() throws Exception {

        String schema1 = "{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}";
        String schema2 = "{\"patternProperties\":{\"X_\":{\"type\":\"string\"},\"[0-9]{2,}\":{\"type\":\"boolean\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_patternProperties_id4() throws Exception {

        String schema1 = "{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}";
        String schema2 = "{\"patternProperties\":{\"f.*\":true,\"b.*\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id1() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]},{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id2() throws Exception {

        String schema1 = "{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}";
        String schema2 = "{\"allOf\":[{\"properties\":{\"foo\":{\"type\":\"string\"}},\"required\":[\"foo\"]},{\"properties\":{\"baz\":{\"type\":\"null\"}},\"required\":[\"baz\"]}],\"properties\":{\"bar\":{\"type\":\"integer\"}},\"required\":[\"bar\"]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id3() throws Exception {

        String schema1 = "{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]}";
        String schema2 = "{\"allOf\":[{\"maximum\":30},{\"minimum\":20}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id4() throws Exception {

        String schema1 = "{\"allOf\":[true,true]}";
        String schema2 = "{\"allOf\":[true,true]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id5() throws Exception {

        String schema1 = "{\"allOf\":[true,false]}";
        String schema2 = "{\"allOf\":[true,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id6() throws Exception {

        String schema1 = "{\"allOf\":[false,false]}";
        String schema2 = "{\"allOf\":[false,false]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id7() throws Exception {

        String schema1 = "{\"allOf\":[{}]}";
        String schema2 = "{\"allOf\":[{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id8() throws Exception {

        String schema1 = "{\"allOf\":[{},{}]}";
        String schema2 = "{\"allOf\":[{},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id9() throws Exception {

        String schema1 = "{\"allOf\":[{},{\"type\":\"number\"}]}";
        String schema2 = "{\"allOf\":[{},{\"type\":\"number\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id10() throws Exception {

        String schema1 = "{\"allOf\":[{\"type\":\"number\"},{}]}";
        String schema2 = "{\"allOf\":[{\"type\":\"number\"},{}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id11() throws Exception {

        String schema1 = "{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]}";
        String schema2 = "{\"allOf\":[{\"allOf\":[{\"type\":\"null\"}]}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_allOf_id12() throws Exception {

        String schema1 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        String schema2 = "{\"allOf\":[{\"multipleOf\":2}],\"oneOf\":[{\"multipleOf\":5}],\"anyOf\":[{\"multipleOf\":3}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id1() throws Exception {

        String schema1 = "{\"format\":\"email\"}";
        String schema2 = "{\"format\":\"email\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id2() throws Exception {

        String schema1 = "{\"format\":\"ipv4\"}";
        String schema2 = "{\"format\":\"ipv4\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id3() throws Exception {

        String schema1 = "{\"format\":\"ipv6\"}";
        String schema2 = "{\"format\":\"ipv6\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id4() throws Exception {

        String schema1 = "{\"format\":\"hostname\"}";
        String schema2 = "{\"format\":\"hostname\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id5() throws Exception {

        String schema1 = "{\"format\":\"date-time\"}";
        String schema2 = "{\"format\":\"date-time\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id6() throws Exception {

        String schema1 = "{\"format\":\"json-pointer\"}";
        String schema2 = "{\"format\":\"json-pointer\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id7() throws Exception {

        String schema1 = "{\"format\":\"uri\"}";
        String schema2 = "{\"format\":\"uri\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id8() throws Exception {

        String schema1 = "{\"format\":\"uri-reference\"}";
        String schema2 = "{\"format\":\"uri-reference\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_format_id9() throws Exception {

        String schema1 = "{\"format\":\"uri-template\"}";
        String schema2 = "{\"format\":\"uri-template\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_ref_id1() throws Exception {

        String schema1 = "{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#\"}}}";
        String schema2 = "{\"additionalProperties\":false,\"properties\":{\"foo\":{\"$ref\":\"#\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_ref_id2() throws Exception {

        String schema1 = "{\"properties\":{\"bar\":{\"$ref\":\"#/properties/foo\"},\"foo\":{\"type\":\"integer\"}}}";
        String schema2 = "{\"properties\":{\"bar\":{\"$ref\":\"#/properties/foo\"},\"foo\":{\"type\":\"integer\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_ref_id3() throws Exception {

        String schema1 = "{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/items/0\"}]}";
        String schema2 = "{\"items\":[{\"type\":\"integer\"},{\"$ref\":\"#/items/0\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_ref_id4() throws Exception {

        String schema1 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        String schema2 = "{\"definitions\":{\"percent%field\":{\"type\":\"integer\"},\"tilde~field\":{\"type\":\"integer\"},\"slash/field\":{\"type\":\"integer\"}},\"properties\":{\"slash\":{\"$ref\":\"#/definitions/slash~1field\"},\"tilde\":{\"$ref\":\"#/definitions/tilde~0field\"},\"percent\":{\"$ref\":\"#/definitions/percent%25field\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_ref_id5() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"#/definitions/c\"}],\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/definitions/a\"},\"c\":{\"$ref\":\"#/definitions/b\"}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#/definitions/c\"}],\"definitions\":{\"a\":{\"type\":\"integer\"},\"b\":{\"$ref\":\"#/definitions/a\"},\"c\":{\"$ref\":\"#/definitions/b\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_ref_id6() throws Exception {

        String schema1 = "{\"definitions\":{\"reffed\":{\"type\":\"array\"}},\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/definitions/reffed\"}}}";
        String schema2 = "{\"definitions\":{\"reffed\":{\"type\":\"array\"}},\"properties\":{\"foo\":{\"maxItems\":2,\"$ref\":\"#/definitions/reffed\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id7() throws Exception {

        String schema1 = "{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json\",\"$id\":\"http://localhost:1234/sibling_id/\"}],\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/\"}";
        String schema2 = "{\"allOf\":[{\"$comment\":\"$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not ttp://localhost:1234/sibling_id/foo.json\",\"$ref\":\"foo.json\",\"$id\":\"http://localhost:1234/sibling_id/\"}],\"definitions\":{\"base_foo\":{\"$comment\":\"this canonical uri is http://localhost:1234/sibling_id/base/foo.json\",\"minimum\":5,\"$id\":\"foo.json\"},\"foo\":{\"minimum\":2,\"$id\":\"http://localhost:1234/sibling_id/foo.json\"}},\"$id\":\"http://localhost:1234/sibling_id/base/\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id8() throws Exception {

        String schema1 = "{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}";
        String schema2 = "{\"$ref\":\"http://json-schema.org/draft-06/schema#\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id9() throws Exception {

        String schema1 = "{\"properties\":{\"$ref\":{\"type\":\"string\"}}}";
        String schema2 = "{\"properties\":{\"$ref\":{\"type\":\"string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id10() throws Exception {

        String schema1 = "{\"definitions\":{\"is-string\":{\"type\":\"string\"}},\"properties\":{\"$ref\":{\"$ref\":\"#/definitions/is-string\"}}}";
        String schema2 = "{\"definitions\":{\"is-string\":{\"type\":\"string\"}},\"properties\":{\"$ref\":{\"$ref\":\"#/definitions/is-string\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id11() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"#/definitions/bool\"}],\"definitions\":{\"bool\":true}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#/definitions/bool\"}],\"definitions\":{\"bool\":true}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id12() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"#/definitions/bool\"}],\"definitions\":{\"bool\":false}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#/definitions/bool\"}],\"definitions\":{\"bool\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id13() throws Exception {

        String schema1 = "{\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node\"}},\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node\"}},\"meta\":{\"type\":\"string\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree\"}";
        String schema2 = "{\"description\":\"tree of nodes\",\"type\":\"object\",\"definitions\":{\"node\":{\"description\":\"node\",\"type\":\"object\",\"properties\":{\"subtree\":{\"$ref\":\"tree\"},\"value\":{\"type\":\"number\"}},\"required\":[\"value\"],\"$id\":\"http://localhost:1234/node\"}},\"properties\":{\"nodes\":{\"type\":\"array\",\"items\":{\"$ref\":\"node\"}},\"meta\":{\"type\":\"string\"}},\"required\":[\"meta\",\"nodes\"],\"$id\":\"http://localhost:1234/tree\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id14() throws Exception {

        String schema1 = "{\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}},\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/definitions/foo%22bar\"}}}";
        String schema2 = "{\"definitions\":{\"foo\\\"bar\":{\"type\":\"number\"}},\"properties\":{\"foo\\\"bar\":{\"$ref\":\"#/definitions/foo%22bar\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id15() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"#foo\"}],\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo\"}}}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"#foo\"}],\"definitions\":{\"A\":{\"type\":\"integer\",\"$id\":\"#foo\"}}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id16() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested.json#foo\"}],\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo\"}},\"$id\":\"nested.json\"}},\"$id\":\"http://localhost:1234/root\"}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"http://localhost:1234/nested.json#foo\"}],\"definitions\":{\"A\":{\"definitions\":{\"B\":{\"type\":\"integer\",\"$id\":\"#foo\"}},\"$id\":\"nested.json\"}},\"$id\":\"http://localhost:1234/root\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id17() throws Exception {

        String schema1 = "{\"definitions\":{\"a_string\":{\"type\":\"string\"}},\"enum\":[{\"$ref\":\"#/definitions/a_string\"}]}";
        String schema2 = "{\"definitions\":{\"a_string\":{\"type\":\"string\"}},\"enum\":[{\"$ref\":\"#/definitions/a_string\"}]}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id18() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs2.json\"}},\"$id\":\"http://example.com/schema-relative-uri-defs1.json\"}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-relative-uri-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"schema-relative-uri-defs2.json\"}},\"$id\":\"http://example.com/schema-relative-uri-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    @Ignore
    public void draft6_reflexive_ref_id19() throws Exception {

        String schema1 = "{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs2.json\"}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs1.json\"}";
        String schema2 = "{\"allOf\":[{\"$ref\":\"schema-refs-absolute-uris-defs2.json\"}],\"properties\":{\"foo\":{\"allOf\":[{\"$ref\":\"#/definitions/inner\"}],\"definitions\":{\"inner\":{\"properties\":{\"bar\":{\"type\":\"string\"}}}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs2.json\"}},\"$id\":\"http://example.com/schema-refs-absolute-uris-defs1.json\"}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_maximum_id1() throws Exception {

        String schema1 = "{\"maximum\":3}";
        String schema2 = "{\"maximum\":3}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_maximum_id2() throws Exception {

        String schema1 = "{\"maximum\":300}";
        String schema2 = "{\"maximum\":300}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_minLength_id1() throws Exception {

        String schema1 = "{\"minLength\":2}";
        String schema2 = "{\"minLength\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_maxItems_id1() throws Exception {

        String schema1 = "{\"maxItems\":2}";
        String schema2 = "{\"maxItems\":2}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_contains_id1() throws Exception {

        String schema1 = "{\"contains\":{\"minimum\":5}}";
        String schema2 = "{\"contains\":{\"minimum\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_contains_id2() throws Exception {

        String schema1 = "{\"contains\":{\"const\":5}}";
        String schema2 = "{\"contains\":{\"const\":5}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_contains_id3() throws Exception {

        String schema1 = "{\"contains\":true}";
        String schema2 = "{\"contains\":true}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_contains_id4() throws Exception {

        String schema1 = "{\"contains\":false}";
        String schema2 = "{\"contains\":false}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_contains_id5() throws Exception {

        String schema1 = "{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}";
        String schema2 = "{\"contains\":{\"multipleOf\":3},\"items\":{\"multipleOf\":2}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }

    @Test(timeout = 5000)
    public void draft6_reflexive_contains_id6() throws Exception {

        String schema1 = "{\"contains\":{\"else\":true,\"if\":false}}";
        String schema2 = "{\"contains\":{\"else\":true,\"if\":false}}";
        data = jsonSchemaLib.compareSchemas(schema1, schema2);

        boolean resultS1Subset = false;
        boolean resultS2Subset = false;

        if (JsonSchemaRelationships.LEFT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS2Subset = true;
        }

        if (JsonSchemaRelationships.RIGHT_IS_GENERALIZATION.equals(data.getRelationship()) || JsonSchemaRelationships.EQUIVALENT.equals(data.getRelationship())) {
            resultS1Subset = true;
        }

        Assert.assertEquals("schema 1 must be subset of schema 2", true, resultS1Subset);
        Assert.assertEquals("schema 2 must be subset of schema 1", true, resultS2Subset);
    }
}
