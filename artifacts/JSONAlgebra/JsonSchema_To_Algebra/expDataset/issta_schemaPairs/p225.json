[
  {
    "id": 1,
    "schema1": {
      "type": "object",
      "$schema": "http://json-schema.org/schema#",
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PodPreset",
          "version": "v1alpha1",
          "group": "settings.k8s.io"
        }
      ],
      "description": "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
      "properties": {
        "kind": {
          "type": [
            "string",
            "null"
          ],
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
        },
        "spec": {
          "description": "PodPresetSpec is a description of a pod preset.",
          "properties": {
            "volumes": {
              "items": {
                "required": [
                  "name"
                ],
                "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
                "properties": {
                  "portworxVolume": {
                    "required": [
                      "volumeID"
                    ],
                    "description": "PortworxVolumeSource represents a Portworx volume resource.",
                    "properties": {
                      "readOnly": {
                        "type": "boolean",
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      },
                      "volumeID": {
                        "type": "string",
                        "description": "VolumeID uniquely identifies a Portworx volume"
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      }
                    }
                  },
                  "glusterfs": {
                    "required": [
                      "endpoints",
                      "path"
                    ],
                    "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
                      },
                      "endpoints": {
                        "type": "string",
                        "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
                      }
                    }
                  },
                  "gitRepo": {
                    "required": [
                      "repository"
                    ],
                    "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
                    "properties": {
                      "directory": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
                      },
                      "repository": {
                        "type": "string",
                        "description": "Repository URL"
                      },
                      "revision": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Commit hash for the specified revision."
                      }
                    }
                  },
                  "flocker": {
                    "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
                    "properties": {
                      "datasetName": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
                      },
                      "datasetUUID": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
                      }
                    }
                  },
                  "storageos": {
                    "description": "Represents a StorageOS persistent volume resource.",
                    "properties": {
                      "volumeName": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      },
                      "volumeNamespace": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
                      },
                      "secretRef": {
                        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                        "properties": {
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                          }
                        }
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      }
                    }
                  },
                  "iscsi": {
                    "required": [
                      "targetPortal",
                      "iqn",
                      "lun"
                    ],
                    "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "targetPortal": {
                        "type": "string",
                        "description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
                      },
                      "portals": {
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": [
                          "array",
                          "null"
                        ],
                        "description": "iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
                      },
                      "secretRef": {
                        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                        "properties": {
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                          }
                        }
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
                      },
                      "chapAuthSession": {
                        "type": "boolean",
                        "description": "whether support iSCSI Session CHAP authentication"
                      },
                      "iscsiInterface": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
                      },
                      "iqn": {
                        "type": "string",
                        "description": "Target iSCSI Qualified Name."
                      },
                      "chapAuthDiscovery": {
                        "type": "boolean",
                        "description": "whether support iSCSI Discovery CHAP authentication"
                      },
                      "lun": {
                        "type": "integer",
                        "description": "iSCSI target lun number.",
                        "format": "int32"
                      }
                    }
                  },
                  "projected": {
                    "required": [
                      "sources"
                    ],
                    "description": "Represents a projected volume source",
                    "properties": {
                      "sources": {
                        "items": {
                          "description": "Projection that may be projected along with other supported volume types",
                          "properties": {
                            "configMap": {
                              "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                              "properties": {
                                "items": {
                                  "items": {
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "description": "Maps a string key to a path within a volume.",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                      },
                                      "mode": {
                                        "type": "integer",
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "format": "int32"
                                      },
                                      "key": {
                                        "type": "string",
                                        "description": "The key to project."
                                      }
                                    }
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                                },
                                "optional": {
                                  "type": "boolean",
                                  "description": "Specify whether the ConfigMap or it's keys must be defined"
                                },
                                "name": {
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                                }
                              }
                            },
                            "secret": {
                              "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                              "properties": {
                                "items": {
                                  "items": {
                                    "required": [
                                      "key",
                                      "path"
                                    ],
                                    "description": "Maps a string key to a path within a volume.",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                                      },
                                      "mode": {
                                        "type": "integer",
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "format": "int32"
                                      },
                                      "key": {
                                        "type": "string",
                                        "description": "The key to project."
                                      }
                                    }
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                                },
                                "optional": {
                                  "type": "boolean",
                                  "description": "Specify whether the Secret or its key must be defined"
                                },
                                "name": {
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                                }
                              }
                            },
                            "downwardAPI": {
                              "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
                              "properties": {
                                "items": {
                                  "items": {
                                    "required": [
                                      "path"
                                    ],
                                    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
                                      },
                                      "fieldRef": {
                                        "required": [
                                          "fieldPath"
                                        ],
                                        "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                                        "properties": {
                                          "fieldPath": {
                                            "type": "string",
                                            "description": "Path of the field to select in the specified API version."
                                          },
                                          "apiVersion": {
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                          }
                                        }
                                      },
                                      "mode": {
                                        "type": "integer",
                                        "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                                        "format": "int32"
                                      },
                                      "resourceFieldRef": {
                                        "required": [
                                          "resource"
                                        ],
                                        "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                                        "properties": {
                                          "containerName": {
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "description": "Container name: required for volumes, optional for env vars"
                                          },
                                          "resource": {
                                            "type": "string",
                                            "description": "Required: resource to select"
                                          },
                                          "divisor": {
                                            "oneOf": [
                                              {
                                                "type": [
                                                  "string",
                                                  "null"
                                                ]
                                              },
                                              {
                                                "type": "integer"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ],
                                  "description": "Items is a list of DownwardAPIVolume file"
                                }
                              }
                            }
                          }
                        },
                        "type": "array",
                        "description": "list of volume projections"
                      },
                      "defaultMode": {
                        "type": "integer",
                        "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "format": "int32"
                      }
                    }
                  },
                  "secret": {
                    "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "items": {
                        "items": {
                          "required": [
                            "key",
                            "path"
                          ],
                          "description": "Maps a string key to a path within a volume.",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                            },
                            "mode": {
                              "type": "integer",
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "format": "int32"
                            },
                            "key": {
                              "type": "string",
                              "description": "The key to project."
                            }
                          }
                        },
                        "type": [
                          "array",
                          "null"
                        ],
                        "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                      },
                      "optional": {
                        "type": "boolean",
                        "description": "Specify whether the Secret or it's keys must be defined"
                      },
                      "defaultMode": {
                        "type": "integer",
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "format": "int32"
                      },
                      "secretName": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
                      }
                    }
                  },
                  "flexVolume": {
                    "required": [
                      "driver"
                    ],
                    "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.",
                    "properties": {
                      "readOnly": {
                        "type": "boolean",
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      },
                      "options": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": "object",
                        "description": "Optional: Extra command options if any."
                      },
                      "driver": {
                        "type": "string",
                        "description": "Driver is the name of the driver to use for this volume."
                      },
                      "secretRef": {
                        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                        "properties": {
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                          }
                        }
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
                      }
                    }
                  },
                  "photonPersistentDisk": {
                    "required": [
                      "pdID"
                    ],
                    "description": "Represents a Photon Controller persistent disk resource.",
                    "properties": {
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      },
                      "pdID": {
                        "type": "string",
                        "description": "ID that identifies Photon Controller persistent disk"
                      }
                    }
                  },
                  "azureDisk": {
                    "required": [
                      "diskName",
                      "diskURI"
                    ],
                    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "properties": {
                      "diskName": {
                        "type": "string",
                        "description": "The Name of the data disk in the blob storage"
                      },
                      "cachingMode": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Host Caching mode: None, Read Only, Read Write."
                      },
                      "kind": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      },
                      "diskURI": {
                        "type": "string",
                        "description": "The URI the data disk in the blob storage"
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      }
                    }
                  },
                  "fc": {
                    "required": [
                      "targetWWNs",
                      "lun"
                    ],
                    "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "readOnly": {
                        "type": "boolean",
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      },
                      "targetWWNs": {
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": "array",
                        "description": "Required: FC target worldwide names (WWNs)"
                      },
                      "lun": {
                        "type": "integer",
                        "description": "Required: FC target lun number",
                        "format": "int32"
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      }
                    }
                  },
                  "scaleIO": {
                    "required": [
                      "gateway",
                      "system",
                      "secretRef"
                    ],
                    "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
                    "properties": {
                      "storageMode": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\")."
                      },
                      "secretRef": {
                        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                        "properties": {
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                          }
                        }
                      },
                      "protectionDomain": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The name of the Protection Domain for the configured storage (defaults to \"default\")."
                      },
                      "volumeName": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
                      },
                      "sslEnabled": {
                        "type": "boolean",
                        "description": "Flag to enable/disable SSL communication with Gateway, default false"
                      },
                      "system": {
                        "type": "string",
                        "description": "The name of the storage system as configured in ScaleIO."
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      },
                      "storagePool": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The Storage Pool associated with the protection domain (defaults to \"default\")."
                      },
                      "gateway": {
                        "type": "string",
                        "description": "The host address of the ScaleIO API Gateway."
                      }
                    }
                  },
                  "emptyDir": {
                    "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "sizeLimit": {
                        "oneOf": [
                          {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          {
                            "type": "integer"
                          }
                        ]
                      },
                      "medium": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
                      }
                    }
                  },
                  "persistentVolumeClaim": {
                    "required": [
                      "claimName"
                    ],
                    "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
                    "properties": {
                      "readOnly": {
                        "type": "boolean",
                        "description": "Will force the ReadOnly setting in VolumeMounts. Default false."
                      },
                      "claimName": {
                        "type": "string",
                        "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
                      }
                    }
                  },
                  "configMap": {
                    "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "items": {
                        "items": {
                          "required": [
                            "key",
                            "path"
                          ],
                          "description": "Maps a string key to a path within a volume.",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                            },
                            "mode": {
                              "type": "integer",
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "format": "int32"
                            },
                            "key": {
                              "type": "string",
                              "description": "The key to project."
                            }
                          }
                        },
                        "type": [
                          "array",
                          "null"
                        ],
                        "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                      },
                      "optional": {
                        "type": "boolean",
                        "description": "Specify whether the ConfigMap or it's keys must be defined"
                      },
                      "defaultMode": {
                        "type": "integer",
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "format": "int32"
                      },
                      "name": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                      }
                    }
                  },
                  "cephfs": {
                    "required": [
                      "monitors"
                    ],
                    "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
                    "properties": {
                      "secretRef": {
                        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                        "properties": {
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                          }
                        }
                      },
                      "secretFile": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
                      },
                      "user": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
                      },
                      "path": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
                      },
                      "monitors": {
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": "array",
                        "description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
                      }
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  },
                  "azureFile": {
                    "required": [
                      "secretName",
                      "shareName"
                    ],
                    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "properties": {
                      "shareName": {
                        "type": "string",
                        "description": "Share Name"
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
                      },
                      "secretName": {
                        "type": "string",
                        "description": "the name of secret that contains Azure Storage Account Name and Key"
                      }
                    }
                  },
                  "quobyte": {
                    "required": [
                      "registry",
                      "volume"
                    ],
                    "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
                    "properties": {
                      "volume": {
                        "type": "string",
                        "description": "Volume is a string that references an already created Quobyte volume by name."
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
                      },
                      "group": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Group to map volume access to Default is no group"
                      },
                      "registry": {
                        "type": "string",
                        "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
                      },
                      "user": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "User to map volume access to Defaults to serivceaccount user"
                      }
                    }
                  },
                  "hostPath": {
                    "required": [
                      "path"
                    ],
                    "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
                      }
                    }
                  },
                  "nfs": {
                    "required": [
                      "server",
                      "path"
                    ],
                    "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                      },
                      "server": {
                        "type": "string",
                        "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                      }
                    }
                  },
                  "gcePersistentDisk": {
                    "required": [
                      "pdName"
                    ],
                    "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
                    "properties": {
                      "readOnly": {
                        "type": "boolean",
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
                      },
                      "partition": {
                        "type": "integer",
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "format": "int32"
                      },
                      "pdName": {
                        "type": "string",
                        "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
                      }
                    }
                  },
                  "cinder": {
                    "required": [
                      "volumeID"
                    ],
                    "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "readOnly": {
                        "type": "boolean",
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
                      },
                      "volumeID": {
                        "type": "string",
                        "description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
                      }
                    }
                  },
                  "awsElasticBlockStore": {
                    "required": [
                      "volumeID"
                    ],
                    "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "readOnly": {
                        "type": "boolean",
                        "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
                      },
                      "partition": {
                        "type": "integer",
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                        "format": "int32"
                      },
                      "volumeID": {
                        "type": "string",
                        "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
                      }
                    }
                  },
                  "rbd": {
                    "required": [
                      "monitors",
                      "image"
                    ],
                    "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "secretRef": {
                        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
                        "properties": {
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                          }
                        }
                      },
                      "image": {
                        "type": "string",
                        "description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
                      },
                      "keyring": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
                      },
                      "readOnly": {
                        "type": "boolean",
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
                      },
                      "user": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
                      },
                      "monitors": {
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": "array",
                        "description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
                      },
                      "pool": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
                      }
                    }
                  },
                  "downwardAPI": {
                    "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "items": {
                        "items": {
                          "required": [
                            "path"
                          ],
                          "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
                            },
                            "fieldRef": {
                              "required": [
                                "fieldPath"
                              ],
                              "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                              "properties": {
                                "fieldPath": {
                                  "type": "string",
                                  "description": "Path of the field to select in the specified API version."
                                },
                                "apiVersion": {
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                }
                              }
                            },
                            "mode": {
                              "type": "integer",
                              "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                              "format": "int32"
                            },
                            "resourceFieldRef": {
                              "required": [
                                "resource"
                              ],
                              "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                              "properties": {
                                "containerName": {
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "description": "Container name: required for volumes, optional for env vars"
                                },
                                "resource": {
                                  "type": "string",
                                  "description": "Required: resource to select"
                                },
                                "divisor": {
                                  "oneOf": [
                                    {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    {
                                      "type": "integer"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "type": [
                          "array",
                          "null"
                        ],
                        "description": "Items is a list of downward API volume file"
                      },
                      "defaultMode": {
                        "type": "integer",
                        "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                        "format": "int32"
                      }
                    }
                  },
                  "vsphereVolume": {
                    "required": [
                      "volumePath"
                    ],
                    "description": "Represents a vSphere volume resource.",
                    "properties": {
                      "storagePolicyName": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Storage Policy Based Management (SPBM) profile name."
                      },
                      "fsType": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                      },
                      "storagePolicyID": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
                      },
                      "volumePath": {
                        "type": "string",
                        "description": "Path that identifies vSphere volume vmdk"
                      }
                    }
                  }
                }
              },
              "type": [
                "array",
                "null"
              ],
              "description": "Volumes defines the collection of Volume to inject into the pod."
            },
            "volumeMounts": {
              "items": {
                "required": [
                  "name",
                  "mountPath"
                ],
                "description": "VolumeMount describes a mounting of a Volume within a container.",
                "properties": {
                  "readOnly": {
                    "type": "boolean",
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
                  },
                  "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
                  },
                  "subPath": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                  },
                  "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume."
                  }
                }
              },
              "type": [
                "array",
                "null"
              ],
              "description": "VolumeMounts defines the collection of VolumeMount to inject into containers."
            },
            "env": {
              "items": {
                "required": [
                  "name"
                ],
                "description": "EnvVar represents an environment variable present in a Container.",
                "properties": {
                  "valueFrom": {
                    "description": "EnvVarSource represents a source for the value of an EnvVar.",
                    "properties": {
                      "secretKeyRef": {
                        "required": [
                          "key"
                        ],
                        "description": "SecretKeySelector selects a key of a Secret.",
                        "properties": {
                          "optional": {
                            "type": "boolean",
                            "description": "Specify whether the Secret or it's key must be defined"
                          },
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                          },
                          "key": {
                            "type": "string",
                            "description": "The key of the secret to select from.  Must be a valid secret key."
                          }
                        }
                      },
                      "fieldRef": {
                        "required": [
                          "fieldPath"
                        ],
                        "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                        "properties": {
                          "fieldPath": {
                            "type": "string",
                            "description": "Path of the field to select in the specified API version."
                          },
                          "apiVersion": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                          }
                        }
                      },
                      "configMapKeyRef": {
                        "required": [
                          "key"
                        ],
                        "description": "Selects a key from a ConfigMap.",
                        "properties": {
                          "optional": {
                            "type": "boolean",
                            "description": "Specify whether the ConfigMap or it's key must be defined"
                          },
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                          },
                          "key": {
                            "type": "string",
                            "description": "The key to select."
                          }
                        }
                      },
                      "resourceFieldRef": {
                        "required": [
                          "resource"
                        ],
                        "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                        "properties": {
                          "containerName": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Container name: required for volumes, optional for env vars"
                          },
                          "resource": {
                            "type": "string",
                            "description": "Required: resource to select"
                          },
                          "divisor": {
                            "oneOf": [
                              {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              {
                                "type": "integer"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER."
                  },
                  "value": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
                  }
                }
              },
              "type": [
                "array",
                "null"
              ],
              "description": "Env defines the collection of EnvVar to inject into containers."
            },
            "envFrom": {
              "items": {
                "description": "EnvFromSource represents the source of a set of ConfigMaps",
                "properties": {
                  "prefix": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
                  },
                  "configMapRef": {
                    "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                    "properties": {
                      "optional": {
                        "type": "boolean",
                        "description": "Specify whether the ConfigMap must be defined"
                      },
                      "name": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                      }
                    }
                  },
                  "secretRef": {
                    "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                    "properties": {
                      "optional": {
                        "type": "boolean",
                        "description": "Specify whether the Secret must be defined"
                      },
                      "name": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                      }
                    }
                  }
                }
              },
              "type": [
                "array",
                "null"
              ],
              "description": "EnvFrom defines the collection of EnvFromSource to inject into containers."
            },
            "selector": {
              "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
              "properties": {
                "matchLabels": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": "object",
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                },
                "matchExpressions": {
                  "items": {
                    "required": [
                      "key",
                      "operator"
                    ],
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "properties": {
                      "operator": {
                        "type": "string",
                        "description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
                      },
                      "values": {
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": [
                          "array",
                          "null"
                        ],
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                      },
                      "key": {
                        "x-kubernetes-patch-merge-key": "key",
                        "type": "string",
                        "description": "key is the label key that the selector applies to.",
                        "x-kubernetes-patch-strategy": "merge"
                      }
                    }
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                }
              }
            }
          }
        },
        "apiVersion": {
          "type": [
            "string",
            "null"
          ],
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
        },
        "metadata": {
          "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
          "properties": {
            "ownerReferences": {
              "items": {
                "required": [
                  "apiVersion",
                  "kind",
                  "name",
                  "uid"
                ],
                "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
                  },
                  "uid": {
                    "type": "string",
                    "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                  },
                  "apiVersion": {
                    "type": "string",
                    "description": "API version of the referent."
                  },
                  "controller": {
                    "type": "boolean",
                    "description": "If true, this reference points to the managing controller."
                  },
                  "blockOwnerDeletion": {
                    "type": "boolean",
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                  }
                }
              },
              "x-kubernetes-patch-merge-key": "uid",
              "type": [
                "array",
                "null"
              ],
              "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
              "x-kubernetes-patch-strategy": "merge"
            },
            "uid": {
              "type": [
                "string",
                "null"
              ],
              "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
            },
            "deletionTimestamp": {
              "type": [
                "string",
                "null"
              ],
              "format": "date-time"
            },
            "clusterName": {
              "type": [
                "string",
                "null"
              ],
              "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
            },
            "deletionGracePeriodSeconds": {
              "type": "integer",
              "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
              "format": "int64"
            },
            "labels": {
              "additionalProperties": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": "object",
              "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
            },
            "namespace": {
              "type": [
                "string",
                "null"
              ],
              "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
            },
            "finalizers": {
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": [
                "array",
                "null"
              ],
              "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
              "x-kubernetes-patch-strategy": "merge"
            },
            "generation": {
              "type": "integer",
              "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
              "format": "int64"
            },
            "initializers": {
              "required": [
                "pending"
              ],
              "description": "Initializers tracks the progress of initialization.",
              "properties": {
                "result": {
                  "description": "Status is a return value for calls that don't return other objects.",
                  "properties": {
                    "status": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
                    },
                    "kind": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
                    },
                    "code": {
                      "type": "integer",
                      "description": "Suggested HTTP return code for this status, 0 if not set.",
                      "format": "int32"
                    },
                    "apiVersion": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
                    },
                    "reason": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
                    },
                    "details": {
                      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
                      "properties": {
                        "kind": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
                        },
                        "group": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The group attribute of the resource associated with the status StatusReason."
                        },
                        "name": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
                        },
                        "retryAfterSeconds": {
                          "type": "integer",
                          "description": "If specified, the time in seconds before the operation should be retried.",
                          "format": "int32"
                        },
                        "causes": {
                          "items": {
                            "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
                            "properties": {
                              "field": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
                              },
                              "message": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
                              },
                              "reason": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
                              }
                            }
                          },
                          "type": [
                            "array",
                            "null"
                          ],
                          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
                        },
                        "uid": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                        }
                      }
                    },
                    "message": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "A human-readable description of the status of this operation."
                    },
                    "metadata": {
                      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
                      "properties": {
                        "selfLink": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
                        },
                        "resourceVersion": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
                        }
                      }
                    }
                  }
                },
                "pending": {
                  "items": {
                    "required": [
                      "name"
                    ],
                    "description": "Initializer is information about an initializer that has not yet completed.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "name of the process that is responsible for initializing this object."
                      }
                    }
                  },
                  "type": "array",
                  "description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
                }
              }
            },
            "resourceVersion": {
              "type": [
                "string",
                "null"
              ],
              "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
            },
            "generateName": {
              "type": [
                "string",
                "null"
              ],
              "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
            },
            "creationTimestamp": {
              "type": [
                "string",
                "null"
              ],
              "format": "date-time"
            },
            "annotations": {
              "additionalProperties": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": "object",
              "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
            },
            "selfLink": {
              "type": [
                "string",
                "null"
              ],
              "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
            },
            "name": {
              "type": [
                "string",
                "null"
              ],
              "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
            }
          }
        }
      }
    },
    "schema2": {
      "description": "PersistentVolumeList is a list of PersistentVolume items.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": [
            "string",
            "null"
          ]
        },
        "items": {
          "description": "List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
                "type": [
                  "string",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "PersistentVolume"
                ]
              },
              "metadata": {
                "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
                "properties": {
                  "annotations": {
                    "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "clusterName": {
                    "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "creationTimestamp": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "deletionTimestamp": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "generation": {
                    "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "initializers": {
                    "description": "Initializers tracks the progress of initialization.",
                    "required": [
                      "pending"
                    ],
                    "properties": {
                      "pending": {
                        "description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.",
                        "type": "array",
                        "items": {
                          "description": "Initializer is information about an initializer that has not yet completed.",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "name of the process that is responsible for initializing this object.",
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-patch-merge-key": "name",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "result": {
                        "description": "Status is a return value for calls that don't return other objects.",
                        "properties": {
                          "apiVersion": {
                            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "code": {
                            "description": "Suggested HTTP return code for this status, 0 if not set.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "details": {
                            "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
                            "properties": {
                              "causes": {
                                "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
                                  "properties": {
                                    "field": {
                                      "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "message": {
                                      "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "reason": {
                                      "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                }
                              },
                              "group": {
                                "description": "The group attribute of the resource associated with the status StatusReason.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "kind": {
                                "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "name": {
                                "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "retryAfterSeconds": {
                                "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "uid": {
                                "description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            }
                          },
                          "kind": {
                            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "Status"
                            ]
                          },
                          "message": {
                            "description": "A human-readable description of the status of this operation.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "metadata": {
                            "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
                            "properties": {
                              "continue": {
                                "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "resourceVersion": {
                                "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "selfLink": {
                                "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            }
                          },
                          "reason": {
                            "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "status": {
                            "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "x-kubernetes-group-version-kind": [
                          {
                            "group": "",
                            "kind": "Status",
                            "version": "v1"
                          }
                        ]
                      }
                    }
                  },
                  "labels": {
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "namespace": {
                    "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
                      "required": [
                        "apiVersion",
                        "kind",
                        "name",
                        "uid"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "API version of the referent.",
                          "type": "string"
                        },
                        "blockOwnerDeletion": {
                          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                          "type": "boolean"
                        },
                        "controller": {
                          "description": "If true, this reference points to the managing controller.",
                          "type": "boolean"
                        },
                        "kind": {
                          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        },
                        "uid": {
                          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-patch-merge-key": "uid",
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selfLink": {
                    "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "spec": {
                "description": "PersistentVolumeSpec is the specification of a persistent volume.",
                "properties": {
                  "accessModes": {
                    "description": "AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "awsElasticBlockStore": {
                    "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "partition": {
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                        "type": "string"
                      }
                    }
                  },
                  "azureDisk": {
                    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
                    "required": [
                      "diskName",
                      "diskURI"
                    ],
                    "properties": {
                      "cachingMode": {
                        "description": "Host Caching mode: None, Read Only, Read Write.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "diskName": {
                        "description": "The Name of the data disk in the blob storage",
                        "type": "string"
                      },
                      "diskURI": {
                        "description": "The URI the data disk in the blob storage",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "kind": {
                        "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      }
                    }
                  },
                  "azureFile": {
                    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
                    "required": [
                      "secretName",
                      "shareName"
                    ],
                    "properties": {
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "the name of secret that contains Azure Storage Account Name and Key",
                        "type": "string"
                      },
                      "secretNamespace": {
                        "description": "the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "shareName": {
                        "description": "Share Name",
                        "type": "string"
                      }
                    }
                  },
                  "capacity": {
                    "description": "A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
                    "type": "object",
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        {
                          "type": "integer"
                        }
                      ]
                    }
                  },
                  "cephfs": {
                    "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
                    "required": [
                      "monitors"
                    ],
                    "properties": {
                      "monitors": {
                        "description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "path": {
                        "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
                        "type": "boolean"
                      },
                      "secretFile": {
                        "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "secretRef": {
                        "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                        "properties": {
                          "name": {
                            "description": "Name is unique within a namespace to reference a secret resource.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace defines the space within which the secret name must be unique.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      },
                      "user": {
                        "description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "cinder": {
                    "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
                        "type": "string"
                      }
                    }
                  },
                  "claimRef": {
                    "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "fieldPath": {
                        "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "namespace": {
                        "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "resourceVersion": {
                        "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "uid": {
                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "csi": {
                    "description": "Represents storage that is managed by an external CSI volume driver (Beta feature)",
                    "required": [
                      "driver",
                      "volumeHandle"
                    ],
                    "properties": {
                      "controllerPublishSecretRef": {
                        "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                        "properties": {
                          "name": {
                            "description": "Name is unique within a namespace to reference a secret resource.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace defines the space within which the secret name must be unique.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      },
                      "driver": {
                        "description": "Driver is the name of the driver to use for this volume. Required.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "nodePublishSecretRef": {
                        "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                        "properties": {
                          "name": {
                            "description": "Name is unique within a namespace to reference a secret resource.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace defines the space within which the secret name must be unique.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      },
                      "nodeStageSecretRef": {
                        "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                        "properties": {
                          "name": {
                            "description": "Name is unique within a namespace to reference a secret resource.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace defines the space within which the secret name must be unique.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      },
                      "readOnly": {
                        "description": "Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
                        "type": "boolean"
                      },
                      "volumeAttributes": {
                        "description": "Attributes of the volume to publish.",
                        "type": "object",
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "volumeHandle": {
                        "description": "VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.",
                        "type": "string"
                      }
                    }
                  },
                  "fc": {
                    "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "lun": {
                        "description": "Optional: FC target lun number",
                        "type": "integer",
                        "format": "int32"
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "targetWWNs": {
                        "description": "Optional: FC target worldwide names (WWNs)",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "wwids": {
                        "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    }
                  },
                  "flexVolume": {
                    "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
                    "required": [
                      "driver"
                    ],
                    "properties": {
                      "driver": {
                        "description": "Driver is the name of the driver to use for this volume.",
                        "type": "string"
                      },
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "options": {
                        "description": "Optional: Extra command options if any.",
                        "type": "object",
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "readOnly": {
                        "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                        "properties": {
                          "name": {
                            "description": "Name is unique within a namespace to reference a secret resource.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace defines the space within which the secret name must be unique.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "flocker": {
                    "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
                    "properties": {
                      "datasetName": {
                        "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "datasetUUID": {
                        "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "gcePersistentDisk": {
                    "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
                    "required": [
                      "pdName"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "partition": {
                        "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pdName": {
                        "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                        "type": "boolean"
                      }
                    }
                  },
                  "glusterfs": {
                    "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
                    "required": [
                      "endpoints",
                      "path"
                    ],
                    "properties": {
                      "endpoints": {
                        "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
                        "type": "boolean"
                      }
                    }
                  },
                  "hostPath": {
                    "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
                    "required": [
                      "path"
                    ],
                    "properties": {
                      "path": {
                        "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "iscsi": {
                    "description": "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
                    "required": [
                      "targetPortal",
                      "iqn",
                      "lun"
                    ],
                    "properties": {
                      "chapAuthDiscovery": {
                        "description": "whether support iSCSI Discovery CHAP authentication",
                        "type": "boolean"
                      },
                      "chapAuthSession": {
                        "description": "whether support iSCSI Session CHAP authentication",
                        "type": "boolean"
                      },
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "initiatorName": {
                        "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "iqn": {
                        "description": "Target iSCSI Qualified Name.",
                        "type": "string"
                      },
                      "iscsiInterface": {
                        "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "lun": {
                        "description": "iSCSI Target Lun number.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "portals": {
                        "description": "iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                        "properties": {
                          "name": {
                            "description": "Name is unique within a namespace to reference a secret resource.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace defines the space within which the secret name must be unique.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      },
                      "targetPortal": {
                        "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                        "type": "string"
                      }
                    }
                  },
                  "local": {
                    "description": "Local represents directly-attached storage with node affinity",
                    "required": [
                      "path"
                    ],
                    "properties": {
                      "path": {
                        "description": "The full path to the volume on the node For alpha, this path must be a directory Once block as a source is supported, then this path can point to a block device",
                        "type": "string"
                      }
                    }
                  },
                  "mountOptions": {
                    "description": "A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "nfs": {
                    "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
                    "required": [
                      "server",
                      "path"
                    ],
                    "properties": {
                      "path": {
                        "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "boolean"
                      },
                      "server": {
                        "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                        "type": "string"
                      }
                    }
                  },
                  "nodeAffinity": {
                    "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
                    "properties": {
                      "required": {
                        "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
                        "required": [
                          "nodeSelectorTerms"
                        ],
                        "properties": {
                          "nodeSelectorTerms": {
                            "description": "Required. A list of node selector terms. The terms are ORed.",
                            "type": "array",
                            "items": {
                              "description": "A null or empty node selector term matches no objects.",
                              "required": [
                                "matchExpressions"
                              ],
                              "properties": {
                                "matchExpressions": {
                                  "description": "Required. A list of node selector requirements. The requirements are ANDed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                        "type": [
                                          "array",
                                          "null"
                                        ],
                                        "items": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "persistentVolumeReclaimPolicy": {
                    "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "photonPersistentDisk": {
                    "description": "Represents a Photon Controller persistent disk resource.",
                    "required": [
                      "pdID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "pdID": {
                        "description": "ID that identifies Photon Controller persistent disk",
                        "type": "string"
                      }
                    }
                  },
                  "portworxVolume": {
                    "description": "PortworxVolumeSource represents a Portworx volume resource.",
                    "required": [
                      "volumeID"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "volumeID": {
                        "description": "VolumeID uniquely identifies a Portworx volume",
                        "type": "string"
                      }
                    }
                  },
                  "quobyte": {
                    "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
                    "required": [
                      "registry",
                      "volume"
                    ],
                    "properties": {
                      "group": {
                        "description": "Group to map volume access to Default is no group",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                        "type": "boolean"
                      },
                      "registry": {
                        "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                        "type": "string"
                      },
                      "user": {
                        "description": "User to map volume access to Defaults to serivceaccount user",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "volume": {
                        "description": "Volume is a string that references an already created Quobyte volume by name.",
                        "type": "string"
                      }
                    }
                  },
                  "rbd": {
                    "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
                    "required": [
                      "monitors",
                      "image"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "image": {
                        "description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
                        "type": "string"
                      },
                      "keyring": {
                        "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "monitors": {
                        "description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
                        "type": "array",
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "pool": {
                        "description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "readOnly": {
                        "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                        "properties": {
                          "name": {
                            "description": "Name is unique within a namespace to reference a secret resource.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace defines the space within which the secret name must be unique.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      },
                      "user": {
                        "description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "scaleIO": {
                    "description": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
                    "required": [
                      "gateway",
                      "system",
                      "secretRef"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "gateway": {
                        "description": "The host address of the ScaleIO API Gateway.",
                        "type": "string"
                      },
                      "protectionDomain": {
                        "description": "The name of the ScaleIO Protection Domain for the configured storage.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
                        "properties": {
                          "name": {
                            "description": "Name is unique within a namespace to reference a secret resource.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace defines the space within which the secret name must be unique.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      },
                      "sslEnabled": {
                        "description": "Flag to enable/disable SSL communication with Gateway, default false",
                        "type": "boolean"
                      },
                      "storageMode": {
                        "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "storagePool": {
                        "description": "The ScaleIO Storage Pool associated with the protection domain.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "system": {
                        "description": "The name of the storage system as configured in ScaleIO.",
                        "type": "string"
                      },
                      "volumeName": {
                        "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "storageClassName": {
                    "description": "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "storageos": {
                    "description": "Represents a StorageOS persistent volume resource.",
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "readOnly": {
                        "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                        "type": "boolean"
                      },
                      "secretRef": {
                        "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                        "properties": {
                          "apiVersion": {
                            "description": "API version of the referent.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "fieldPath": {
                            "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "kind": {
                            "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "resourceVersion": {
                            "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "uid": {
                            "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        }
                      },
                      "volumeName": {
                        "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "volumeNamespace": {
                        "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "volumeMode": {
                    "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is an alpha feature and may change in the future.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "vsphereVolume": {
                    "description": "Represents a vSphere volume resource.",
                    "required": [
                      "volumePath"
                    ],
                    "properties": {
                      "fsType": {
                        "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "storagePolicyID": {
                        "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "storagePolicyName": {
                        "description": "Storage Policy Based Management (SPBM) profile name.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "volumePath": {
                        "description": "Path that identifies vSphere volume vmdk",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "status": {
                "description": "PersistentVolumeStatus is the current status of a persistent volume.",
                "properties": {
                  "message": {
                    "description": "A human-readable message indicating details about why the volume is in this state.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "phase": {
                    "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "reason": {
                    "description": "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "x-kubernetes-group-version-kind": [
              {
                "group": "",
                "kind": "PersistentVolume",
                "version": "v1"
              }
            ]
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "PersistentVolumeList"
          ]
        },
        "metadata": {
          "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
          "properties": {
            "continue": {
              "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.",
              "type": [
                "string",
                "null"
              ]
            },
            "resourceVersion": {
              "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
              "type": [
                "string",
                "null"
              ]
            },
            "selfLink": {
              "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeList",
          "version": "v1"
        }
      ],
      "$schema": "http://json-schema.org/schema#",
      "type": "object"
    },
    "tests": {
      "s1SubsetEqOfs2": false
    }
  }
]
