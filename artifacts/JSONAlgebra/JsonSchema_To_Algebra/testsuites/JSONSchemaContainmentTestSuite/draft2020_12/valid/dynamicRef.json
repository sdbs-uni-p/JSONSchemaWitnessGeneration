[
    {
        "id": 1,
        "schema1": {
            "const": [
                "foo",
                "bar"
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamicRef-dynamicAnchor-same-schema/root",
            "type": "array",
            "items": {
                "$dynamicRef": "#items"
            },
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 2,
        "schema1": {
            "const": [
                "foo",
                42
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamicRef-dynamicAnchor-same-schema/root",
            "type": "array",
            "items": {
                "$dynamicRef": "#items"
            },
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 3,
        "schema1": {
            "const": [
                "foo",
                "bar"
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamicRef-anchor-same-schema/root",
            "type": "array",
            "items": {
                "$dynamicRef": "#items"
            },
            "$defs": {
                "foo": {
                    "$anchor": "items",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 4,
        "schema1": {
            "const": [
                "foo",
                42
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamicRef-anchor-same-schema/root",
            "type": "array",
            "items": {
                "$dynamicRef": "#items"
            },
            "$defs": {
                "foo": {
                    "$anchor": "items",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 5,
        "schema1": {
            "const": [
                "foo",
                "bar"
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/ref-dynamicAnchor-same-schema/root",
            "type": "array",
            "items": {
                "$ref": "#items"
            },
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 6,
        "schema1": {
            "const": [
                "foo",
                42
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/ref-dynamicAnchor-same-schema/root",
            "type": "array",
            "items": {
                "$ref": "#items"
            },
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 7,
        "schema1": {
            "const": [
                "foo",
                "bar"
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/typical-dynamic-resolution/root",
            "$ref": "list",
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                },
                "list": {
                    "$id": "list",
                    "type": "array",
                    "items": {
                        "$dynamicRef": "#items"
                    },
                    "$defs": {
                        "items": {
                            "$comment": "This is only needed to satisfy the bookending requirement",
                            "$dynamicAnchor": "items"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 8,
        "schema1": {
            "const": [
                "foo",
                42
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/typical-dynamic-resolution/root",
            "$ref": "list",
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                },
                "list": {
                    "$id": "list",
                    "type": "array",
                    "items": {
                        "$dynamicRef": "#items"
                    },
                    "$defs": {
                        "items": {
                            "$comment": "This is only needed to satisfy the bookending requirement",
                            "$dynamicAnchor": "items"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 9,
        "schema1": {
            "const": [
                "foo",
                "bar"
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-resolution-with-intermediate-scopes/root",
            "$ref": "intermediate-scope",
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                },
                "intermediate-scope": {
                    "$id": "intermediate-scope",
                    "$ref": "list"
                },
                "list": {
                    "$id": "list",
                    "type": "array",
                    "items": {
                        "$dynamicRef": "#items"
                    },
                    "$defs": {
                        "items": {
                            "$comment": "This is only needed to satisfy the bookending requirement",
                            "$dynamicAnchor": "items"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 10,
        "schema1": {
            "const": [
                "foo",
                42
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-resolution-with-intermediate-scopes/root",
            "$ref": "intermediate-scope",
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                },
                "intermediate-scope": {
                    "$id": "intermediate-scope",
                    "$ref": "list"
                },
                "list": {
                    "$id": "list",
                    "type": "array",
                    "items": {
                        "$dynamicRef": "#items"
                    },
                    "$defs": {
                        "items": {
                            "$comment": "This is only needed to satisfy the bookending requirement",
                            "$dynamicAnchor": "items"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 11,
        "schema1": {
            "const": [
                "foo",
                42
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-resolution-ignores-anchors/root",
            "$ref": "list",
            "$defs": {
                "foo": {
                    "$anchor": "items",
                    "type": "string"
                },
                "list": {
                    "$id": "list",
                    "type": "array",
                    "items": {
                        "$dynamicRef": "#items"
                    },
                    "$defs": {
                        "items": {
                            "$comment": "This is only needed to satisfy the bookending requirement",
                            "$dynamicAnchor": "items"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 12,
        "schema1": {
            "const": [
                "foo",
                42
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-resolution-without-bookend/root",
            "$ref": "list",
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                },
                "list": {
                    "$id": "list",
                    "type": "array",
                    "items": {
                        "$dynamicRef": "#items"
                    },
                    "$defs": {
                        "items": {
                            "$comment": "This is only needed to give the reference somewhere to resolve to when it behaves like $ref",
                            "$anchor": "items"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 13,
        "schema1": {
            "const": [
                "foo",
                42
            ]
        },
        "schema2": {
            "$id": "https://test.json-schema.org/unmatched-dynamic-anchor/root",
            "$ref": "list",
            "$defs": {
                "foo": {
                    "$dynamicAnchor": "items",
                    "type": "string"
                },
                "list": {
                    "$id": "list",
                    "type": "array",
                    "items": {
                        "$dynamicRef": "#items"
                    },
                    "$defs": {
                        "items": {
                            "$comment": "This is only needed to give the reference somewhere to resolve to when it behaves like $ref",
                            "$anchor": "items",
                            "$dynamicAnchor": "foo"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 14,
        "schema1": {
            "const": {
                "foo": "pass",
                "bar": {
                    "baz": {
                        "foo": "pass"
                    }
                }
            }
        },
        "schema2": {
            "$id": "https://test.json-schema.org/relative-dynamic-reference/root",
            "$dynamicAnchor": "meta",
            "type": "object",
            "properties": {
                "foo": {
                    "const": "pass"
                }
            },
            "$ref": "extended",
            "$defs": {
                "extended": {
                    "$id": "extended",
                    "$dynamicAnchor": "meta",
                    "type": "object",
                    "properties": {
                        "bar": {
                            "$ref": "bar"
                        }
                    }
                },
                "bar": {
                    "$id": "bar",
                    "type": "object",
                    "properties": {
                        "baz": {
                            "$dynamicRef": "extended#meta"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 15,
        "schema1": {
            "const": {
                "foo": "pass",
                "bar": {
                    "baz": {
                        "foo": "fail"
                    }
                }
            }
        },
        "schema2": {
            "$id": "https://test.json-schema.org/relative-dynamic-reference/root",
            "$dynamicAnchor": "meta",
            "type": "object",
            "properties": {
                "foo": {
                    "const": "pass"
                }
            },
            "$ref": "extended",
            "$defs": {
                "extended": {
                    "$id": "extended",
                    "$dynamicAnchor": "meta",
                    "type": "object",
                    "properties": {
                        "bar": {
                            "$ref": "bar"
                        }
                    }
                },
                "bar": {
                    "$id": "bar",
                    "type": "object",
                    "properties": {
                        "baz": {
                            "$dynamicRef": "extended#meta"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 16,
        "schema1": {
            "const": {
                "foo": "pass",
                "bar": {
                    "baz": {
                        "foo": "fail"
                    }
                }
            }
        },
        "schema2": {
            "$id": "https://test.json-schema.org/relative-dynamic-reference-without-bookend/root",
            "$dynamicAnchor": "meta",
            "type": "object",
            "properties": {
                "foo": {
                    "const": "pass"
                }
            },
            "$ref": "extended",
            "$defs": {
                "extended": {
                    "$id": "extended",
                    "$anchor": "meta",
                    "type": "object",
                    "properties": {
                        "bar": {
                            "$ref": "bar"
                        }
                    }
                },
                "bar": {
                    "$id": "bar",
                    "type": "object",
                    "properties": {
                        "baz": {
                            "$dynamicRef": "extended#meta"
                        }
                    }
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 17,
        "schema1": {
            "const": {
                "alpha": 1.1
            }
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
            "$defs": {
                "inner": {
                    "$id": "inner",
                    "$dynamicAnchor": "foo",
                    "title": "inner",
                    "additionalProperties": {
                        "$dynamicRef": "#foo"
                    }
                }
            },
            "if": {
                "propertyNames": {
                    "pattern": "^[a-m]"
                }
            },
            "then": {
                "title": "any type of node",
                "$id": "anyLeafNode",
                "$dynamicAnchor": "foo",
                "$ref": "main#/$defs/inner"
            },
            "else": {
                "title": "integer node",
                "$id": "integerNode",
                "$dynamicAnchor": "foo",
                "type": [
                    "object",
                    "integer"
                ],
                "$ref": "main#/$defs/inner"
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    },
    {
        "id": 18,
        "schema1": {
            "const": {
                "november": 1.1
            }
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
            "$defs": {
                "inner": {
                    "$id": "inner",
                    "$dynamicAnchor": "foo",
                    "title": "inner",
                    "additionalProperties": {
                        "$dynamicRef": "#foo"
                    }
                }
            },
            "if": {
                "propertyNames": {
                    "pattern": "^[a-m]"
                }
            },
            "then": {
                "title": "any type of node",
                "$id": "anyLeafNode",
                "$dynamicAnchor": "foo",
                "$ref": "main#/$defs/inner"
            },
            "else": {
                "title": "integer node",
                "$id": "integerNode",
                "$dynamicAnchor": "foo",
                "type": [
                    "object",
                    "integer"
                ],
                "$ref": "main#/$defs/inner"
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 19,
        "schema1": {
            "const": "a string"
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
            "if": {
                "$id": "first_scope",
                "$defs": {
                    "thingy": {
                        "$comment": "this is first_scope#thingy",
                        "$dynamicAnchor": "thingy",
                        "type": "number"
                    }
                }
            },
            "then": {
                "$id": "second_scope",
                "$ref": "start",
                "$defs": {
                    "thingy": {
                        "$comment": "this is second_scope#thingy, the final destination of the $dynamicRef",
                        "$dynamicAnchor": "thingy",
                        "type": "null"
                    }
                }
            },
            "$defs": {
                "start": {
                    "$comment": "this is the landing spot from $ref",
                    "$id": "start",
                    "$dynamicRef": "inner_scope#thingy"
                },
                "thingy": {
                    "$comment": "this is the first stop for the $dynamicRef",
                    "$id": "inner_scope",
                    "$dynamicAnchor": "thingy",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 20,
        "schema1": {
            "const": 42
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
            "if": {
                "$id": "first_scope",
                "$defs": {
                    "thingy": {
                        "$comment": "this is first_scope#thingy",
                        "$dynamicAnchor": "thingy",
                        "type": "number"
                    }
                }
            },
            "then": {
                "$id": "second_scope",
                "$ref": "start",
                "$defs": {
                    "thingy": {
                        "$comment": "this is second_scope#thingy, the final destination of the $dynamicRef",
                        "$dynamicAnchor": "thingy",
                        "type": "null"
                    }
                }
            },
            "$defs": {
                "start": {
                    "$comment": "this is the landing spot from $ref",
                    "$id": "start",
                    "$dynamicRef": "inner_scope#thingy"
                },
                "thingy": {
                    "$comment": "this is the first stop for the $dynamicRef",
                    "$id": "inner_scope",
                    "$dynamicAnchor": "thingy",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": false
        }
    },
    {
        "id": 21,
        "schema1": {
            "const": null
        },
        "schema2": {
            "$id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
            "if": {
                "$id": "first_scope",
                "$defs": {
                    "thingy": {
                        "$comment": "this is first_scope#thingy",
                        "$dynamicAnchor": "thingy",
                        "type": "number"
                    }
                }
            },
            "then": {
                "$id": "second_scope",
                "$ref": "start",
                "$defs": {
                    "thingy": {
                        "$comment": "this is second_scope#thingy, the final destination of the $dynamicRef",
                        "$dynamicAnchor": "thingy",
                        "type": "null"
                    }
                }
            },
            "$defs": {
                "start": {
                    "$comment": "this is the landing spot from $ref",
                    "$id": "start",
                    "$dynamicRef": "inner_scope#thingy"
                },
                "thingy": {
                    "$comment": "this is the first stop for the $dynamicRef",
                    "$id": "inner_scope",
                    "$dynamicAnchor": "thingy",
                    "type": "string"
                }
            }
        },
        "tests": {
            "s1SubsetEqOfs2": true
        }
    }
]