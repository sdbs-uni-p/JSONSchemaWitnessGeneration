{
    "gear": {
        "name": "hcp-func",
        "label": "HCP: Functional Preprocessing Pipeline",
        "description": "Runs the functional preprocessing steps of the Human Connectome Project Minimal Preprocessing Pipeline described in Glasser et al. 2013. Currently, this Gear includes v4.0-alpha release of fMRIVolume and fMRISurface, as well as generating some helpful QC images. NOTE: this Gear requires that the HCP structural preprocessing pipeline has been run, as the output of that pipeline must be provided as input to this Gear.",
        "author": "Human Connectome Project",
        "maintainer": "Flywheel <support@flywheel.io>",
        "license": "Other",
        "url": "https://github.com/Washington-University/Pipelines",
        "source": "https://github.com/flywheel-apps/hcp-func",
        "cite": "Glasser M. F., Sotiropoulos S. N., Wilson J. A., Coalson T. S., Fischl B., Andersson J. L., \u2026 Consortium, W. U.-M. H. (2013). The minimal preprocessing pipelines for the Human Connectome Project. NeuroImage, 80, 105\u2013124.",
        "version": "0.1.6",
        "custom": {
            "docker-image": "flywheel/hcp-func:0.1.6",
            "gear-builder": {
                "category": "analysis",
                "image": "flywheel/hcp-func:0.1.6"
            },
            "flywheel": {
                "suite": "Human Connectome Project"
            }
        },
        "inputs": {
            "StructZip": {
                "description": "Zipped output from HCP-Struct pipeline",
                "base": "file",
                "type": {
                    "enum": [
                        "zip"
                    ]
                }
            },
            "fMRITimeSeries": {
                "description": "Functional volume time-series",
                "base": "file",
                "type": {
                    "enum": [
                        "nifti"
                    ]
                }
            },
            "fMRIScout": {
                "description": "High-quality exemplar volume from fMRI time-series. If using Multi-Band for fMRI, and Single-Band reference volume is available, use SBRef.  Otherwise, leave empty.",
                "base": "file",
                "type": {
                    "enum": [
                        "nifti"
                    ]
                },
                "optional": true
            },
            "GradientCoeff": {
                "description": "Scanner gradient nonlinearity coefficient file",
                "base": "file",
                "optional": true
            },
            "SpinEchoPositive": {
                "description": "Spin echo field map for correcting T1w and T2w (Positive phase-encode, ie: R>>L or P>>A)",
                "base": "file",
                "type": {
                    "enum": [
                        "nifti"
                    ]
                },
                "optional": true
            },
            "SpinEchoNegative": {
                "description": "Spin echo field map for correcting T1w and T2w (Negative phase-encode, ie: L>>R or A>>P)",
                "base": "file",
                "type": {
                    "enum": [
                        "nifti"
                    ]
                },
                "optional": true
            },
            "SiemensGREMagnitude": {
                "description": "B0 GRE field map magnitude from a Siemens scanner (Must also provide SiemensGREPhase)",
                "base": "file",
                "type": {
                    "enum": [
                        "nifti"
                    ]
                },
                "optional": true
            },
            "SiemensGREPhase": {
                "description": "B0 GRE field map phase from a Siemens scanner (Must also provide SiemensGREMagnitude)",
                "base": "file",
                "type": {
                    "enum": [
                        "nifti"
                    ]
                },
                "optional": true
            },
            "FreeSurferLicense": {
                "description": "FreeSurfer license.txt file (found in $FREESURFER_HOME/license.txt)",
                "base": "file",
                "optional": false
            }
        },
        "config": {
            "fMRIName": {
                "type": "string",
                "default": "rfMRI_REST",
                "description": "Output name for preprocessed data"
            },
            "BiasCorrection": {
                "type": "string",
                "default": "NONE",
                "description": "Bias-field estimation method. 'NONE'(default),'SEBased', or 'Legacy'. 'SEBased'=Estimate from SpinEchoFieldMap (only possible with both Pos and Neg SpinEcho), 'Legacy'=Estimate from structural scans (only valid if structural collected in the same session, and without any subject movement)"
            },
            "MotionCorrection": {
                "type": "string",
                "default": "MCFLIRT",
                "description": "Use 'MCFLIRT' (standard FSL moco) for most acquisitions.  'FLIRT'=custom algorithm used by HCP3T internally, but not recommended for public use"
            },
            "AnatomyRegDOF": {
                "type": "integer",
                "default": 6,
                "description": "Degrees of freedom for fMRI->Anat registration. 6 (default) = rigid body, when all data is from same scanner. 12 = full affine, recommended for 7T fMRI->3T anatomy"
            },
            "RegName": {
                "type": "string",
                "default": "Empty",
                "description": "Surface registration to use during CIFTI resampling: either 'FS' (freesurfer) or 'MSMSulc'. ('Empty'=gear uses RegName from HCP-Structural )"
            }
        }
    },
    "exchange": {
        "git-commit": "5414a88cf7ee8601b71ca4c2db80a488473b5efc",
        "rootfs-hash": "sha384:c6e5eaa559a0b6aed1db1abbf1b19fc136cbcbef5ac0e1138ca858022213ffdee0006f6d9c4d4d238195305eb7742f16",
        "rootfs-url": "https://storage.googleapis.com/flywheel-exchange/flywheel-hcp-func-sha384-c6e5eaa559a0b6aed1db1abbf1b19fc136cbcbef5ac0e1138ca858022213ffdee0006f6d9c4d4d238195305eb7742f16.tgz"
    },
    "invocation-schema": {
        "title": "Invocation manifest for HCP: Functional Preprocessing Pipeline",
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
            "config": {
                "type": "object",
                "properties": {
                    "fMRIName": {
                        "type": "string",
                        "default": "rfMRI_REST"
                    },
                    "BiasCorrection": {
                        "type": "string",
                        "default": "NONE"
                    },
                    "MotionCorrection": {
                        "type": "string",
                        "default": "MCFLIRT"
                    },
                    "AnatomyRegDOF": {
                        "type": "integer",
                        "default": 6
                    },
                    "RegName": {
                        "type": "string",
                        "default": "Empty"
                    }
                },
                "required": [
                    "fMRIName",
                    "BiasCorrection",
                    "MotionCorrection",
                    "AnatomyRegDOF",
                    "RegName"
                ]
            },
            "inputs": {
                "type": "object",
                "properties": {
                    "StructZip": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "zip"
                                ]
                            }
                        }
                    },
                    "fMRITimeSeries": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "nifti"
                                ]
                            }
                        }
                    },
                    "fMRIScout": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "nifti"
                                ]
                            }
                        }
                    },
                    "GradientCoeff": {
                        "type": "object",
                        "properties": {}
                    },
                    "SpinEchoPositive": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "nifti"
                                ]
                            }
                        }
                    },
                    "SpinEchoNegative": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "nifti"
                                ]
                            }
                        }
                    },
                    "SiemensGREMagnitude": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "nifti"
                                ]
                            }
                        }
                    },
                    "SiemensGREPhase": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "nifti"
                                ]
                            }
                        }
                    },
                    "FreeSurferLicense": {
                        "type": "object",
                        "properties": {}
                    }
                },
                "required": [
                    "StructZip",
                    "fMRITimeSeries",
                    "FreeSurferLicense"
                ]
            }
        },
        "required": [
            "config",
            "inputs"
        ]
    }
}